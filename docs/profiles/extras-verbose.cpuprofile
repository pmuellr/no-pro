{"metaData":{"id":"6706-dde0-9e14-b0cd","date":"2019-03-11T07:08:34.048Z","title":"node","nodeVersion":"10.15.1","arch":"x64","platform":"darwin","pid":12476,"cwd":"/Users/pmuellr/Projects/no-pro","execPath":"/usr/local/bin/node","mainModule":"/Users/pmuellr/Projects/no-pro/packages/runtime/test/run-profile-extras-verbose.js"},"metrics":{"cpu":{"user":76,"system":39,"total":115},"mem":{"rss":17858560,"heapUsed":2757432,"heapTotal":2170880,"external":-8184}},"nodes":[{"id":1,"callFrame":{"functionName":"(root)","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":0,"children":[2,52,53,74,84]},{"id":2,"callFrame":{"functionName":"bootstrapNodeJSCore","scriptId":"10","url":"internal/bootstrap/node.js","lineNumber":14,"columnNumber":29},"hitCount":0,"children":[3]},{"id":3,"callFrame":{"functionName":"startup","scriptId":"10","url":"internal/bootstrap/node.js","lineNumber":29,"columnNumber":18},"hitCount":0,"children":[4]},{"id":4,"callFrame":{"functionName":"Module.runMain","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":728,"columnNumber":25},"hitCount":0,"children":[5]},{"id":5,"callFrame":{"functionName":"_tickCallback","scriptId":"47","url":"internal/process/next_tick.js","lineNumber":40,"columnNumber":24},"hitCount":9,"children":[6,72],"positionTicks":[{"line":70,"ticks":1},{"line":69,"ticks":8}]},{"id":6,"callFrame":{"functionName":"runMicrotasks","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":0,"children":[7]},{"id":7,"callFrame":{"functionName":"","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":0,"children":[8,14]},{"id":8,"callFrame":{"functionName":"startProfiling","scriptId":"65","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/runtime.js","lineNumber":31,"columnNumber":30},"hitCount":0,"children":[9]},{"id":9,"callFrame":{"functionName":"post","scriptId":"66","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/lib/session.js","lineNumber":52,"columnNumber":13},"hitCount":0,"children":[10]},{"id":10,"callFrame":{"functionName":"post","scriptId":"77","url":"inspector.js","lineNumber":60,"columnNumber":6},"hitCount":1,"children":[11],"positionTicks":[{"line":85,"ticks":1}]},{"id":11,"callFrame":{"functionName":"dispatch","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":7,"children":[12],"positionTicks":[{"line":85,"ticks":7}]},{"id":12,"callFrame":{"functionName":"Connection","scriptId":"77","url":"inspector.js","lineNumber":36,"columnNumber":21},"hitCount":0,"children":[13]},{"id":13,"callFrame":{"functionName":"","scriptId":"77","url":"inspector.js","lineNumber":43,"columnNumber":19},"hitCount":2,"positionTicks":[{"line":48,"ticks":1},{"line":45,"ticks":1}]},{"id":14,"callFrame":{"functionName":"runProfile","scriptId":"62","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/run-profile-extras-verbose.js","lineNumber":40,"columnNumber":26},"hitCount":31,"children":[15],"positionTicks":[{"line":44,"ticks":31}]},{"id":15,"callFrame":{"functionName":"codeToProfile","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":16,"columnNumber":29},"hitCount":24,"children":[16,39,49,50,58],"positionTicks":[{"line":37,"ticks":12},{"line":31,"ticks":3},{"line":30,"ticks":1},{"line":17,"ticks":2},{"line":28,"ticks":1},{"line":24,"ticks":5}]},{"id":16,"callFrame":{"functionName":"require","scriptId":"61","url":"internal/modules/cjs/helpers.js","lineNumber":18,"columnNumber":18},"hitCount":1,"children":[17],"positionTicks":[{"line":22,"ticks":1}]},{"id":17,"callFrame":{"functionName":"Module.require","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":628,"columnNumber":35},"hitCount":0,"children":[18]},{"id":18,"callFrame":{"functionName":"Module._load","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":501,"columnNumber":23},"hitCount":0,"children":[19,38]},{"id":19,"callFrame":{"functionName":"Module._resolveFilename","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":546,"columnNumber":34},"hitCount":0,"children":[20,25]},{"id":20,"callFrame":{"functionName":"Module._resolveLookupPaths","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":399,"columnNumber":37},"hitCount":1,"children":[21,22,24],"positionTicks":[{"line":409,"ticks":1}]},{"id":21,"callFrame":{"functionName":"charCodeAt","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":1},{"id":22,"callFrame":{"functionName":"resolve","scriptId":"28","url":"path.js","lineNumber":1072,"columnNumber":27},"hitCount":1,"children":[23],"positionTicks":[{"line":1085,"ticks":1}]},{"id":23,"callFrame":{"functionName":"normalizeString","scriptId":"28","url":"path.js","lineNumber":56,"columnNumber":24},"hitCount":1,"positionTicks":[{"line":65,"ticks":1}]},{"id":24,"callFrame":{"functionName":"dirname","scriptId":"28","url":"path.js","lineNumber":1263,"columnNumber":27},"hitCount":1,"positionTicks":[{"line":1272,"ticks":1}]},{"id":25,"callFrame":{"functionName":"Module._findPath","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":219,"columnNumber":27},"hitCount":3,"children":[26,28,29,30],"positionTicks":[{"line":243,"ticks":1},{"line":229,"ticks":2}]},{"id":26,"callFrame":{"functionName":"stat","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":82,"columnNumber":13},"hitCount":0,"children":[27]},{"id":27,"callFrame":{"functionName":"internalModuleStat","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":4,"positionTicks":[{"line":90,"ticks":4}]},{"id":28,"callFrame":{"functionName":"resolve","scriptId":"28","url":"path.js","lineNumber":1072,"columnNumber":27},"hitCount":2,"positionTicks":[{"line":1104,"ticks":1},{"line":1088,"ticks":1}]},{"id":29,"callFrame":{"functionName":"keys","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":1},{"id":30,"callFrame":{"functionName":"tryExtensions","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":207,"columnNumber":22},"hitCount":0,"children":[31]},{"id":31,"callFrame":{"functionName":"tryFile","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":192,"columnNumber":16},"hitCount":0,"children":[32,34]},{"id":32,"callFrame":{"functionName":"stat","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":82,"columnNumber":13},"hitCount":0,"children":[33]},{"id":33,"callFrame":{"functionName":"internalModuleStat","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":1,"positionTicks":[{"line":90,"ticks":1}]},{"id":34,"callFrame":{"functionName":"toRealPath","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":200,"columnNumber":19},"hitCount":5,"children":[35],"positionTicks":[{"line":202,"ticks":1},{"line":203,"ticks":4}]},{"id":35,"callFrame":{"functionName":"realpathSync","scriptId":"27","url":"fs.js","lineNumber":1375,"columnNumber":21},"hitCount":0,"children":[36]},{"id":36,"callFrame":{"functionName":"validatePath","scriptId":"31","url":"internal/fs/utils.js","lineNumber":441,"columnNumber":21},"hitCount":0,"children":[37]},{"id":37,"callFrame":{"functionName":"nullCheck","scriptId":"31","url":"internal/fs/utils.js","lineNumber":187,"columnNumber":18},"hitCount":1,"positionTicks":[{"line":190,"ticks":1}]},{"id":38,"callFrame":{"functionName":"updateChildren","scriptId":"59","url":"internal/modules/cjs/loader.js","lineNumber":95,"columnNumber":23},"hitCount":1,"positionTicks":[{"line":96,"ticks":1}]},{"id":39,"callFrame":{"functionName":"getDebug","scriptId":"67","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/lib/debug.js","lineNumber":12,"columnNumber":18},"hitCount":0,"children":[40,44]},{"id":40,"callFrame":{"functionName":"getProjectPath","scriptId":"67","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/lib/debug.js","lineNumber":17,"columnNumber":24},"hitCount":0,"children":[41]},{"id":41,"callFrame":{"functionName":"relative","scriptId":"28","url":"path.js","lineNumber":1165,"columnNumber":29},"hitCount":2,"children":[42],"positionTicks":[{"line":1227,"ticks":1},{"line":1182,"ticks":1}]},{"id":42,"callFrame":{"functionName":"resolve","scriptId":"28","url":"path.js","lineNumber":1072,"columnNumber":27},"hitCount":0,"children":[43]},{"id":43,"callFrame":{"functionName":"normalizeString","scriptId":"28","url":"path.js","lineNumber":56,"columnNumber":24},"hitCount":1,"positionTicks":[{"line":85,"ticks":1}]},{"id":44,"callFrame":{"functionName":"createDebug","scriptId":"75","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/node_modules/debug/src/common.js","lineNumber":63,"columnNumber":21},"hitCount":3,"children":[45,48],"positionTicks":[{"line":118,"ticks":1},{"line":117,"ticks":2}]},{"id":45,"callFrame":{"functionName":"useColors","scriptId":"69","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/node_modules/debug/src/node.js","lineNumber":150,"columnNumber":18},"hitCount":1,"children":[46],"positionTicks":[{"line":154,"ticks":1}]},{"id":46,"callFrame":{"functionName":"isatty","scriptId":"70","url":"tty.js","lineNumber":33,"columnNumber":15},"hitCount":0,"children":[47]},{"id":47,"callFrame":{"functionName":"isTTY","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":2,"positionTicks":[{"line":35,"ticks":2}]},{"id":48,"callFrame":{"functionName":"selectColor","scriptId":"75","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/node_modules/debug/src/common.js","lineNumber":44,"columnNumber":21},"hitCount":2,"positionTicks":[{"line":53,"ticks":1},{"line":49,"ticks":1}]},{"id":49,"callFrame":{"functionName":"debug","scriptId":"75","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/node_modules/debug/src/common.js","lineNumber":66,"columnNumber":16},"hitCount":1,"positionTicks":[{"line":67,"ticks":1}]},{"id":50,"callFrame":{"functionName":"factorialSync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":41,"columnNumber":23},"hitCount":117,"children":[51,54],"positionTicks":[{"line":43,"ticks":117}]},{"id":51,"callFrame":{"functionName":"delaySync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":55,"columnNumber":19},"hitCount":17606,"positionTicks":[{"line":58,"ticks":17606}]},{"id":54,"callFrame":{"functionName":"factorialSync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":41,"columnNumber":23},"hitCount":33,"children":[55,56],"positionTicks":[{"line":43,"ticks":33}]},{"id":55,"callFrame":{"functionName":"delaySync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":55,"columnNumber":19},"hitCount":11835,"positionTicks":[{"line":58,"ticks":11835}]},{"id":56,"callFrame":{"functionName":"factorialSync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":41,"columnNumber":23},"hitCount":6,"children":[57],"positionTicks":[{"line":43,"ticks":6}]},{"id":57,"callFrame":{"functionName":"delaySync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":55,"columnNumber":19},"hitCount":5920,"positionTicks":[{"line":58,"ticks":5920}]},{"id":58,"callFrame":{"functionName":"factorialAsync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":48,"columnNumber":30},"hitCount":6,"children":[59],"positionTicks":[{"line":50,"ticks":5},{"line":49,"ticks":1}]},{"id":59,"callFrame":{"functionName":"delayAsync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":61,"columnNumber":26},"hitCount":12,"children":[60],"positionTicks":[{"line":65,"ticks":1},{"line":64,"ticks":10},{"line":62,"ticks":1}]},{"id":60,"callFrame":{"functionName":"setTimeout","scriptId":"52","url":"timers.js","lineNumber":387,"columnNumber":19},"hitCount":12,"children":[61,65],"positionTicks":[{"line":415,"ticks":2},{"line":414,"ticks":9},{"line":388,"ticks":1}]},{"id":61,"callFrame":{"functionName":"Timeout","scriptId":"54","url":"internal/timers.js","lineNumber":54,"columnNumber":16},"hitCount":9,"children":[62],"positionTicks":[{"line":70,"ticks":1},{"line":68,"ticks":1},{"line":82,"ticks":5},{"line":67,"ticks":2}]},{"id":62,"callFrame":{"functionName":"initAsyncResource","scriptId":"54","url":"internal/timers.js","lineNumber":44,"columnNumber":26},"hitCount":12,"children":[63,64],"positionTicks":[{"line":49,"ticks":2},{"line":48,"ticks":5},{"line":46,"ticks":5}]},{"id":63,"callFrame":{"functionName":"newAsyncId","scriptId":"12","url":"internal/async_hooks.js","lineNumber":253,"columnNumber":19},"hitCount":24,"positionTicks":[{"line":255,"ticks":24}]},{"id":64,"callFrame":{"functionName":"initHooksExist","scriptId":"12","url":"internal/async_hooks.js","lineNumber":302,"columnNumber":23},"hitCount":1,"positionTicks":[{"line":304,"ticks":1}]},{"id":65,"callFrame":{"functionName":"exports.active","scriptId":"52","url":"timers.js","lineNumber":150,"columnNumber":40},"hitCount":13,"children":[66],"positionTicks":[{"line":152,"ticks":13}]},{"id":66,"callFrame":{"functionName":"insert","scriptId":"52","url":"timers.js","lineNumber":166,"columnNumber":15},"hitCount":17,"children":[67,68,70],"positionTicks":[{"line":192,"ticks":3},{"line":191,"ticks":4},{"line":183,"ticks":8},{"line":174,"ticks":2}]},{"id":67,"callFrame":{"functionName":"now","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":1,"positionTicks":[{"line":174,"ticks":1}]},{"id":68,"callFrame":{"functionName":"TimersList","scriptId":"52","url":"timers.js","lineNumber":194,"columnNumber":19},"hitCount":3,"children":[69],"positionTicks":[{"line":199,"ticks":1},{"line":202,"ticks":1},{"line":197,"ticks":1}]},{"id":69,"callFrame":{"functionName":"Timer","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":1,"positionTicks":[{"line":201,"ticks":1}]},{"id":70,"callFrame":{"functionName":"append","scriptId":"53","url":"internal/linkedlist.js","lineNumber":28,"columnNumber":15},"hitCount":4,"children":[71],"positionTicks":[{"line":31,"ticks":4}]},{"id":71,"callFrame":{"functionName":"remove","scriptId":"53","url":"internal/linkedlist.js","lineNumber":14,"columnNumber":15},"hitCount":1,"positionTicks":[{"line":17,"ticks":1}]},{"id":72,"callFrame":{"functionName":"isEmpty","scriptId":"49","url":"internal/fixed_queue.js","lineNumber":90,"columnNumber":9},"hitCount":0,"children":[73]},{"id":73,"callFrame":{"functionName":"isEmpty","scriptId":"49","url":"internal/fixed_queue.js","lineNumber":62,"columnNumber":9},"hitCount":1,"positionTicks":[{"line":64,"ticks":1}]},{"id":52,"callFrame":{"functionName":"(program)","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":32690},{"id":53,"callFrame":{"functionName":"(garbage collector)","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":301},{"id":74,"callFrame":{"functionName":"processTimers","scriptId":"52","url":"timers.js","lineNumber":219,"columnNumber":22},"hitCount":19,"children":[75],"positionTicks":[{"line":220,"ticks":1},{"line":223,"ticks":15},{"line":221,"ticks":3}]},{"id":75,"callFrame":{"functionName":"listOnTimeout","scriptId":"52","url":"timers.js","lineNumber":225,"columnNumber":22},"hitCount":20,"children":[76,77,78,105,110],"positionTicks":[{"line":270,"ticks":2},{"line":277,"ticks":2},{"line":283,"ticks":1},{"line":228,"ticks":1},{"line":252,"ticks":3},{"line":230,"ticks":1},{"line":263,"ticks":2},{"line":251,"ticks":1},{"line":284,"ticks":1},{"line":278,"ticks":3},{"line":234,"ticks":3}]},{"id":76,"callFrame":{"functionName":"peek","scriptId":"53","url":"internal/linkedlist.js","lineNumber":8,"columnNumber":13},"hitCount":5,"positionTicks":[{"line":9,"ticks":4},{"line":10,"ticks":1}]},{"id":77,"callFrame":{"functionName":"remove","scriptId":"53","url":"internal/linkedlist.js","lineNumber":14,"columnNumber":15},"hitCount":4,"positionTicks":[{"line":17,"ticks":2},{"line":16,"ticks":2}]},{"id":78,"callFrame":{"functionName":"tryOnTimeout","scriptId":"52","url":"timers.js","lineNumber":291,"columnNumber":21},"hitCount":15,"children":[79,81,82],"positionTicks":[{"line":293,"ticks":1},{"line":306,"ticks":3},{"line":295,"ticks":1},{"line":305,"ticks":3},{"line":300,"ticks":7}]},{"id":79,"callFrame":{"functionName":"emitBeforeScript","scriptId":"12","url":"internal/async_hooks.js","lineNumber":339,"columnNumber":25},"hitCount":9,"children":[80,107],"positionTicks":[{"line":347,"ticks":9}]},{"id":80,"callFrame":{"functionName":"pushAsyncIds","scriptId":"12","url":"internal/async_hooks.js","lineNumber":388,"columnNumber":21},"hitCount":8,"positionTicks":[{"line":395,"ticks":1},{"line":390,"ticks":1},{"line":393,"ticks":2},{"line":391,"ticks":4}]},{"id":107,"callFrame":{"functionName":"validateAsyncId","scriptId":"12","url":"internal/async_hooks.js","lineNumber":116,"columnNumber":24},"hitCount":1,"positionTicks":[{"line":119,"ticks":1}]},{"id":81,"callFrame":{"functionName":"ontimeout","scriptId":"52","url":"timers.js","lineNumber":428,"columnNumber":18},"hitCount":5,"positionTicks":[{"line":436,"ticks":5}]},{"id":82,"callFrame":{"functionName":"emitAfterScript","scriptId":"12","url":"internal/async_hooks.js","lineNumber":353,"columnNumber":24},"hitCount":0,"children":[83,112]},{"id":83,"callFrame":{"functionName":"validateAsyncId","scriptId":"12","url":"internal/async_hooks.js","lineNumber":116,"columnNumber":24},"hitCount":1,"positionTicks":[{"line":119,"ticks":1}]},{"id":112,"callFrame":{"functionName":"popAsyncIds","scriptId":"12","url":"internal/async_hooks.js","lineNumber":401,"columnNumber":20},"hitCount":2,"positionTicks":[{"line":404,"ticks":2}]},{"id":105,"callFrame":{"functionName":"ok","scriptId":"25","url":"assert.js","lineNumber":355,"columnNumber":11},"hitCount":2,"positionTicks":[{"line":356,"ticks":1},{"line":357,"ticks":1}]},{"id":110,"callFrame":{"functionName":"close","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":1,"positionTicks":[{"line":284,"ticks":1}]},{"id":84,"callFrame":{"functionName":"","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":0,"children":[85,96,114]},{"id":85,"callFrame":{"functionName":"codeToProfile","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":16,"columnNumber":29},"hitCount":0,"children":[86,113]},{"id":86,"callFrame":{"functionName":"factorialAsync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":48,"columnNumber":30},"hitCount":1,"children":[87],"positionTicks":[{"line":50,"ticks":1}]},{"id":87,"callFrame":{"functionName":"delayAsync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":61,"columnNumber":26},"hitCount":1,"children":[88],"positionTicks":[{"line":63,"ticks":1}]},{"id":88,"callFrame":{"functionName":"setTimeout","scriptId":"52","url":"timers.js","lineNumber":387,"columnNumber":19},"hitCount":1,"children":[89,91],"positionTicks":[{"line":394,"ticks":1}]},{"id":89,"callFrame":{"functionName":"Timeout","scriptId":"54","url":"internal/timers.js","lineNumber":54,"columnNumber":16},"hitCount":2,"children":[90],"positionTicks":[{"line":80,"ticks":1},{"line":69,"ticks":1}]},{"id":90,"callFrame":{"functionName":"initAsyncResource","scriptId":"54","url":"internal/timers.js","lineNumber":44,"columnNumber":26},"hitCount":1,"positionTicks":[{"line":46,"ticks":1}]},{"id":91,"callFrame":{"functionName":"exports.active","scriptId":"52","url":"timers.js","lineNumber":150,"columnNumber":40},"hitCount":0,"children":[92]},{"id":92,"callFrame":{"functionName":"insert","scriptId":"52","url":"timers.js","lineNumber":166,"columnNumber":15},"hitCount":2,"children":[93,94],"positionTicks":[{"line":186,"ticks":1},{"line":174,"ticks":1}]},{"id":93,"callFrame":{"functionName":"TimersList","scriptId":"52","url":"timers.js","lineNumber":194,"columnNumber":19},"hitCount":2,"children":[106],"positionTicks":[{"line":202,"ticks":1},{"line":196,"ticks":1}]},{"id":106,"callFrame":{"functionName":"Timer","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":1,"positionTicks":[{"line":201,"ticks":1}]},{"id":94,"callFrame":{"functionName":"append","scriptId":"53","url":"internal/linkedlist.js","lineNumber":28,"columnNumber":15},"hitCount":0,"children":[95]},{"id":95,"callFrame":{"functionName":"remove","scriptId":"53","url":"internal/linkedlist.js","lineNumber":14,"columnNumber":15},"hitCount":1,"positionTicks":[{"line":24,"ticks":1}]},{"id":113,"callFrame":{"functionName":"debug","scriptId":"75","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/node_modules/debug/src/common.js","lineNumber":66,"columnNumber":16},"hitCount":1,"positionTicks":[{"line":67,"ticks":1}]},{"id":96,"callFrame":{"functionName":"factorialAsync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":48,"columnNumber":30},"hitCount":1,"children":[97],"positionTicks":[{"line":53,"ticks":1}]},{"id":97,"callFrame":{"functionName":"factorialAsync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":48,"columnNumber":30},"hitCount":1,"children":[98],"positionTicks":[{"line":50,"ticks":1}]},{"id":98,"callFrame":{"functionName":"delayAsync","scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","lineNumber":61,"columnNumber":26},"hitCount":0,"children":[99]},{"id":99,"callFrame":{"functionName":"setTimeout","scriptId":"52","url":"timers.js","lineNumber":387,"columnNumber":19},"hitCount":1,"children":[100,103],"positionTicks":[{"line":388,"ticks":1}]},{"id":100,"callFrame":{"functionName":"Timeout","scriptId":"54","url":"internal/timers.js","lineNumber":54,"columnNumber":16},"hitCount":1,"children":[101],"positionTicks":[{"line":69,"ticks":1}]},{"id":101,"callFrame":{"functionName":"initAsyncResource","scriptId":"54","url":"internal/timers.js","lineNumber":44,"columnNumber":26},"hitCount":0,"children":[102]},{"id":102,"callFrame":{"functionName":"newAsyncId","scriptId":"12","url":"internal/async_hooks.js","lineNumber":253,"columnNumber":19},"hitCount":1,"positionTicks":[{"line":255,"ticks":1}]},{"id":103,"callFrame":{"functionName":"exports.active","scriptId":"52","url":"timers.js","lineNumber":150,"columnNumber":40},"hitCount":0,"children":[104]},{"id":104,"callFrame":{"functionName":"insert","scriptId":"52","url":"timers.js","lineNumber":166,"columnNumber":15},"hitCount":2,"children":[108,111],"positionTicks":[{"line":180,"ticks":1},{"line":192,"ticks":1}]},{"id":108,"callFrame":{"functionName":"TimersList","scriptId":"52","url":"timers.js","lineNumber":194,"columnNumber":19},"hitCount":0,"children":[109]},{"id":109,"callFrame":{"functionName":"Timer","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":2,"positionTicks":[{"line":201,"ticks":2}]},{"id":111,"callFrame":{"functionName":"now","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":1,"positionTicks":[{"line":174,"ticks":1}]},{"id":114,"callFrame":{"functionName":"runProfile","scriptId":"62","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/run-profile-extras-verbose.js","lineNumber":40,"columnNumber":26},"hitCount":16,"children":[115],"positionTicks":[{"line":46,"ticks":16}]},{"id":115,"callFrame":{"functionName":"stopProfiling","scriptId":"65","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/runtime.js","lineNumber":63,"columnNumber":31},"hitCount":2,"children":[116],"positionTicks":[{"line":68,"ticks":1},{"line":64,"ticks":1}]},{"id":116,"callFrame":{"functionName":"post","scriptId":"66","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/lib/session.js","lineNumber":52,"columnNumber":13},"hitCount":1,"children":[117],"positionTicks":[{"line":61,"ticks":1}]},{"id":117,"callFrame":{"functionName":"post","scriptId":"77","url":"inspector.js","lineNumber":60,"columnNumber":6},"hitCount":0,"children":[118]},{"id":118,"callFrame":{"functionName":"dispatch","scriptId":"0","url":"","lineNumber":-1,"columnNumber":-1},"hitCount":14,"positionTicks":[{"line":85,"ticks":14}]}],"startTime":2521063329743,"endTime":2521064541939,"samples":[11,11,11,11,11,11,11,10,13,13,11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,20,21,22,23,24,25,25,25,27,27,27,28,28,27,29,33,34,34,34,34,34,37,38,43,41,41,44,44,44,45,47,47,48,48,49,15,15,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,15,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,53,53,53,53,53,53,53,53,53,53,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,53,53,53,53,53,53,53,53,53,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,53,53,53,53,53,53,53,53,53,53,53,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,53,53,53,53,53,53,53,53,53,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,15,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,53,53,53,53,53,53,53,53,53,53,53,53,53,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,53,53,53,53,53,53,53,53,53,53,53,53,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,53,53,53,53,53,53,53,53,53,53,53,53,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,53,53,53,53,53,53,53,53,53,53,57,57,57,57,57,57,57,57,57,57,57,57,57,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,53,53,53,53,53,53,53,53,53,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,53,53,53,53,53,53,53,53,53,53,53,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,53,53,53,53,53,53,53,53,53,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,15,15,15,15,15,15,15,15,15,15,15,15,15,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,62,62,62,62,62,62,62,62,64,60,60,65,65,65,65,65,65,65,65,65,65,65,65,65,67,66,66,66,66,66,66,66,66,66,68,68,69,68,66,66,66,66,66,70,70,70,70,71,66,66,66,59,5,5,73,5,5,5,5,5,5,5,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,76,77,77,77,75,75,79,79,79,79,79,79,79,79,79,80,80,78,78,78,78,78,78,78,81,81,81,78,78,78,83,78,78,78,75,75,88,89,89,90,92,93,93,95,86,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,74,74,75,78,80,75,97,102,104,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,76,76,76,75,105,75,52,87,106,92,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,74,77,107,81,75,52,100,104,109,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,76,105,78,80,80,80,81,75,75,75,110,52,99,111,109,96,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,75,75,75,75,80,80,112,112,75,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,116,118,118,118,118,118,118,118,118,118,118,118,118,118,118],"timeDeltas":[7563,133,6,14,13,11,12,14,12,11,21,23,11,10,12,10,11,11,12,12,12,12,12,12,12,12,12,18,10,11,20,6,13,12,12,12,12,15,9,12,11,11,11,13,13,11,10,12,11,12,11,11,11,11,11,12,12,13,11,30,5,9,11,12,11,13,35,8,4,8,11,11,24,17,10,11,25,5,7,11,12,10,11,12,12,10,11,88,48,14,7,12,19,20,5,6,18,6,20,11,11,38,10,30,12,11,55,17,13,36,6,85,9,13,18,61,14,11,12,16,14,15,17,16,15,13,15,16,13,14,15,17,16,14,20,14,38,5,17,20,50,22,10,19,22,15,22,15,20,24,23,24,10,16,16,18,19,22,7,26,26,16,19,20,18,167,8,130,9,14,13,21,22,19,109,21,15,20,16,18,19,14,18,20,16,25,15,24,13,50,11,20,16,21,12,26,17,14,20,14,20,14,21,16,20,15,19,23,19,24,24,9,12,19,14,25,15,23,13,23,17,20,13,22,14,18,31,17,15,16,16,20,19,15,16,15,16,16,21,13,22,16,24,14,19,20,19,19,15,23,13,10,23,10,62,13,28,28,19,20,18,10,27,13,18,26,20,14,17,19,14,35,12,19,24,46,47,17,41,11,18,16,22,15,11,19,15,16,16,19,15,16,15,15,16,17,15,17,15,17,15,17,15,19,15,14,17,15,17,15,15,16,17,15,16,16,16,16,15,16,15,16,15,15,16,17,15,15,16,17,15,16,15,18,14,16,15,16,16,16,31,20,18,16,15,17,16,15,16,16,15,16,16,16,15,16,15,16,15,16,16,16,16,16,16,15,16,15,16,26,22,13,17,14,17,33,16,16,21,16,15,15,17,15,15,17,15,16,17,15,16,16,16,16,16,16,15,16,16,17,15,15,16,16,15,15,17,15,16,15,16,16,16,15,16,16,15,16,16,15,17,15,17,15,15,42,13,19,15,18,21,13,30,24,29,13,19,14,17,15,22,12,23,15,13,36,13,35,12,27,10,9,18,16,16,15,16,16,15,17,16,15,23,15,17,15,22,32,31,12,22,13,14,17,36,16,14,16,16,16,33,13,43,13,18,14,17,14,17,15,16,19,14,15,15,17,15,15,17,14,15,16,16,15,16,15,15,16,16,16,16,15,16,15,11,17,15,15,16,16,16,15,15,15,16,16,15,16,16,15,16,16,15,17,15,16,16,15,16,15,15,16,15,16,15,16,15,15,15,16,16,15,15,16,16,15,16,15,15,16,15,15,15,16,16,15,15,16,16,15,16,16,15,15,16,33,15,15,16,16,15,15,17,15,15,16,16,15,15,17,15,15,15,16,16,15,16,16,15,15,16,16,15,16,16,15,16,14,17,15,16,16,15,16,16,15,15,16,16,15,16,16,15,15,15,16,16,16,16,15,15,34,15,16,16,15,16,25,13,30,25,5,14,18,15,14,17,46,4,14,14,17,15,15,15,16,16,15,16,15,16,15,15,15,16,16,17,15,15,17,16,16,15,17,15,34,16,15,16,15,15,16,15,16,16,17,15,15,16,15,15,16,17,15,16,15,16,15,15,17,16,15,15,16,15,15,17,14,15,16,15,15,16,18,14,15,15,16,16,15,17,15,16,15,16,15,16,16,14,17,15,31,16,16,15,15,17,15,16,16,15,17,15,16,15,15,15,16,16,15,15,16,15,15,17,14,15,16,15,20,16,21,14,34,15,12,19,14,16,21,17,14,15,15,16,31,15,15,17,15,16,15,15,16,16,15,16,16,16,15,16,16,15,16,16,15,17,15,16,16,15,15,16,15,15,16,16,15,15,17,15,15,16,16,15,16,16,15,16,16,15,15,15,17,15,16,16,15,16,16,15,16,16,15,17,15,15,16,17,14,16,16,15,15,17,15,17,15,15,16,15,15,15,16,16,15,16,16,15,17,15,15,15,16,15,15,16,15,16,15,15,16,16,15,15,32,16,16,15,15,16,16,15,15,15,16,16,15,15,15,17,15,15,15,17,15,15,15,17,15,15,15,17,15,15,15,17,15,15,15,16,15,16,15,16,16,15,16,14,17,15,15,15,17,15,15,17,16,15,15,17,15,15,15,16,16,15,15,15,17,15,15,15,15,15,17,33,15,17,16,15,15,17,17,20,18,14,15,15,16,16,15,16,14,17,15,15,15,16,16,14,15,15,16,16,31,15,16,16,15,15,17,15,15,15,16,16,15,15,15,16,16,15,15,15,17,16,16,14,17,15,15,16,16,15,15,16,16,15,15,17,15,15,15,16,16,15,16,16,15,15,15,17,15,15,15,15,50,16,16,15,15,17,15,14,14,17,16,24,27,7,16,16,16,15,16,16,36,16,17,17,16,16,16,16,17,15,16,16,16,15,19,15,16,17,16,16,17,16,15,17,17,17,16,16,35,17,16,16,22,24,16,24,30,16,16,16,11,17,14,17,16,26,5,16,16,16,16,16,16,16,16,16,17,27,14,23,14,19,13,21,13,23,12,27,12,22,14,25,13,19,17,17,16,16,15,17,15,16,16,25,8,17,17,16,17,15,15,17,15,17,14,26,6,17,15,16,16,16,16,15,16,16,15,16,16,16,17,15,16,18,30,19,10,17,16,15,15,16,16,16,16,16,15,50,17,15,17,16,16,16,16,16,16,17,15,17,17,16,15,17,16,16,16,16,15,15,16,16,16,16,16,15,17,16,16,15,16,16,16,16,16,15,15,17,16,16,16,16,16,16,16,16,17,15,16,16,16,16,16,16,16,16,17,20,17,15,17,16,15,15,17,16,16,16,16,16,23,39,16,37,11,15,17,16,24,6,16,15,16,16,16,15,15,17,14,17,15,15,15,16,16,15,15,36,17,15,15,17,15,16,17,15,15,16,16,15,17,15,16,15,16,15,17,15,15,17,14,17,15,17,15,17,15,16,16,14,16,15,17,15,15,17,15,16,15,15,15,17,15,16,15,15,16,15,15,17,15,16,15,15,17,15,16,15,14,16,15,16,15,15,15,16,16,15,16,15,15,17,15,16,16,15,17,14,17,15,17,14,17,15,17,15,16,15,15,17,15,16,16,15,17,15,16,15,31,15,17,14,17,15,16,15,15,16,15,16,15,15,16,16,15,15,16,15,14,16,26,23,17,15,17,15,16,16,15,17,15,17,15,15,17,14,17,14,16,15,17,15,15,17,14,16,15,15,16,16,16,15,15,16,15,15,17,15,15,16,17,15,15,17,15,15,16,15,17,15,17,15,16,15,16,15,15,15,16,15,17,15,15,17,15,17,15,15,17,14,17,15,17,15,15,16,15,16,30,16,15,14,16,15,15,15,16,16,15,15,15,17,15,17,15,17,15,14,17,15,16,17,15,14,16,15,16,16,15,17,15,16,17,15,15,17,15,17,15,16,15,15,17,15,15,17,15,16,15,15,17,15,17,15,16,15,17,15,15,15,16,17,15,15,17,15,14,17,14,17,15,16,15,15,14,17,15,17,15,16,17,15,17,15,14,17,15,16,15,15,17,15,16,15,15,14,17,16,30,15,16,17,16,15,17,15,17,15,16,17,15,16,15,15,16,15,14,16,16,15,17,15,15,16,17,16,15,15,17,14,16,15,15,16,15,14,16,15,15,16,15,15,16,15,16,14,17,15,15,17,15,16,15,15,16,15,15,16,15,15,16,15,15,17,15,16,15,15,16,15,15,16,15,15,16,16,15,17,15,17,15,17,15,16,15,15,17,15,16,16,15,17,15,17,14,17,15,17,31,16,51,13,15,16,16,15,17,16,16,15,17,15,17,15,16,15,15,15,16,16,16,18,13,15,17,15,16,15,16,16,15,18,14,16,15,15,16,15,15,15,16,15,17,15,17,16,16,15,16,15,17,15,16,16,15,17,14,15,16,15,15,15,17,15,15,15,16,15,15,17,14,22,29,40,5,26,13,18,15,21,15,16,16,15,14,16,15,15,17,15,16,17,14,16,16,15,15,17,33,16,16,16,15,17,15,15,17,16,15,15,15,16,16,15,16,15,15,17,15,16,15,15,16,14,17,15,15,17,15,16,15,15,16,15,15,16,15,15,16,16,15,15,17,15,15,17,15,17,15,16,15,15,16,15,15,16,16,16,16,15,17,16,16,16,15,16,16,15,17,15,17,15,17,15,16,15,15,16,16,15,17,15,16,15,15,15,17,15,17,15,16,15,15,16,15,15,16,15,30,16,16,16,15,17,15,17,14,15,15,16,15,15,15,17,15,15,17,15,16,15,15,16,15,15,16,16,16,16,15,16,15,15,15,17,15,16,16,15,17,15,15,16,16,16,16,15,15,17,15,15,16,16,15,17,16,16,15,18,14,16,16,15,16,15,15,16,42,35,14,18,15,17,14,16,15,17,16,24,5,17,16,15,16,17,16,16,16,17,15,16,17,16,33,14,19,15,17,16,35,15,16,16,18,14,24,19,16,18,32,23,22,18,19,16,19,17,19,13,26,15,20,21,15,18,17,19,11,18,16,17,16,16,19,19,12,64,5,21,12,18,20,16,16,15,16,16,15,16,16,16,16,16,15,16,15,16,16,15,16,16,16,34,16,19,15,18,15,30,13,26,18,23,24,26,18,16,21,15,16,17,15,15,17,15,14,16,16,15,17,15,16,15,15,16,16,15,16,37,16,16,16,16,24,8,16,16,15,15,16,16,15,16,15,15,16,16,16,16,15,16,16,24,21,13,18,15,17,16,16,21,13,22,14,22,21,25,14,26,13,17,17,15,16,16,15,16,16,16,17,16,15,18,14,16,16,16,16,16,15,25,4,17,16,16,16,16,16,14,17,16,40,23,15,19,16,16,15,15,17,15,17,17,27,13,18,15,18,14,23,15,17,15,17,16,16,16,16,15,34,16,16,16,16,15,15,17,16,15,17,15,16,15,16,16,15,33,13,19,15,22,22,15,17,16,15,15,17,15,16,15,17,15,15,16,15,35,13,21,16,17,33,18,12,26,13,58,13,19,18,17,15,16,16,15,16,16,15,16,15,16,16,15,16,15,15,17,15,16,16,15,16,15,15,16,15,16,16,15,16,16,16,14,17,15,15,17,15,16,16,15,35,12,14,18,16,17,15,36,17,17,24,15,17,62,35,5,17,13,18,15,16,46,12,18,23,10,17,27,17,17,24,15,17,24,16,27,15,17,15,17,15,17,16,16,15,17,16,15,24,14,23,9,15,17,17,14,15,16,17,16,16,15,16,15,16,16,16,15,16,15,15,17,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,15,15,15,17,16,15,16,15,16,15,16,15,16,15,16,15,15,17,35,15,16,15,16,15,16,16,15,16,16,15,16,15,16,16,16,16,16,15,15,16,16,15,16,15,16,15,17,16,15,16,68,11,15,16,15,16,15,16,15,15,17,16,15,16,15,16,15,16,16,16,15,16,15,15,17,16,15,16,16,16,15,16,15,16,15,15,17,16,16,15,16,15,16,16,16,15,16,15,16,15,16,15,15,16,15,17,16,16,17,17,27,16,17,15,15,17,15,35,16,16,18,18,18,17,11,16,15,27,15,38,14,20,33,22,18,17,15,11,16,16,14,17,15,17,15,16,15,16,16,15,17,16,16,16,15,15,17,15,16,15,16,16,16,15,15,16,16,15,15,16,15,17,16,16,16,15,16,15,16,16,16,15,15,16,17,16,15,16,15,14,17,16,16,16,15,16,16,16,15,15,17,15,17,15,17,15,17,16,16,16,15,15,17,16,16,15,16,15,34,15,16,16,16,15,16,17,16,15,15,17,15,17,16,15,15,17,15,17,15,14,16,15,16,15,15,16,16,15,16,15,16,15,15,16,17,15,16,17,16,15,15,17,16,15,15,17,16,16,16,15,16,15,15,17,15,16,15,16,15,15,16,17,16,15,15,16,16,15,15,16,17,16,16,16,15,15,16,17,15,16,15,16,15,17,16,16,15,16,15,17,16,30,16,15,16,15,16,15,31,16,15,16,16,16,15,16,16,16,15,16,15,15,17,16,14,16,15,16,15,16,15,16,15,32,16,16,15,17,16,15,15,17,15,17,14,17,15,16,17,16,15,15,17,15,17,16,15,15,17,16,15,16,16,16,15,15,16,16,16,16,15,16,17,16,15,16,15,15,16,16,15,16,15,15,17,16,15,15,17,16,16,16,15,15,17,16,15,16,16,26,6,44,31,6,35,13,17,65,14,20,25,17,19,15,17,28,8,16,18,13,18,15,17,15,14,16,15,16,19,24,12,20,16,16,15,17,25,15,15,17,15,16,15,15,17,16,15,16,15,16,16,16,16,15,17,16,15,16,16,15,17,15,17,15,16,16,15,16,15,15,16,16,15,15,17,15,17,15,17,16,16,16,15,15,17,15,17,15,17,15,17,16,16,16,15,15,17,14,16,14,16,15,15,17,15,17,15,17,32,16,17,16,16,16,15,15,17,15,17,15,17,15,16,15,17,16,16,15,17,15,16,17,16,16,16,15,17,14,17,15,17,15,17,15,16,15,15,15,16,17,15,16,15,15,17,16,15,15,17,15,16,16,15,16,15,16,15,15,17,15,16,15,17,16,16,16,16,15,17,14,17,16,16,16,16,16,16,16,16,16,16,15,17,15,17,15,15,17,14,17,15,17,15,16,15,15,17,33,17,16,15,15,17,16,15,15,17,15,17,14,17,15,17,15,17,16,15,17,15,16,15,15,16,15,16,16,15,17,15,17,15,17,15,16,15,15,17,15,17,15,17,15,17,15,16,15,15,17,15,17,15,16,15,16,16,16,15,15,17,31,17,16,15,15,17,16,16,16,16,16,16,16,15,15,17,15,17,15,17,15,17,16,16,16,16,16,15,15,17,15,20,16,15,16,16,16,17,16,31,16,16,16,17,16,16,16,22,10,15,16,15,17,25,6,15,16,16,16,16,15,17,15,17,15,17,15,17,16,35,13,18,15,17,15,17,15,15,25,16,15,17,15,15,17,15,15,16,15,17,15,17,15,15,17,15,17,15,15,17,15,16,13,16,16,20,48,14,34,16,13,130,14,13,21,13,22,13,27,11,18,26,17,16,14,17,15,16,14,17,15,16,15,15,17,15,17,15,17,33,16,16,16,15,16,16,15,16,16,15,16,16,25,17,17,15,16,16,15,15,17,15,16,15,15,15,17,15,15,16,16,15,27,25,16,16,15,15,16,16,15,15,31,17,16,16,15,16,16,15,15,17,15,16,16,15,15,17,15,16,15,15,17,15,17,15,15,17,15,15,16,16,15,17,15,15,17,15,15,17,15,15,16,15,16,16,14,17,15,17,16,16,15,17,15,16,16,15,17,30,15,15,16,16,15,17,15,16,16,15,17,15,16,16,16,16,15,17,15,16,15,15,16,15,15,17,15,16,15,58,8,33,6,16,16,16,26,12,12,23,12,17,15,21,13,25,15,17,21,40,11,17,16,16,15,17,15,17,15,26,29,9,15,16,16,17,16,14,17,16,15,17,16,15,16,16,16,15,16,17,16,15,16,15,16,15,16,15,16,16,16,16,16,15,16,15,15,16,17,33,16,15,17,16,15,16,16,16,16,16,15,15,16,17,15,16,15,15,17,15,16,16,15,16,16,15,16,17,15,16,15,15,17,15,17,16,14,17,16,16,16,16,16,15,15,17,15,17,16,15,15,16,16,15,15,16,16,15,15,17,15,17,15,16,17,15,16,15,16,15,16,16,16,15,15,16,16,15,16,15,16,16,15,17,15,17,16,16,16,15,16,16,16,16,16,15,15,17,15,31,16,15,16,15,15,17,15,16,17,15,16,16,16,15,15,17,16,16,16,16,16,16,16,16,16,16,15,17,16,16,16,15,15,17,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,17,15,16,16,15,14,17,16,16,16,15,16,15,26,37,13,21,13,22,15,21,20,17,21,8,14,17,14,17,14,17,16,16,15,16,15,15,16,16,15,16,16,15,16,15,15,16,16,15,16,33,16,15,17,15,15,16,16,16,15,15,15,17,15,17,15,15,16,15,15,15,17,15,15,17,15,16,16,15,16,15,15,15,17,15,15,17,15,17,15,16,16,15,17,15,15,17,15,15,17,15,16,15,15,15,17,15,16,15,15,15,17,15,15,17,15,16,16,15,16,16,15,17,15,16,16,15,16,16,14,17,15,15,16,17,16,15,17,15,15,17,15,17,15,15,17,15,15,17,15,31,16,15,15,15,17,15,15,17,15,16,16,15,16,16,15,17,15,15,17,15,15,17,14,17,15,15,16,16,15,17,15,15,17,15,15,16,15,17,15,15,17,15,15,17,15,17,15,17,15,16,15,15,16,16,15,16,16,15,17,15,15,17,15,15,16,15,17,15,16,15,15,40,13,19,15,34,15,18,11,18,16,18,17,17,16,21,15,15,16,14,17,16,15,15,15,16,16,17,15,33,16,15,15,16,24,16,14,18,14,17,15,16,15,16,15,14,17,15,17,14,26,16,26,32,17,15,16,31,15,15,12,18,19,21,15,17,14,25,15,21,12,18,15,17,15,17,16,21,15,25,15,16,15,15,17,16,16,15,17,16,16,15,16,15,17,16,15,15,16,15,17,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,23,25,16,16,16,23,25,16,16,31,17,15,16,33,16,15,17,16,16,24,25,15,16,16,16,15,16,15,16,23,25,16,16,16,23,25,16,26,16,13,13,17,16,16,16,18,15,17,16,16,15,16,16,16,15,32,15,16,16,15,17,15,16,16,16,18,29,5,16,16,15,16,16,16,15,16,15,16,16,16,15,16,15,15,16,17,15,16,15,16,15,16,19,16,16,15,16,15,16,15,16,16,16,15,16,16,16,15,16,15,16,15,16,34,16,15,16,15,16,15,16,15,16,15,16,16,16,16,16,15,16,15,15,16,15,16,15,16,16,15,17,16,16,15,16,15,16,16,16,16,16,16,16,16,16,20,16,15,16,16,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,16,16,16,16,16,15,16,15,16,16,16,21,15,17,16,16,15,15,17,15,16,15,22,17,19,23,14,20,13,16,16,16,33,16,16,16,16,17,15,17,15,17,16,16,15,20,12,15,16,16,15,17,16,16,15,14,16,15,17,15,17,16,16,15,16,16,15,16,16,15,17,16,17,16,15,17,17,16,16,15,16,16,15,17,16,16,17,16,16,16,16,15,16,15,16,16,15,16,16,15,16,16,15,17,16,16,15,16,19,20,16,39,5,8,13,22,18,23,16,27,17,12,16,17,15,26,17,14,17,16,16,16,35,16,16,17,16,37,15,19,14,17,17,15,15,16,16,15,17,16,20,17,17,17,22,14,24,16,20,16,16,27,12,23,22,20,11,20,16,40,15,5,12,21,11,21,14,20,11,19,35,35,19,19,14,20,26,9,21,18,32,19,19,11,15,19,16,17,15,17,15,17,15,17,16,17,19,15,17,16,16,31,14,22,17,20,13,34,22,11,17,16,16,14,16,16,15,15,16,16,16,17,35,17,15,15,17,16,15,16,16,16,16,15,16,15,17,16,17,15,16,16,15,16,16,16,15,15,17,16,16,15,16,16,15,17,16,16,15,16,16,31,17,15,17,15,17,17,17,16,17,16,16,16,15,16,26,22,12,19,16,17,16,17,14,15,17,16,16,17,16,16,16,16,16,16,16,16,17,15,16,15,17,15,16,16,15,17,15,16,15,17,15,16,15,16,17,16,16,16,16,17,35,16,16,16,16,17,17,16,16,16,15,16,16,15,16,16,15,18,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,17,13,16,16,15,17,16,16,16,15,16,16,15,16,16,16,15,16,16,16,16,16,16,15,16,16,15,16,15,17,17,16,21,17,13,18,15,17,15,17,15,17,15,17,16,16,16,15,17,16,14,17,16,16,15,15,17,16,15,35,16,16,16,15,16,16,15,16,16,16,16,16,15,16,16,15,16,16,16,16,16,15,16,16,15,16,15,16,16,15,16,16,15,16,16,16,16,15,16,20,15,15,17,16,16,16,16,16,16,15,17,15,17,16,16,16,15,15,17,15,17,16,16,15,16,16,16,16,15,15,17,15,17,15,16,15,16,16,15,16,17,15,17,15,16,15,15,16,15,16,15,16,16,15,17,15,17,14,17,31,16,15,16,15,16,16,15,17,16,16,16,15,16,16,15,17,16,16,16,16,15,17,15,16,15,15,17,15,16,16,16,16,15,17,15,17,15,16,15,15,16,17,15,17,16,16,15,17,16,16,15,17,15,17,16,16,16,16,15,17,15,17,15,16,15,15,17,15,17,15,17,15,16,17,15,17,15,17,15,17,16,15,17,15,16,16,16,16,15,17,15,17,16,16,15,17,16,15,33,16,15,16,16,16,15,16,16,16,16,15,17,15,17,15,16,17,15,15,17,16,16,16,15,16,16,16,16,15,16,15,17,15,17,15,17,16,16,15,17,15,17,15,17,15,16,16,16,15,15,17,15,17,15,16,15,15,16,16,16,16,15,17,14,16,15,16,15,15,17,15,16,15,15,17,15,17,15,16,15,15,17,15,17,15,17,14,17,35,14,18,24,18,12,17,15,17,24,5,35,17,15,16,15,16,16,15,16,15,16,16,15,17,16,16,16,15,17,16,15,16,15,15,16,15,16,17,15,16,17,16,16,16,15,16,15,16,15,15,17,16,16,16,15,15,17,16,16,16,15,15,17,45,11,18,15,17,15,17,15,16,15,25,6,15,16,16,16,15,16,16,17,15,15,17,15,16,15,16,17,16,15,15,16,16,16,16,16,16,15,17,15,32,16,16,17,15,15,17,15,33,16,17,15,17,15,16,16,15,17,15,17,15,15,17,15,16,16,15,15,17,15,17,15,15,17,15,17,15,15,16,15,15,17,16,16,16,16,16,16,14,17,15,17,15,16,15,16,15,15,17,15,15,17,16,16,15,17,15,17,15,17,15,17,15,17,15,17,15,17,15,17,15,17,15,17,15,15,17,15,17,15,16,15,15,17,15,17,15,17,15,17,15,16,16,15,17,15,17,15,31,16,15,17,15,17,15,17,15,17,15,17,15,17,15,17,15,16,16,16,15,15,17,15,16,16,15,17,15,17,14,16,15,15,17,16,16,15,17,15,17,15,16,16,16,16,16,15,15,16,15,15,16,27,18,16,16,16,15,16,15,17,16,19,16,16,15,15,17,16,16,15,17,15,17,15,17,15,17,15,17,15,16,15,15,17,15,16,16,16,16,15,16,16,15,15,16,16,16,16,30,16,17,15,17,15,17,15,16,15,15,17,15,16,16,15,17,16,16,15,17,15,16,16,15,16,15,15,17,37,10,15,15,17,15,16,16,16,16,15,17,15,17,15,17,15,17,15,16,15,15,17,15,16,15,15,17,15,16,15,15,16,15,15,16,15,15,16,16,16,16,15,17,15,17,15,16,16,15,17,15,17,15,17,15,16,15,15,16,15,15,16,15,15,17,15,15,17,15,33,26,24,18,38,7,20,12,38,8,22,16,23,12,15,38,22,51,14,17,16,23,13,20,14,18,16,20,17,21,17,20,18,21,17,20,16,19,13,22,12,16,21,11,23,17,21,14,16,16,14,16,15,16,16,16,16,16,17,18,18,18,19,12,18,15,17,16,15,16,15,16,15,16,16,15,17,15,17,16,15,17,16,16,16,16,15,16,15,16,16,17,27,13,17,14,16,15,16,15,17,32,17,14,16,15,16,22,20,17,15,17,15,16,16,15,15,17,16,15,15,16,15,17,16,15,16,15,16,16,15,16,15,16,16,15,16,15,15,17,14,16,15,16,16,16,16,14,17,16,15,16,15,17,15,16,16,16,17,14,16,15,17,14,15,16,15,16,16,15,16,15,16,16,16,15,16,14,17,16,16,15,16,15,17,21,14,19,15,17,15,17,14,16,16,16,15,17,15,16,16,33,16,14,17,16,16,16,16,16,15,16,16,16,15,16,16,16,16,16,16,15,16,16,15,16,16,16,15,16,16,16,14,25,5,16,15,17,16,31,17,14,17,16,16,26,16,23,14,18,15,17,15,16,16,16,16,16,15,16,15,17,15,16,16,16,16,16,15,16,15,16,16,17,16,15,17,16,16,16,15,17,16,16,16,15,16,16,16,16,15,16,16,16,16,15,17,15,25,15,16,33,16,15,17,15,17,16,16,15,15,16,16,15,15,17,15,17,15,38,15,17,15,16,15,17,17,15,25,15,16,16,15,17,15,17,15,16,16,15,17,15,16,15,15,16,15,15,17,15,16,15,14,16,15,15,16,15,15,16,16,15,17,15,15,17,15,16,16,15,15,17,15,15,17,15,17,15,16,15,15,17,15,15,17,15,16,15,15,17,15,16,16,15,15,15,17,15,15,17,15,31,16,15,15,16,16,15,15,15,17,15,15,17,15,15,17,15,15,15,17,15,15,15,17,15,15,15,15,17,16,15,15,15,17,15,16,16,15,15,17,15,15,26,17,16,16,16,16,16,15,16,15,16,15,16,15,25,5,16,16,16,16,16,14,17,15,16,16,16,16,16,16,32,14,19,16,15,15,18,16,15,16,15,16,17,16,24,19,16,16,36,11,22,16,18,16,22,30,35,17,43,17,12,18,14,23,26,17,17,16,16,16,16,26,19,17,23,13,21,14,19,12,20,15,17,16,16,15,16,15,17,16,15,17,15,17,15,16,15,16,16,15,16,32,14,23,16,21,12,25,15,24,19,11,16,25,23,16,15,28,26,15,13,16,16,16,14,17,32,12,34,10,15,16,24,11,24,15,16,16,17,24,23,14,13,18,15,15,16,16,16,16,15,17,24,16,23,16,16,15,33,15,15,16,16,15,15,16,15,15,15,17,15,24,25,14,17,16,16,15,17,16,15,17,15,24,25,15,15,15,17,15,16,23,24,17,15,16,15,15,15,17,15,16,15,15,17,15,15,16,16,15,15,16,16,15,16,16,15,17,15,15,17,15,16,16,15,16,15,15,16,16,15,15,17,15,16,15,15,15,17,15,16,15,17,15,15,24,39,16,15,15,17,15,15,17,15,16,15,15,31,16,15,15,16,15,16,15,15,15,16,15,15,17,15,16,16,15,16,23,25,15,15,16,16,15,23,25,16,16,16,15,16,16,15,16,16,15,17,15,16,17,15,15,16,16,15,16,15,15,16,15,15,15,17,15,16,16,15,16,16,15,16,17,15,17,15,16,16,15,16,15,15,16,15,15,15,17,15,16,15,15,15,16,16,16,15,15,17,15,16,16,15,16,15,15,15,24,24,16,30,16,15,15,17,15,16,15,15,15,17,15,16,15,15,15,17,15,15,17,15,16,15,23,25,15,16,15,15,16,23,25,28,14,14,19,15,17,15,15,17,15,17,16,15,15,17,16,15,16,15,16,16,15,16,17,15,17,16,15,15,17,16,16,15,15,17,16,16,16,15,16,16,15,17,16,15,15,17,16,15,16,15,15,17,15,17,16,16,16,18,13,15,16,17,14,16,16,15,17,34,15,15,16,16,16,16,15,16,16,17,15,16,16,15,16,16,16,15,16,16,16,16,15,16,16,15,16,16,16,15,16,26,5,25,5,16,16,16,15,17,15,16,16,15,16,15,30,25,14,21,21,13,39,7,25,17,28,11,22,15,30,9,44,20,16,16,16,16,16,16,15,16,15,15,17,15,16,17,15,16,17,16,14,16,21,25,15,16,15,15,17,15,39,5,17,16,15,15,17,33,16,15,16,16,15,16,15,15,16,15,39,14,19,26,19,12,15,20,13,17,15,18,14,21,14,19,21,16,16,15,17,22,37,24,11,16,15,19,16,17,43,18,20,19,43,8,17,18,20,16,15,16,38,9,14,16,16,18,15,16,18,15,15,18,15,26,16,16,17,15,17,17,17,15,16,17,15,18,15,16,17,16,16,17,17,15,17,15,18,15,17,15,15,17,16,16,17,17,15,39,17,17,17,15,17,16,18,15,17,17,15,17,17,17,15,17,17,17,15,17,17,15,17,17,17,16,15,16,18,15,17,17,16,16,17,17,15,17,17,15,17,17,15,17,17,15,17,17,17,15,17,17,16,17,15,16,17,15,17,17,24,16,16,16,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,15,17,16,16,16,16,16,16,16,16,15,17,33,16,16,16,16,16,16,16,16,16,16,16,16,16,21,14,18,27,13,11,25,16,28,16,20,16,18,14,17,27,17,17,16,17,16,16,16,16,14,16,16,16,15,17,16,16,14,16,16,16,16,16,16,15,15,17,16,16,16,17,16,15,16,17,15,16,16,16,16,16,15,16,16,16,16,16,18,22,17,17,15,17,15,17,16,16,15,17,15,17,15,16,16,16,16,15,17,16,15,15,32,17,16,17,15,16,16,16,25,25,15,16,15,15,17,16,15,15,17,15,16,15,15,17,16,16,15,17,15,17,15,16,15,16,15,15,15,17,15,16,16,15,16,16,16,16,15,17,16,16,15,17,15,16,15,16,16,15,17,15,17,16,16,15,17,15,17,16,15,16,16,16,16,15,17,15,16,15,15,16,15,17,15,17,15,17,16,15,17,15,16,16,16,16,16,15,15,16,15,15,31,16,15,16,16,16,16,16,16,15,17,16,16,16,16,16,16,15,17,15,16,16,16,16,16,16,16,16,15,17,16,16,16,16,16,16,16,15,15,16,15,15,17,16,16,15,17,16,16,15,16,17,15,21,37,24,4,42,6,14,17,41,22,9,15,20,16,19,15,17,20,32,25,17,15,17,16,15,18,22,21,18,4,16,14,16,17,16,16,16,16,15,16,15,16,16,16,15,16,16,33,16,16,16,15,16,16,16,15,16,16,16,15,15,17,15,16,15,15,17,15,17,16,16,16,16,16,15,15,17,15,15,17,16,15,17,16,16,16,16,16,16,14,17,16,16,15,17,15,17,15,17,15,17,14,17,15,17,15,16,15,15,16,16,15,17,16,16,16,16,15,17,15,17,15,17,16,16,15,16,15,15,17,15,17,15,17,15,17,15,17,15,17,15,16,15,15,16,15,15,31,16,15,16,16,16,15,15,17,15,17,15,17,15,17,15,17,15,17,15,16,15,15,17,15,16,17,15,15,17,16,16,16,16,16,16,16,15,15,17,15,17,15,16,15,15,16,15,16,16,16,15,15,17,14,17,15,17,15,16,15,15,17,15,16,15,15,17,15,17,15,17,15,17,15,16,16,16,16,16,16,15,17,15,17,15,17,15,17,15,16,15,15,17,15,17,15,17,15,17,30,17,17,15,17,16,16,15,17,15,17,15,16,16,16,15,15,17,15,17,15,16,15,15,17,15,17,15,17,15,16,16,16,16,15,17,15,16,16,15,17,16,16,15,17,16,16,15,16,15,15,17,15,17,15,17,15,16,17,15,15,17,16,16,16,16,15,17,15,17,15,15,16,15,16,17,15,17,15,17,15,17,15,16,15,15,17,15,17,16,16,15,17,15,16,15,15,16,15,33,17,15,17,16,16,15,17,15,17,15,17,15,16,15,14,17,15,17,29,14,14,17,15,17,15,26,5,16,15,16,15,17,15,16,15,17,16,16,15,16,17,15,17,16,16,16,15,16,15,17,16,15,16,15,16,15,16,15,16,14,17,15,16,24,24,16,17,16,15,15,17,16,15,16,16,16,15,16,16,16,15,17,16,16,16,16,15,16,16,15,16,16,15,16,15,16,15,15,17,16,33,16,15,16,15,16,15,15,16,17,15,17,16,15,16,15,15,16,16,17,15,16,15,15,16,16,15,16,15,16,15,16,15,16,15,15,16,16,15,21,10,16,16,16,15,15,16,17,15,17,16,15,17,24,24,17,15,15,17,16,15,16,15,16,15,16,16,16,15,15,17,16,15,15,16,16,15,16,15,15,17,15,16,17,16,16,16,15,16,15,14,17,16,15,16,15,15,16,16,15,31,16,15,17,16,15,16,30,30,19,16,10,16,34,15,100,18,13,31,16,13,19,13,51,9,16,11,15,15,17,16,16,16,24,19,18,15,17,15,17,25,20,19,11,19,11,19,17,11,19,16,18,16,18,17,16,17,18,17,16,17,18,16,17,18,17,18,17,17,16,18,16,11,19,16,16,16,18,17,16,18,17,16,16,17,18,16,16,16,17,18,16,16,18,16,16,16,11,19,16,47,18,16,18,26,19,30,17,15,17,15,17,15,17,16,16,17,15,17,15,16,17,15,17,15,17,15,15,17,14,17,17,17,16,17,15,25,26,17,16,17,16,16,17,15,17,15,15,15,17,15,17,15,15,17,15,15,17,15,15,17,15,17,15,17,16,16,17,36,6,17,15,17,15,15,17,16,17,15,15,17,15,16,17,17,15,15,17,15,15,17,15,17,16,16,15,18,16,15,17,36,35,7,15,17,15,15,16,17,15,17,15,16,17,17,16,17,15,15,17,15,15,17,15,15,17,15,15,17,15,17,16,17,25,19,17,15,17,16,39,15,19,21,26,19,19,17,20,23,26,21,17,29,12,16,20,15,11,18,17,16,17,16,16,15,17,16,15,18,16,16,17,16,16,18,16,15,17,16,15,18,16,17,17,17,16,16,17,16,16,18,15,18,16,16,17,16,16,17,17,42,17,16,16,17,17,17,17,16,17,17,16,16,18,16,17,16,16,17,17,16,17,17,16,17,16,16,16,17,16,16,17,17,16,16,18,16,17,17,16,17,16,16,17,16,16,16,18,16,16,18,16,16,17,17,18,16,16,17,16,16,17,16,16,17,16,16,17,16,16,17,17,16,17,17,16,17,17,16,18,16,18,16,17,17,16,17,16,16,17,16,16,17,16,16,16,17,16,16,16,39,17,16,18,17,16,16,17,17,16,43,49,6,17,12,13,29,31,12,29,13,14,25,22,12,9,17,16,27,16,26,15,19,14,18,15,17,16,17,23,15,19,16,18,15,17,15,16,15,17,15,17,17,16,17,15,16,17,17,15,16,17,15,17,15,17,16,17,15,17,15,17,15,17,16,17,15,17,15,17,15,17,15,17,16,17,15,15,17,15,17,15,17,17,15,15,17,15,17,15,39,16,15,17,15,15,17,15,17,15,17,15,17,15,15,17,15,17,15,17,16,17,16,17,16,17,15,17,15,17,15,17,15,15,17,15,16,18,16,17,15,15,17,15,17,15,17,15,17,15,15,17,15,17,15,15,17,15,17,15,15,17,15,17,15,17,15,15,19,18,16,16,16,16,15,16,16,15,16,16,16,15,16,16,15,16,16,16,22,15,17,15,16,16,16,16,15,16,15,16,32,16,16,16,16,17,15,16,16,16,15,16,16,15,16,16,16,16,15,16,16,16,17,15,16,16,16,15,16,16,16,15,15,17,16,15,15,17,16,15,16,16,16,15,16,16,15,16,16,16,15,16,15,17,16,15,15,17,16,16,15,17,23,16,15,15,16,15,15,15,17,15,15,17,15,15,17,15,14,17,15,15,17,15,15,16,17,16,15,16,16,15,15,17,15,16,15,15,15,17,30,16,15,16,16,15,16,16,15,17,15,15,17,15,16,16,17,39,21,18,31,15,17,14,17,15,17,15,17,14,16,14,17,15,17,15,16,15,15,15,17,15,16,15,15,16,16,15,17,15,15,16,15,16,15,15,15,16,16,15,15,16,15,16,16,15,16,16,15,16,15,15,15,17,15,16,15,15,16,15,17,16,15,15,17,15,15,17,15,15,17,15,15,15,17,15,16,16,15,16,33,16,16,15,16,15,15,15,17,15,15,17,15,16,16,15,17,15,15,17,15,15,17,15,15,17,15,15,17,15,15,16,16,15,17,15,15,17,15,15,15,17,15,15,16,17,15,15,15,17,15,15,17,15,15,17,14,16,15,14,17,15,15,17,15,15,15,17,15,15,15,17,15,15,17,15,15,17,15,16,16,15,17,15,15,15,17,15,17,15,16,16,15,15,17,15,15,17,15,15,31,15,17,15,15,17,15,15,17,15,16,16,15,15,17,15,15,17,15,15,16,16,15,16,16,15,16,16,15,16,16,15,15,17,15,15,15,16,15,16,16,16,15,16,16,15,15,17,15,15,17,15,15,17,15,15,17,15,15,17,15,15,17,15,48,27,16,12,17,36,8,13,20,21,27,17,23,13,29,7,14,20,13,16,15,17,16,15,16,22,16,22,18,15,16,14,17,15,16,15,32,23,27,20,15,48,16,37,33,9,22,7,18,17,22,23,9,17,27,28,18,14,17,17,16,16,15,18,16,14,17,119,13,19,15,18,15,16,16,27,17,18,32,18,17,17,18,12,19,26,22,25,15,16,23,12,29,11,42,13,18,16,16,14,23,11,46,18,11,20,18,12,19,15,25,6,16,16,15,15,17,15,17,16,15,16,16,16,15,16,16,15,17,35,15,20,11,24,11,27,57,16,17,25,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,15,15,17,16,15,16,15,16,15,16,16,16,15,16,16,16,15,26,6,16,20,13,17,15,16,16,15,16,16,20,15,17,15,15,17,15,16,15,16,15,15,16,15,15,17,15,16,16,16,16,15,16,16,15,16,16,15,16,16,15,15,16,17,15,15,17,15,15,15,16,17,15,15,16,16,15,15,15,17,15,15,33,16,16,16,15,16,15,15,15,17,15,15,17,15,15,17,15,15,15,17,15,15,16,16,15,15,17,15,15,15,15,17,15,15,16,16,15,16,16,15,16,16,15,15,15,17,15,15,15,16,16,15,15,16,16,16,16,15,15,15,16,16,15,15,15,17,15,15,15,15,17,15,15,15,15,17,15,15,15,15,17,15,15,15,17,15,15,15,16,16,15,15,15,15,17,15,15,15,15,17,30,16,15,15,17,15,15,15,17,15,15,15,15,17,15,15,15,17,15,15,15,17,15,15,15,16,16,15,15,15,17,15,15,16,16,15,15,17,15,15,15,17,15,15,15,16,16,15,15,15,17,15,15,15,17,15,15,15,17,15,15,16,16,15,15,15,17,15,15,16,16,15,15,15,17,15,15,15,15,17,15,15,15,15,17,15,15,15,17,15,15,15,16,16,15,16,16,15,16,16,31,15,16,16,15,16,16,15,15,17,15,15,15,17,15,15,15,17,15,15,15,17,15,16,16,15,15,17,15,16,16,15,16,16,15,15,16,45,11,25,24,14,11,15,16,16,17,33,21,19,15,22,16,23,12,18,15,17,15,17,21,12,18,16,24,15,17,15,21,16,17,15,17,15,16,16,16,15,16,15,16,16,19,15,17,15,15,17,15,16,16,21,14,19,15,17,21,13,21,57,29,24,16,20,25,19,15,17,16,15,15,17,16,16,15,17,17,15,16,16,17,15,15,17,16,18,33,22,15,21,15,20,15,17,15,17,25,15,15,15,16,42,13,18,23,15,16,15,17,16,16,20,15,16,15,15,16,15,16,16,15,26,23,13,17,15,16,15,26,16,15,15,17,15,17,15,16,16,16,15,15,15,17,15,15,16,17,15,15,17,15,17,15,15,15,17,15,16,16,15,34,15,16,15,15,17,15,16,16,16,16,15,17,15,15,17,15,16,16,15,16,14,16,16,15,17,15,15,17,15,15,16,15,15,15,17,15,15,17,15,16,36,14,15,16,17,19,20,19,11,16,15,16,15,17,15,17,15,22,16,15,16,15,17,16,15,15,16,17,15,16,16,16,16,15,16,17,14,16,15,15,16,15,15,17,15,16,17,15,15,15,17,15,15,16,16,15,15,16,36,16,14,17,15,15,16,15,17,15,15,17,14,17,14,17,14,17,15,16,17,15,15,16,15,16,15,15,16,15,15,16,17,14,16,15,15,17,15,16,15,15,16,15,15,15,16,14,16,15,15,16,15,15,17,15,16,17,15,15,17,15,17,15,17,14,17,15,17,15,17,15,16,15,15,17,14,17,15,17,15,16,15,15,15,16,16,15,15,17,15,17,15,16,15,15,17,15,17,15,17,30,16,17,14,17,15,17,15,17,15,16,17,15,15,16,17,15,15,15,16,17,15,15,17,15,16,15,17,15,17,15,15,16,16,15,14,17,15,15,16,17,15,17,15,16,16,16,16,15,17,16,16,15,17,15,17,15,17,16,15,15,16,16,14,17,15,16,15,15,16,15,16,16,15,16,17,16,16,16,15,15,16,15,16,15,15,17,15,17,15,17,15,16,15,15,15,16,17,15,16,31,16,15,16,16,15,17,15,16,15,17,15,16,15,16,15,15,16,16,15,17,16,27,27,22,37,6,11,12,20,25,17,15,24,27,14,20,32,18,28,16,19,24,7,15,16,16,22,9,17,13,16,17,17,15,17,15,17,15,17,16,17,15,16,23,17,17,16,17,16,16,15,22,16,17,15,22,16,18,12,22,20,82,106,14,19,14,20,17,15,17,15,15,16,16,15,16,16,15,16,36,34,14,19,36,10,17,15,35,15,27,7,15,20,20,11,19,15,17,15,17,15,17,15,17,16,23,15,16,15,16,15,21,19,19,12,18,15,17,15,17,15,16,24,15,17,15,17,17,14,17,16,17,15,16,15,15,16,33,13,19,15,17,16,17,16,16,16,16,15,16,21,11,19,15,32,19,16,21,14,16,20,13,38,13,51,6,13,12,22,12,21,20,15,18,14,20,13,19,75,20,24,14,12,22,12,19,17,17,14,17,14,17,15,16,16,16,15,17,15,16,15,16,16,16,16,16,15,16,31,16,19,12,25,14,30,17,13,21,15,17,24,15,16,15,16,16,15,16,16,15,16,15,17,15,16,16,15,16,23,25,16,15,17,15,17,15,16,16,16,16,16,16,23,24,15,16,16,23,25,16,15,16,16,23,24,16,15,16,22,25,15,16,26,25,16,15,15,15,16,33,15,15,16,15,16,17,15,16,15,23,24,16,16,15,16,15,15,17,15,15,17,23,25,15,17,15,15,17,15,16,16,15,34,16,15,16,16,16,16,15,16,16,22,15,23,25,16,16,16,16,15,15,26,6,25,15,16,16,24,25,17,15,16,16,15,17,16,16,15,16,15,15,16,22,23,15,16,22,20,15,22,20,16,15,16,15,15,15,17,15,16,16,15,16,15,15,16,22,20,31,16,16,15,23,20,15,15,16,22,20,15,15,23,15,16,15,17,16,15,16,15,16,16,16,16,15,16,16,16,16,15,16,16,15,16,15,16,15,16,15,16,15,16,16,15,16,15,16,15,16,15,16,15,16,16,15,16,16,16,15,16,16,16,16,21,13,19,15,16,25,20,27,30,26,25,5,16,20,16,29,17,12,16,34,12,38,17,31,12,15,17,26,19,12,18,28,25,14,24,36,15,16,15,17,15,16,15,17,16,18,17,17,15,16,14,16,15,16,20,19,13,17,15,22,20,17,17,18,12,19,15,17,15,17,15,16,16,15,15,17,16,14,16,15,16,16,15,15,17,15,16,15,17,15,16,16,16,16,16,15,16,15,16,16,15,16,16,15,16,15,16,16,15,16,15,16,15,17,16,16,16,15,16,15,16,15,16,16,15,16,16,15,16,15,16,16,15,16,15,34,16,15,16,16,15,16,16,15,16,16,15,16,15,16,15,16,15,16,16,15,16,15,16,16,15,15,16,17,15,17,16,16,15,15,17,16,16,16,16,16,16,16,16,15,17,16,15,16,16,15,16,16,15,16,15,16,15,16,15,16,16,15,15,17,15,16,16,16,16,15,16,15,16,16,16,16,15,16,15,16,16,16,15,16,15,16,15,17,16,16,15,15,17,16,16,16,16,16,16,32,16,18,16,16,32,14,18,15,17,15,15,17,16,16,16,15,16,15,16,15,17,16,15,16,16,16,16,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,17,16,15,16,15,16,15,16,16,16,16,15,16,15,16,14,17,16,15,16,15,16,15,17,16,15,16,15,16,16,15,15,16,16,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,16,16,15,16,15,16,15,34,16,15,16,15,17,16,16,16,15,16,15,16,15,16,16,16,15,16,15,16,16,15,16,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,18,16,16,15,16,17,15,36,14,18,14,18,15,16,16,16,15,16,15,17,15,16,15,16,15,16,15,16,16,16,16,15,19,15,13,16,15,15,16,32,16,15,16,17,15,15,17,15,16,16,14,17,15,16,15,15,16,15,15,16,16,15,16,15,15,16,15,15,17,15,15,17,15,16,16,15,16,15,15,16,16,15,16,16,15,16,16,15,16,16,15,17,15,15,17,15,16,16,15,16,27,6,17,25,29,8,45,12,17,15,32,18,13,29,12,21,12,19,13,20,48,25,14,22,13,28,22,17,15,17,15,16,16,15,23,32,16,10,13,33,20,15,39,13,18,15,27,13,26,15,17,14,17,16,15,15,16,15,16,15,16,17,15,16,15,16,15,16,16,16,16,15,16,16,16,16,15,17,15,17,15,16,15,16,15,28,19,36,9,7,16,21,14,20,16,20,15,19,19,19,18,20,12,18,23,15,17,15,16,16,19,11,18,18,25,13,12,21,15,20,17,12,21,17,23,18,13,19,16,16,15,17,15,16,16,16,16,16,15,33,16,16,15,37,12,20,15,26,19,41,13,19,24,18,15,17,25,18,15,17,16,16,16,16,15,16,15,16,15,16,17,14,16,16,15,16,16,15,17,15,16,16,16,15,16,15,16,15,16,15,17,15,16,16,15,16,15,16,15,16,15,16,15,15,17,16,15,16,15,16,14,16,15,16,15,16,16,16,15,15,16,17,15,17,15,16,16,15,16,15,16,16,16,15,16,16,16,15,16,32,16,15,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,16,16,16,15,17,15,16,15,15,16,15,15,15,17,15,16,15,15,16,16,15,17,15,15,17,15,16,14,16,16,15,16,15,15,15,17,15,16,16,15,15,32,23,14,15,15,17,14,26,15,17,15,17,15,16,15,17,15,15,16,16,14,17,16,16,16,15,15,17,15,17,15,15,16,15,16,15,16,16,15,17,16,33,16,14,17,16,15,15,16,15,16,15,17,16,16,16,16,16,15,15,16,16,15,16,15,16,15,15,17,16,15,15,17,16,15,16,15,17,15,17,16,15,16,16,16,15,15,17,15,17,15,17,16,15,15,17,15,17,16,16,16,15,16,15,17,15,16,15,15,17,15,17,15,17,16,15,16,16,16,15,15,17,16,15,16,16,16,15,15,16,17,15,16,15,16,15,15,16,16,15,15,31,16,16,15,15,17,16,15,15,16,15,15,17,15,17,15,16,16,15,15,17,15,17,16,16,15,17,16,15,17,15,17,15,16,17,15,16,15,15,17,26,38,15,32,12,14,16,16,15,19,24,29,17,29,8,11,16,24,12,18,15,16,16,16,16,22,25,15,24,12,17,16,14,17,16,14,17,16,16,15,25,15,17,15,16,16,15,16,19,16,16,17,31,17,13,15,19,18,18,16,35,17,15,17,15,17,16,15,17,15,17,15,17,15,16,16,16,16,15,15,16,16,15,16,16,16,15,17,15,16,16,16,16,15,17,15,16,15,17,15,16,15,16,15,16,16,15,16,16,15,16,15,17,16,15,16,16,15,16,16,15,15,17,15,16,16,16,16,16,16,15,15,17,15,16,15,16,16,15,16,17,15,17,16,15,16,15,15,17,15,16,17,16,15,17,16,15,17,15,17,31,16,15,17,14,16,16,16,16,16,16,16,16,15,16,16,14,17,16,16,16,16,16,15,16,15,17,15,16,15,17,15,16,16,15,16,15,16,17,16,15,16,15,16,17,16,16,15,16,15,16,16,16,15,15,17,15,16,16,16,15,16,15,17,15,16,15,16,15,15,17,16,16,16,27,17,23,17,18,16,14,17,15,14,17,16,15,16,16,16,16,16,16,16,15,16,16,16,16,16,35,16,16,16,15,16,15,16,15,16,15,16,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,16,16,15,16,16,16,16,16,16,16,15,16,15,16,15,15,17,15,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,15,15,17,15,16,16,15,16,15,16,15,16,15,16,16,16,15,16,16,16,15,31,16,16,16,16,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,16,16,15,15,17,15,16,16,16,15,16,16,16,15,16,16,16,15,15,16,16,16,16,16,16,16,15,16,16,16,15,16,15,16,16,16,15,15,16,16,15,16,15,16,15,16,15,16,16,16,15,16,15,32,13,26,12,16,15,16,29,31,23,13,23,16,19,17,18,18,17,22,15,16,15,20,13,18,15,17,33,16,16,16,23,16,16,16,15,17,34,11,37,6,17,13,17,25,15,16,16,15,16,16,16,16,16,15,17,15,16,16,15,16,16,15,16,16,16,16,15,16,15,16,16,28,10,22,15,19,11,20,19,19,18,23,17,17,16,17,16,16,20,12,17,16,23,11,20,13,20,13,19,13,20,12,21,14,20,18,18,13,18,14,37,6,8,11,17,21,16,39,14,23,18,29,13,19,25,29,21,16,16,21,17,12,19,15,17,17,15,16,18,23,10,38,22,13,20,12,22,17,15,16,16,16,15,16,17,17,12,19,16,19,13,18,15,17,15,17,14,15,27,14,21,14,19,13,19,28,13,18,14,29,16,25,13,18,26,19,13,17,16,16,16,16,16,15,26,13,18,15,17,31,16,17,15,22,17,24,29,51,15,17,27,20,10,21,17,30,15,18,19,17,14,12,23,11,22,73,14,14,17,16,14,16,21,19,14,18,14,17,14,18,13,16,16,16,16,15,17,16,15,16,16,16,16,17,15,16,15,16,16,15,17,16,16,16,17,16,16,16,16,15,16,15,17,15,15,16,16,16,15,16,16,15,16,16,15,16,16,15,16,15,16,16,23,14,18,15,17,15,16,16,17,16,16,15,16,15,16,15,17,15,16,16,15,16,15,17,16,14,17,15,17,15,16,16,15,16,34,16,15,16,15,17,14,15,17,16,15,16,16,16,16,15,16,16,15,16,15,16,15,16,15,16,16,16,16,15,16,16,15,16,16,16,16,15,16,16,15,16,16,15,16,15,16,15,15,17,15,16,16,16,16,15,16,15,16,16,16,16,15,16,16,15,16,16,16,16,16,15,16,16,15,16,16,15,16,15,16,15,17,16,16,16,16,16,16,16,16,16,16,16,15,15,16,16,16,34,17,16,16,16,16,16,15,16,15,16,16,16,16,15,17,16,16,16,16,16,16,16,16,16,15,16,15,16,16,16,16,16,16,16,16,15,16,15,16,16,16,15,16,15,16,16,16,16,16,16,15,16,15,16,15,17,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,15,16,15,16,16,16,16,16,16,16,16,15,16,15,16,16,16,15,17,15,16,16,16,16,15,16,15,32,16,23,18,12,42,14,16,17,16,17,31,15,17,26,13,21,14,40,6,33,6,30,14,17,18,19,12,20,24,51,8,15,18,17,17,15,17,16,15,16,23,17,29,13,26,15,15,14,17,16,16,16,20,26,19,20,23,13,15,17,30,17,15,16,16,15,16,15,15,16,15,16,15,16,16,15,16,15,16,15,15,16,16,16,16,15,16,15,17,44,14,16,18,17,28,15,15,19,68,9,11,23,14,20,12,19,29,9,21,15,20,13,20,16,14,24,11,22,13,22,14,20,13,26,18,24,10,18,16,21,22,16,20,11,35,14,19,17,22,26,18,31,22,18,20,19,11,34,26,39,10,23,7,20,16,19,26,14,20,16,24,14,17,18,19,23,18,13,18,14,17,16,15,17,15,17,22,14,27,13,19,23,15,23,24,11,12,22,11,22,11,20,15,26,12,33,17,17,42,26,16,22,23,20,14,36,13,18,17,17,21,30,17,36,16,31,16,22,14,27,10,18,19,20,11,39,25,19,12,17,16,15,17,15,16,17,19,12,18,20,34,19,18,15,20,12,22,13,17,15,16,18,17,26,13,17,16,26,16,17,15,19,16,21,18,12,17,18,35,11,18,18,18,19,18,15,16,23,20,21,12,22,14,22,17,26,11,22,22,16,16,16,15,16,16,16,17,16,28,45,18,25,29,11,21,18,22,18,26,14,18,15,17,15,27,16,17,26,26,19,17,14,26,14,18,18,22,19,28,16,13,22,10,18,19,22,18,18,14,20,11,17,19,20,19,21,17,14,17,19,20,12,20,19,22,12,19,13,22,22,18,18,16,20,18,18,23,19,12,16,14,16,18,19,15,26,37,4,15,12,17,16,15,16,25,14,31,10,17,20,14,22,16,15,17,17,15,26,39,19,29,13,20,11,20,19,15,20,17,19,12,20,11,25,11,20,10,18,15,16,16,16,16,20,11,22,14,22,18,16,11,19,16,31,9,15,17,15,16,19,13,18,18,18,15,19,16,17,18,18,23,23,15,22,16,16,20,19,20,12,18,14,16,16,16,16,16,16,15,19,11,22,17,19,15,18,28,14,19,19,19,17,21,15,24,14,25,12,21,13,21,13,23,14,18,18,18,14,19,38,17,16,15,18,15,17,16,15,16,16,15,16,16,23,16,21,16,18,15,16,16,16,16,18,24,18,15,21,18,25,19,22,17,23,14,21,12,17,19,24,15,19,18,15,19,16,18,16,17,15,16,15,17,20,13,19,17,17,15,20,16,19,16,19,16,17,20,24,13,19,18,13,22,15,27,14,42,8,14,13,22,48,15,25,14,29,11,108,13,36,16,22,14,19,12,19,14,22,73,23,14,20,13,22,25,21,15,16,49,21,15,16,21,14,27,13,16,16,17,16,19,15,17,16,17,16,16,16,16,17,15,17,15,17,16,16,17,31,10,15,21,13,31,14,20,17,17,16,16,16,28,14,20,24,10,22,24,15,23,17,24,14,14,18,27,11,18,14,18,14,22,16,25,15,16,15,20,15,21,18,20,12,27,10,26,17,17,15,17,16,16,15,16,18,11,19,14,18,38,19,16,17,15,18,15,16,16,16,18,18,15,19,17,18,15,19,11,18,18,17,19,14,20,17,21,15,25,22,18,21,13,23,14,18,13,16,16,18,17,17,18,11,18,15,16,15,17,16,15,16,16,16,16,16,18,19,20,17,16,16,15,18,14,19,12,17,18,16,21,11,16,23,13,22,17,19,14,27,13,18,18,21,15,19,18,19,17,16,15,16,16,16,16,15,16,17,15,19,42,19,17,19,25,20,17,20,14,19,15,22,14,24,15,19,19,13,20,16,17,16,15,17,16,18,17,17,15,17,16,16,15,20,17,19,21,20,12,24,12,20,16,20,16,19,16,17,16,16,16,17,16,16,17,17,17,19,18,21,11,21,16,19,11,21,13,19,11,23,12,19,12,29,6,19,18,19,18,14,17,18,13,17,16,14,27,18,15,27,21,14,17,21,23,24,14,19,15,14,17,34,19,11,18,15,17,15,17,16,16,15,16,16,15,16,16,18,15,16,16,15,15,17,15,16,16,18,14,16,17,21,19,32,5,17,16,15,16,17,14,16,16,16,16,16,16,15,16,15,16,16,15,16,16,16,17,15,16,16,16,16,20,12,16,16,15,16,16,15,16,16,15,16,16,15,17,16,17,16,17,15,16,16,16,16,16,16,15,16,15,17,15,16,16,16,15,16,16,17,15,34,15,16,16,15,16,16,16,16,16,16,15,17,16,16,15,16,17,27,12,18,18,20,18,26,12,22,13,22,19,13,19,15,18,17,18,16,16,17,15,17,16,15,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,16,16,16,16,15,16,16,15,16,15,16,15,16,16,16,16,16,15,16,15,16,15,16,16,15,16,15,16,15,15,17,16,15,16,15,16,16,15,16,16,15,16,33,16,15,16,15,16,15,17,15,16,16,15,16,16,14,16,15,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,15,15,17,15,16,15,16,16,15,16,16,17,15,16,16,15,16,15,16,16,15,16,15,16,15,15,17,15,16,16,15,16,15,16,16,15,16,16,15,16,16,16,16,15,16,15,16,16,15,16,16,16,16,15,16,16,15,16,16,15,16,15,16,16,15,16,32,16,15,16,16,15,15,17,15,16,15,16,16,15,16,16,16,15,16,15,16,16,16,16,16,15,15,17,15,16,14,18,15,15,16,15,15,17,15,16,16,15,16,15,16,17,14,16,14,16,16,16,16,16,15,16,19,12,17,15,17,15,16,18,16,16,16,16,18,16,20,13,22,14,20,13,20,16,16,16,16,16,15,25,6,15,14,15,16,15,16,17,15,15,15,14,16,17,15,33,39,24,17,13,30,16,19,11,18,15,23,15,22,15,30,18,14,12,24,12,28,23,45,17,20,14,26,35,16,14,28,27,22,16,22,15,25,12,18,13,18,13,31,12,13,21,14,22,23,17,26,41,20,17,17,15,18,11,17,16,15,21,27,17,15,17,15,16,16,15,16,25,13,18,15,17,16,15,14,16,15,34,13,18,18,23,16,32,19,13,11,15,16,16,19,15,16,16,16,15,35,16,16,16,16,15,16,16,16,16,17,15,15,16,15,16,16,16,15,15,17,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,16,16,15,16,16,16,16,16,15,16,16,16,15,16,16,16,16,16,15,16,15,16,16,16,16,16,15,16,15,16,15,16,16,16,15,16,15,15,16,16,15,15,16,17,16,15,16,15,15,17,16,15,16,16,37,11,37,40,19,15,17,15,16,15,17,15,16,15,17,16,15,19,25,17,15,16,14,16,15,15,16,15,15,23,23,25,16,15,15,17,15,16,15,16,16,16,16,15,17,15,16,15,15,16,16,16,15,15,15,16,17,15,16,15,15,16,16,15,38,15,12,18,16,16,14,18,16,15,16,15,16,16,41,13,22,17,26,14,20,21,13,24,17,21,19,11,20,11,18,14,17,16,15,17,15,16,16,15,35,14,15,17,15,15,17,15,17,15,16,16,15,16,16,17,28,19,18,13,23,14,27,27,22,20,19,24,16,15,17,15,15,17,15,16,17,16,15,16,16,16,16,15,17,16,16,15,16,15,16,15,16,15,16,15,15,17,15,16,15,17,16,15,15,17,15,16,15,16,15,16,16,16,15,16,16,15,17,15,16,15,16,15,16,15,16,15,15,17,16,15,16,15,16,16,16,15,16,15,33,15,16,16,16,15,16,16,15,16,15,16,15,16,15,16,15,16,16,16,16,16,15,16,16,16,15,16,15,16,15,16,16,16,15,16,15,16,26,20,22,32,22,6,17,16,15,17,16,16,17,15,16,16,15,17,15,16,16,15,17,16,16,16,16,15,16,17,15,17,12,18,15,17,16,16,17,16,18,17,16,16,16,16,15,17,16,16,17,16,14,17,15,17,16,16,16,16,16,16,35,17,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,15,16,16,16,16,16,16,44,8,13,19,39,15,13,15,15,16,39,44,7,7,23,30,5,11,20,18,13,19,23,13,18,15,34,10,15,26,15,28,13,19,15,17,14,17,16,15,16,21,16,16,15,16,16,16,14,35,12,17,19,22,13,18,24,13,26,14,17,16,15,17,16,15,15,16,35,17,16,15,15,16,15,16,17,16,15,15,16,17,16,15,16,15,15,17,16,16,16,16,16,15,16,15,16,15,15,16,17,16,16,16,15,16,15,16,14,16,15,16,15,17,16,15,16,16,16,15,16,15,16,15,15,17,16,15,15,17,15,15,17,16,16,16,15,16,15,16,17,16,16,16,15,15,17,16,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,16,15,17,15,31,16,16,15,15,17,16,16,16,15,16,16,14,17,15,17,16,15,16,15,16,15,16,15,16,14,17,16,15,16,15,15,16,16,15,16,15,16,15,16,15,16,15,15,17,15,16,15,16,15,16,15,16,16,16,15,16,15,15,16,16,15,17,16,15,16,15,15,16,17,16,15,15,17,15,16,15,16,15,15,17,16,15,17,16,15,16,15,16,15,16,16,16,15,16,15,16,15,16,33,17,15,17,15,16,17,15,16,16,17,16,15,15,17,16,15,16,16,15,16,15,16,15,17,16,15,16,15,16,16,16,15,16,16,16,15,16,15,16,15,16,15,15,16,16,15,16,15,16,15,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,19,24,16,15,16,16,15,16,24,25,15,16,17,15,17,16,16,16,15,16,15,16,16,16,15,16,16,15,17,30,16,14,17,16,16,15,16,17,16,15,16,15,17,16,15,15,17,16,15,16,15,16,16,16,15,16,15,16,16,15,17,16,16,16,16,16,15,15,17,16,15,15,17,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,17,16,16,15,16,16,17,15,16,15,15,17,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,15,15,17,15,17,15,15,16,17,15,16,15,16,30,16,14,17,16,15,15,17,16,15,15,17,16,15,15,17,16,15,15,17,16,15,16,19,27,13,28,18,13,12,22,14,20,23,24,22,13,26,11,18,24,6,23,14,16,18,16,16,23,10,15,31,25,12,18,15,17,15,17,16,24,17,15,17,16,34,11,19,16,16,17,24,16,22,16,14,16,15,16,15,16,16,15,17,16,16,15,15,17,16,15,16,15,16,15,16,16,16,16,16,33,16,15,16,16,16,15,15,16,16,15,16,15,16,15,16,16,15,15,16,15,16,15,16,15,16,14,17,16,15,16,15,16,16,16,15,16,15,16,16,16,15,14,17,16,15,16,15,15,17,16,16,16,15,16,15,16,16,16,16,16,16,16,16,16,16,15,16,15,15,16,16,15,16,15,16,15,16,16,16,15,17,16,15,24,25,16,16,15,15,15,15,16,15,17,16,15,15,17,16,31,16,15,16,15,16,15,16,15,16,15,16,16,15,16,16,14,16,16,16,16,15,37,25,29,24,19,14,10,17,15,17,15,16,15,16,15,12,16,15,16,15,15,16,15,16,15,16,15,15,16,15,16,27,6,16,16,20,15,16,15,16,15,16,16,15,17,15,16,16,16,16,16,16,16,16,15,16,15,16,15,16,16,16,15,16,16,16,16,16,15,16,16,16,16,16,16,16,16,15,34,16,16,16,60,5,19,13,23,15,24,16,39,11,23,13,22,14,25,14,32,23,18,14,23,12,23,12,20,18,17,11,18,15,16,16,15,16,16,16,17,22,15,20,17,24,16,19,14,21,13,26,21,19,18,28,19,23,19,15,16,16,15,17,15,15,16,16,15,31,19,17,16,17,15,17,15,17,15,17,16,16,16,15,16,16,15,17,16,15,16,25,15,15,16,15,17,15,16,16,34,39,5,16,20,32,16,5,16,16,16,15,15,17,16,16,22,15,17,16,15,16,16,16,15,16,17,15,16,15,17,16,16,16,14,16,14,17,16,15,16,15,16,15,17,16,15,16,15,16,15,16,15,16,15,16,16,16,15,36,5,16,15,16,15,15,17,15,16,15,15,16,17,16,15,16,15,15,16,16,15,16,14,16,15,16,15,16,16,16,15,15,23,23,14,17,16,16,23,24,76,13,19,14,21,15,20,12,21,17,49,8,10,14,10,20,13,31,20,12,38,13,27,16,26,9,36,10,14,20,23,18,16,15,15,16,16,16,15,15,16,17,16,16,16,16,16,16,15,20,13,24,18,16,17,17,18,23,19,13,14,15,18,17,16,16,15,16,15,16,15,17,16,15,16,16,16,15,22,13,17,15,17,14,17,16,24,17,17,16,15,32,13,19,15,17,15,17,16,15,33,17,15,16,15,17,15,16,16,14,16,15,16,15,16,15,16,15,16,15,16,16,14,15,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,16,16,16,16,16,30,19,6,19,16,16,16,15,17,16,16,16,15,16,16,16,15,15,17,16,16,16,16,16,16,16,14,16,16,15,17,16,14,16,16,15,16,35,16,16,15,26,5,16,16,15,26,15,57,13,19,16,16,16,16,21,15,17,16,25,20,13,17,15,17,16,14,16,17,15,16,16,16,16,16,17,15,15,16,15,17,16,17,15,16,16,15,16,16,15,16,16,16,16,17,15,16,16,16,16,16,15,16,16,15,16,15,16,16,16,16,16,15,16,16,15,16,16,15,16,16,15,16,16,16,16,16,16,16,15,16,15,16,16,15,16,16,34,16,16,16,15,16,32,30,14,17,15,21,13,24,17,18,22,16,19,13,15,17,16,16,16,16,16,15,17,15,16,16,15,16,16,16,15,16,16,16,16,16,16,17,15,16,15,16,15,17,15,16,16,15,16,16,15,16,16,15,16,16,15,16,16,16,15,16,16,16,16,16,15,16,16,16,15,16,16,17,14,16,16,15,16,15,16,16,15,17,16,15,16,16,15,16,16,16,15,37,17,15,17,16,14,15,17,16,16,15,16,15,16,16,15,16,16,16,15,16,15,14,17,16,16,15,16,16,16,17,15,16,16,16,15,16,16,15,16,16,15,16,16,15,16,16,17,15,16,16,14,16,15,16,16,15,16,15,17,16,15,16,15,16,16,16,15,15,16,15,16,16,16,16,15,16,15,16,49,8,5,21,22,11,11,21,14,18,15,25,27,8,14,19,10,20,13,25,14,20,63,18,12,21,16,35,14,24,14,23,25,16,16,17,16,15,16,16,15,20,16,17,15,17,16,15,16,20,14,24,13,22,14,43,14,13,22,14,14,16,16,16,16,16,15,16,16,15,16,17,15,16,16,15,15,16,15,16,16,16,15,16,15,16,16,15,16,15,16,16,16,16,16,15,16,14,16,16,15,16,15,17,15,16,15,16,16,15,16,14,17,16,15,16,15,16,16,15,16,16,35,16,16,15,16,15,16,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,16,17,15,37,11,21,17,15,23,15,22,37,6,11,13,18,22,25,12,22,13,26,13,18,28,18,13,26,6,16,15,16,15,16,16,15,16,15,15,16,15,16,16,15,16,15,15,16,15,16,16,15,16,15,16,15,16,15,15,16,15,15,17,16,16,33,16,15,15,17,15,16,15,14,17,15,16,15,15,17,14,16,15,15,17,15,17,15,16,15,16,16,16,16,16,16,20,25,5,16,15,16,15,15,16,15,16,15,15,16,23,15,16,15,16,15,16,15,17,15,16,15,16,16,15,16,15,15,16,16,15,16,16,16,16,15,16,16,15,16,15,16,16,15,16,16,15,16,15,16,16,15,16,15,16,16,15,16,15,16,16,16,16,15,16,32,16,15,16,17,21,14,18,31,25,13,20,13,22,16,21,25,22,18,25,17,16,15,15,16,16,16,16,16,17,16,15,20,15,21,15,20,12,45,14,19,19,25,14,23,16,22,16,20,13,20,17,34,13,20,18,41,14,36,16,17,17,34,6,10,12,20,15,20,15,36,14,19,17,18,16,15,21,13,43,16,22,12,20,17,17,15,17,16,15,16,15,16,15,17,16,16,17,15,39,17,16,16,16,16,35,13,22,16,21,13,32,15,42,13,20,21,18,15,16,15,17,15,15,16,15,15,17,15,16,15,15,15,17,16,16,15,15,17,15,16,16,15,66,18,54,6,11,11,17,15,17,30,27,27,33,7,12,15,34,13,19,15,15,16,15,27,18,16,23,17,17,15,16,16,16,16,14,16,16,16,16,17,16,16,15,16,15,16,16,33,12,34,14,27,20,20,13,30,11,37,18,14,17,16,15,17,16,16,15,16,14,17,16,15,15,17,16,16,17,15,16,16,15,16,16,16,17,14,16,16,16,15,17,15,16,16,16,15,16,16,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,15,16,16,16,16,14,16,16,16,16,16,15,16,16,16,15,16,16,15,17,17,15,16,16,16,16,16,15,16,16,16,15,16,16,15,16,16,15,16,16,15,16,17,15,32,16,17,15,16,15,16,16,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,15,16,16,16,16,16,15,16,16,15,16,16,16,16,15,16,16,16,17,15,16,16,15,16,16,16,16,16,15,16,16,16,15,16,16,16,16,17,15,17,15,16,16,16,16,15,16,16,15,16,16,15,16,16,16,16,15,16,16,20,19,24,14,22,13,12,24,11,22,11,19,16,16,14,42,24,29,37,13,15,15,14,16,16,15,16,15,17,15,16,16,16,15,16,15,15,15,17,15,16,16,15,16,16,16,16,16,15,16,16,16,15,16,15,16,16,15,16,16,15,15,16,15,15,15,16,16,15,16,16,16,15,16,15,16,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,16,15,16,16,15,16,15,16,16,16,16,16,16,16,16,15,16,15,16,15,32,16,16,15,16,15,16,16,15,16,15,16,15,16,16,15,16,15,16,16,16,16,15,16,15,16,16,16,16,16,15,16,16,16,15,16,16,15,16,15,15,17,15,16,16,16,16,17,15,15,15,16,16,16,16,15,34,13,33,9,14,19,15,10,17,15,16,15,17,16,15,16,15,16,16,15,16,16,16,15,16,15,16,16,16,16,15,15,17,16,14,16,15,15,16,15,15,16,16,37,16,16,15,16,15,17,16,15,15,17,15,16,15,16,16,15,16,15,16,16,15,16,16,16,15,15,30,29,5,39,9,17,16,15,23,18,37,14,19,33,6,31,13,18,15,15,16,15,19,29,12,15,20,16,19,15,18,21,36,16,9,23,14,24,11,19,19,17,25,16,30,22,13,30,14,19,25,20,22,14,24,14,20,20,17,11,22,14,16,14,22,13,17,15,15,17,15,16,16,38,17,16,15,16,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,16,16,15,16,16,16,16,16,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,25,5,16,15,15,15,17,15,15,17,15,15,16,16,15,15,17,15,17,15,15,16,15,15,16,15,15,16,16,15,15,30,16,15,16,15,15,17,15,16,16,15,16,16,15,16,15,15,16,16,15,15,16,15,15,16,15,16,16,15,16,15,16,15,15,15,17,15,15,17,15,16,16,15,15,16,16,15,16,16,15,16,15,16,16,16,16,15,16,15,15,16,15,15,16,16,15,16,16,15,16,16,15,16,15,15,16,15,15,16,15,16,15,16,15,15,17,15,16,16,15,16,16,16,15,15,16,15,15,17,16,30,16,16,15,16,16,16,15,15,17,16,16,16,16,16,15,16,15,16,15,16,16,16,16,20,16,24,16,20,15,17,16,15,16,16,23,22,14,18,15,17,16,18,15,16,15,17,14,17,16,15,16,15,16,16,16,16,16,15,16,15,16,15,15,16,16,14,17,16,15,16,15,16,15,16,16,15,16,16,16,15,15,17,15,15,17,15,15,17,16,15,16,15,15,16,16,14,16,20,62,18,17,12,21,16,34,13,23,12,12,22,17,29,13,22,16,17,15,16,15,17,16,15,16,16,16,15,16,16,15,16,15,16,32,13,23,17,25,15,20,15,39,12,14,17,15,25,15,16,15,16,15,15,17,15,16,15,16,15,16,15,16,15,15,16,17,15,15,17,15,16,15,16,16,16,15,17,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,15,17,15,16,15,33,17,16,16,15,16,15,64,11,23,26,10,16,15,16,37,17,52,15,22,17,13,17,15,18,14,17,15,21,13,27,8,15,20,16,17,15,17,17,17,15,17,16,16,15,17,16,16,16,16,16,17,24,30,20,19,14,19,15,24,14,19,16,16,16,15,16,15,17,15,16,15,15,17,16,14,15,15,16,16,15,16,15,15,16,16,15,16,15,16,16,16,15,16,15,16,15,16,16,16,33,16,15,16,15,16,15,16,16,16,15,16,15,15,16,15,16,15,16,15,15,16,15,15,16,23,25,15,16,15,16,14,15,16,15,16,15,16,15,23,25,15,15,17,16,15,16,15,16,16,24,25,15,16,16,15,16,16,15,16,15,15,23,25,15,16,15,16,16,16,15,15,17,23,25,15,16,23,24,16,15,16,22,25,15,16,15,16,15,23,25,15,15,16,22,51,29,11,24,10,55,17,26,6,16,15,17,16,16,17,16,259,16,14,17,16,16,16,20,19,13,18,31,22,22,17,22,17,30,15,38,11,40,13,32,20,11,19,14,17,15,17,17,15,14,24,14,24,17,19,12,21,13,19,11,18,15,16,14,17,16,15,16,16,16,16,15,16,16,15,16,16,16,16,15,31,15,19,14,22,14,28,15,20,9,14,15,16,16,15,16,16,15,16,16,15,16,16,15,40,17,15,17,16,15,16,16,16,16,16,15,16,16,15,16,16,15,16,15,16,16,15,16,16,15,16,16,15,16,15,17,14,16,15,16,16,15,16,16,15,16,16,15,16,15,15,17,16,15,16,15,16,16,15,16,15,17,15,14,17,16,15,16,15,17,16,16,16,15,15,17,15,16,16,15,16,16,15,17,15,17,15,16,15,16,16,15,15,16,15,16,16,15,16,15,16,16,15,16,16,31,16,16,16,16,14,16,16,16,16,16,16,15,17,16,16,16,16,15,16,16,15,15,16,15,16,15,16,16,15,16,16,15,16,15,16,16,15,16,16,15,15,17,16,24,13,18,14,22,13,22,15,21,12,34,14,18,28,21,19,39,26,9,10,18,13,17,15,16,12,25,32,31,45,34,6,14,12,18,12,17,17,15,29,17,24,23,17,16,22,15,25,12,21,29,18,15,16,15,17,35,17,14,16,15,16,34,15,21,12,18,12,17,15,15,15,24,15,16,16,16,16,15,15,17,15,17,16,16,16,15,15,17,15,16,16,16,15,17,15,16,15,15,17,16,15,16,15,16,16,15,16,16,16,15,16,15,17,16,16,15,15,17,16,16,15,16,16,15,16,15,16,15,16,15,16,16,15,16,15,16,15,16,15,16,15,16,16,15,15,16,16,15,15,15,17,16,16,16,16,34,16,15,17,15,16,16,15,16,16,15,16,18,27,14,18,21,24,18,15,17,15,17,15,16,16,16,15,17,15,16,16,15,16,16,16,15,15,17,16,16,15,16,16,16,16,16,16,15,37,15,41,15,41,16,44,16,46,16,45,17,42,19,13,17,14,25,19,19,12,16,14,16,16,15,17,15,35,14,18,15,17,15,17,15,15,17,16,16,16,16,15,16,16,14,16,15,17,19,15,35,16,16,20,14,18,15,17,15,16,16,15,17,14,16,16,16,15,16,16,17,15,18,17,15,16,16,16,16,15,16,15,16,15,16,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,15,16,15,16,16,16,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,15,18,17,16,15,17,16,16,16,16,16,15,16,16,16,16,15,16,16,15,15,16,34,16,15,16,15,16,16,15,16,17,16,16,15,16,16,15,15,16,16,15,16,15,16,15,16,15,16,15,16,16,15,16,16,21,13,17,14,16,15,17,15,16,15,17,14,16,15,16,16,15,28,21,32,4,18,15,21,23,16,26,16,38,10,11,14,21,13,19,10,20,13,24,13,19,13,19,14,36,14,19,15,16,16,16,63,38,25,30,20,12,18,16,25,14,17,15,25,18,17,15,34,16,16,16,15,16,15,17,15,16,15,16,16,16,15,22,15,17,15,17,15,37,13,36,10,19,15,16,16,15,19,28,21,24,14,27,10,21,16,15,15,18,14,15,16,26,7,22,9,16,21,13,19,14,16,16,15,17,16,16,14,15,21,24,17,15,17,15,16,18,29,17,18,25,19,28,10,14,16,14,15,17,15,17,16,16,15,16,15,16,16,15,40,11,14,16,15,17,16,16,33,15,16,16,16,17,16,16,16,15,17,15,17,16,15,17,16,16,16,15,15,16,17,16,17,16,28,26,17,17,39,11,37,4,16,12,18,14,16,15,17,15,16,16,16,15,17,15,16,15,16,15,17,16,16,16,16,16,16,16,16,16,14,16,15,16,16,16,16,16,16,16,15,15,16,15,16,16,16,17,16,15,16,16,15,16,16,16,16,15,17,15,17,15,17,15,16,16,15,37,17,16,16,16,15,16,16,16,15,16,16,15,16,16,15,17,17,15,16,16,15,16,16,16,16,16,16,15,18,15,16,16,17,15,16,16,15,15,17,16,16,17,15,16,16,17,17,17,15,16,16,16,14,16,15,16,16,16,16,15,16,16,15,16,16,16,17,15,16,16,15,16,16,16,15,16,16,15,16,16,15,17,16,16,16,15,16,16,16,15,16,16,16,17,15,16,16,15,16,16,31,16,16,16,16,15,16,16,15,16,16,15,16,16,15,16,15,17,15,15,17,16,16,16,16,16,15,16,16,16,16,16,16,15,15,14,16,15,17,16,15,17,15,18,16,15,17,16,15,16,16,16,16,15,16,16,15,16,15,17,15,17,16,16,16,16,15,16,16,16,17,15,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,15,16,16,16,16,32,16,15,17,16,16,14,16,15,18,15,16,16,16,16,16,16,17,15,16,16,16,16,16,16,15,16,18,17,17,15,16,16,16,17,16,16,16,16,17,17,15,16,15,17,15,16,16,16,16,17,15,15,17,16,16,16,16,16,15,16,16,16,15,16,16,16,15,16,16,15,16,16,16,16,16,16,16,16,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,31,16,16,15,17,16,16,24,27,13,24,13,18,15,16,15,25,22,47,15,31,19,19,16,12,18,15,23,18,13,23,15,13,19,15,17,16,16,15,16,23,17,17,17,17,17,21,15,35,13,18,15,23,15,17,14,16,16,15,17,15,16,16,16,16,15,15,17,16,16,17,14,16,15,16,16,16,16,16,15,16,16,16,16,16,17,15,15,17,16,16,15,16,16,16,16,17,15,16,16,34,16,16,16,14,16,16,15,16,16,16,15,16,16,16,16,17,15,16,16,15,16,16,16,15,16,16,15,16,16,17,15,16,16,15,16,16,16,15,16,16,16,15,15,16,16,15,17,15,16,16,16,15,16,16,16,16,15,16,16,15,16,16,16,16,15,16,16,17,17,17,15,16,15,17,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,17,15,16,16,16,14,15,17,16,31,16,16,16,15,16,15,17,16,16,16,15,16,16,16,16,15,16,16,15,16,16,16,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,15,17,16,16,16,17,14,16,16,16,17,15,16,15,17,17,15,16,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,15,16,16,16,17,17,16,16,16,16,16,17,14,16,16,15,16,16,16,15,15,17,16,16,15,16,16,16,15,32,17,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,16,17,15,16,16,17,16,16,16,16,15,16,16,16,15,13,16,15,16,16,16,16,15,16,16,17,15,16,16,15,15,16,16,15,16,16,16,16,17,15,16,16,16,15,16,16,16,16,15,15,16,16,17,15,16,16,16,15,16,16,16,15,15,16,16,16,15,16,31,22,14,60,15,16,17,13,25,15,34,5,20,13,25,15,29,13,23,16,21,13,24,40,13,18,15,17,15,24,15,18,29,19,17,21,19,20,18,17,19,15,20,35,33,30,7,13,13,21,13,26,15,21,18,31,15,13,17,15,23,17,22,16,17,13,29,14,33,24,31,15,22,15,17,16,15,16,16,15,16,17,15,15,16,16,16,16,16,15,16,16,16,16,15,16,15,16,15,16,35,17,15,15,17,15,16,16,15,16,16,16,15,16,15,16,15,16,15,16,15,17,16,15,16,16,16,16,15,16,16,15,15,16,15,16,16,16,16,15,16,15,16,15,16,16,15,16,15,16,15,16,16,16,16,15,16,15,16,16,16,16,16,15,40,12,14,17,33,12,20,15,16,27,17,17,16,17,15,14,26,17,14,17,15,17,15,16,17,15,15,16,15,14,23,11,18,16,16,16,36,17,16,14,17,16,15,19,17,18,36,13,40,14,22,17,19,18,18,34,6,11,12,21,14,22,15,15,16,16,16,16,17,16,18,19,14,36,26,22,7,12,27,11,18,15,15,15,16,15,17,16,16,16,17,14,16,16,15,15,17,16,16,17,25,31,21,15,22,15,12,23,12,24,19,18,14,17,15,15,16,16,16,15,17,16,15,16,15,16,15,16,15,16,15,15,17,15,16,16,34,16,15,16,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,17,16,15,16,15,16,16,14,15,16,15,16,15,16,16,16,16,15,16,15,16,16,16,16,15,16,15,16,15,16,16,16,16,15,17,15,16,15,16,15,16,15,16,16,15,16,15,16,15,16,15,16,16,16,16,15,16,15,16,16,16,16,15,16,16,16,16,15,16,15,16,16,15,16,16,16,31,16,16,15,16,15,16,16,15,16,15,15,17,15,17,16,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,15,15,16,16,16,16,16,16,16,15,16,16,15,16,15,16,15,16,15,16,15,17,16,16,16,16,15,15,17,15,16,16,16,16,15,16,15,16,15,37,14,19,14,18,16,15,16,16,15,16,16,16,16,16,16,15,16,15,15,17,15,16,34,16,16,16,15,16,15,15,15,17,15,16,15,16,16,14,15,15,15,16,15,16,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,15,16,16,15,16,15,16,15,16,15,16,15,16,16,16,16,15,16,32,23,32,24,11,11,17,15,17,18,36,12,19,14,20,11,20,12,16,35,13,18,15,17,15,27,6,16,26,36,16,16,15,16,15,16,15,17,16,16,16,16,27,13,19,15,17,15,17,16,21,21,12,32,14,19,15,17,21,26,16,16,16,15,21,13,18,14,17,16,16,16,16,16,16,16,17,15,16,16,16,15,14,17,16,15,17,15,16,16,16,15,16,16,16,16,16,15,16,16,15,16,15,16,15,17,16,15,17,16,15,16,15,17,16,15,16,15,16,16,15,16,15,17,16,16,16,16,15,16,33,16,15,17,15,16,15,16,16,15,15,16,15,16,15,17,16,15,15,17,15,16,15,16,15,16,16,16,16,15,15,17,15,16,15,16,15,16,16,16,16,15,16,15,16,16,16,16,15,16,15,16,16,16,16,16,15,16,15,17,16,15,15,17,15,16,15,17,16,15,16,15,16,16,15,16,15,16,15,16,15,17,16,15,16,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,32,16,15,16,15,16,15,15,17,15,16,15,17,15,17,16,16,15,16,15,16,15,16,16,16,16,15,16,15,16,16,16,15,16,15,16,15,16,15,17,16,15,16,15,17,16,16,15,16,15,16,15,17,16,15,25,15,16,15,15,16,16,14,17,15,16,16,15,25,45,7,28,4,21,14,15,15,16,15,16,15,15,17,15,16,16,16,15,16,16,15,15,17,15,16,16,16,16,16,15,33,16,15,15,17,16,16,15,16,17,15,15,17,15,15,29,16,14,19,16,16,15,16,15,26,16,16,16,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,15,15,16,15,16,17,16,15,16,15,15,16,17,16,16,16,15,16,15,15,16,16,15,16,15,16,16,16,13,16,16,15,16,15,15,17,16,16,16,16,16,15,15,17,15,17,16,16,15,17,20,16,24,16,15,16,15,33,17,17,16,16,16,16,16,16,15,17,15,17,15,17,15,17,15,17,15,17,15,17,15,16,15,16,15,16,16,16,16,16,15,15,17,15,16,16,16,16,16,15,15,17,15,16,15,15,16,15,15,28,16,17,15,16,16,35,31,10,11,24,11,18,34,143,8,18,19,12,12,19,15,17,15,17,15,16,16,19,14,30,15,33,7,12,17,20,34,18,12,33,28,13,20,17,17,15,17,33,16,15,17,15,17,23,17,45,13,18,16,16,30,11,18,24,21,19,17,17,16,15,25,15,15,16,16,15,14,17,15,15,16,16,16,15,16,15,15,16,15,15,15,16,17,15,16,16,15,15,17,15,15,16,16,15,17,15,15,17,15,15,16,16,15,15,15,17,15,15,17,15,15,16,15,15,16,16,15,16,15,16,16,15,16,16,15,16,16,15,16,16,15,17,15,16,16,15,16,32,17,17,15,17,15,15,17,15,15,16,16,15,15,17,15,16,15,15,15,17,15,17,15,15,16,14,16,16,15,17,15,16,16,15,16,16,15,16,16,15,16,15,15,16,16,16,16,15,15,16,16,15,15,17,15,15,16,16,15,16,16,15,15,16,15,15,15,17,15,15,17,15,17,15,15,15,17,15,15,16,15,15,16,16,15,16,16,15,16,16,15,16,16,15,16,16,15,17,15,31,16,15,17,15,16,16,15,16,16,15,17,15,15,17,15,15,16,16,15,15,17,15,16,16,15,15,17,15,15,17,15,15,17,15,17,15,16,15,15,16,16,15,17,15,16,16,15,15,17,15,15,16,16,15,15,16,16,15,16,15,15,136,17,13,17,17,21,14,17,15,15,17,16,15,16,15,16,15,15,16,17,15,16,15,16,16,16,15,15,16,16,16,15,16,15,15,17,15,17,32,16,17,25,14,19,16,16,16,17,13,16,16,15,17,15,16,16,16,19,24,15,22,16,17,20,14,18,15,16,19,21,14,18,13,18,19,59,13,19,23,64,20,18,15,18,15,17,15,39,14,18,17,22,15,16,16,17,23,13,20,18,27,11,17,25,18,13,41,13,19,15,23,13,18,24,19,12,41,13,18,15,22,19,17,15,41,14,18,20,17,13,17,15,17,16,17,17,21,40,17,18,23,15,32,16,31,13,18,16,33,7,21,24,14,20,11,17,17,22,13,22,13,20,14,23,12,25,13,19,13,19,22,16,36,23,18,21,11,24,12,21,14,32,28,16,14,15,16,23,23,21,18,13,18,35,12,16,17,20,15,16,15,17,17,15,18,15,16,17,15,18,15,16,16,16,18,16,15,22,17,12,17,15,18,15,15,18,17,16,17,16,21,13,19,15,17,16,17,39,19,16,14,16,27,15,18,17,17,16,16,16,16,16,22,20,15,18,19,20,15,19,23,12,22,12,19,11,33,22,18,12,19,15,27,17,17,22,17,19,15,16,16,15,17,16,16,16,16,16,16,16,17,15,17,16,16,16,15,16,16,17,20,13,18,15,16,16,16,16,17,15,17,16,15,16,16,17,16,17,15,17,16,15,17,16,17,16,17,16,15,16,16,16,16,16,16,16,16,16,34,17,17,15,17,15,17,14,18,16,15,16,16,16,16,16,16,15,17,16,15,16,16,16,17,16,15,17,16,16,15,17,17,15,17,15,16,17,16,16,16,15,17,17,15,18,15,18,15,17,15,16,16,15,17,16,16,16,16,15,16,16,16,17,15,17,16,15,18,14,18,15,17,17,15,17,16,16,16,15,16,16,17,15,17,16,16,17,15,17,16,17,16,17,17,15,14,17,16,16,33,16,16,16,16,16,16,16,16,16,16,15,16,17,17,17,15,17,16,16,16,16,17,14,16,16,17,15,16,16,16,16,15,17,15,17,16,15,18,15,16,16,16,16,16,16,16,17,16,15,17,15,17,17,15,16,16,16,16,15,16,16,16,16,15,16,15,15,16,17,15,17,15,18,15,16,16,16,15,17,15,16,16,16,17,18,16,17,16,16,15,17,16,15,16,16,16,15,18,15,33,16,16,15,17,16,15,17,16,16,16,15,17,16,16,16,16,16,16,16,16,16,16,15,16,16,17,15,17,16,16,17,16,15,16,16,17,15,17,16,15,16,16,15,18,15,17,14,16,15,20,23,12,16,16,16,15,16,19,16,24,17,19,15,24,13,26,15,19,18,17,17,23,18,13,18,15,15,18,21,18,16,16,24,17,24,20,46,6,12,17,21,12,46,9,34,8,12,13,19,88,15,70,13,6,11,19,13,20,19,16,24,15,24,12,25,27,15,32,13,19,13,23,17,31,13,19,22,14,40,41,75,8,23,14,22,11,27,13,30,108,22,16,24,70,80,13,27,15,37,15,20,14,21,14,24,13,20,11,22,17,19,17,17,19,12,19,15,30,20,18,15,21,11,22,15,15,16,20,16,22,16,19,15,20,16,18,15,22,23,22,19,37,13,25,24,19,13,19,42,19,15,17,18,16,18,19,19,15,19,14,17,16,16,16,16,19,16,16,20,15,16,15,15,20,15,17,17,14,16,15,16,16,14,15,17,16,16,16,16,15,16,16,16,16,17,16,19,14,17,15,17,15,17,15,16,15,17,17,16,16,16,16,16,16,16,16,16,16,16,17,16,16,16,15,16,17,16,17,16,16,16,17,16,16,18,15,17,17,15,17,16,15,16,16,17,16,16,17,16,33,17,15,16,16,16,16,15,17,16,17,11,19,15,18,16,16,15,16,16,16,16,16,16,16,16,17,15,18,17,18,15,18,16,16,18,16,17,16,16,18,16,17,16,17,17,15,16,15,17,17,15,16,16,16,16,16,16,15,17,16,16,17,15,17,16,16,16,15,17,18,16,17,16,17,15,18,15,16,16,16,16,15,17,15,17,16,17,17,15,17,15,17,16,16,16,16,16,16,16,32,16,15,18,16,15,16,15,17,16,17,16,15,15,15,17,16,16,15,17,16,16,16,16,15,16,17,17,16,15,17,17,16,16,15,17,15,16,16,16,17,15,17,16,16,15,17,16,16,16,16,15,17,16,16,16,16,16,16,16,18,15,17,16,16,17,15,18,16,15,21,27,31,12,15,15,16,15,17,18,35,5,21,12,13,15,16,20,24,15,11,15,16,16,16,16,22,24,19,38,17,15,17,16,16,15,16,18,17,16,16,16,16,16,16,16,15,14,16,17,16,14,16,16,19,18,16,53,13,4,17,18,15,15,17,15,17,16,15,16,16,14,16,16,15,16,16,16,16,16,15,16,16,16,15,17,14,16,16,16,16,15,16,16,16,16,16,15,16,16,16,16,16,16,16,15,16,16,16,16,15,16,16,15,17,16,16,16,16,16,16,15,16,15,16,16,16,16,15,15,34,17,16,16,16,14,16,13,16,16,15,17,16,16,16,16,15,16,16,16,17,16,16,15,16,15,17,15,16,15,15,17,15,16,14,16,15,16,16,15,16,15,15,19,14,15,17,15,16,16,16,16,16,14,17,16,15,17,16,16,16,15,17,15,15,18,14,17,16,15,16,15,16,15,17,16,15,17,16,15,16,17,16,15,16,15,16,15,17,16,15,16,16,15,17,16,15,15,17,15,32,16,15,17,15,16,15,15,17,15,16,15,16,15,16,16,15,16,16,16,16,15,16,16,15,15,17,16,16,16,15,16,15,15,16,17,16,16,16,16,15,17,16,16,15,16,15,15,17,15,15,17,15,18,15,16,15,16,16,15,15,17,15,15,16,18,16,17,16,15,15,17,16,15,16,15,16,15,16,16,16,16,16,16,15,15,17,15,16,15,16,15,15,15,17,16,16,15,16,15,34,16,16,14,16,15,16,16,15,17,16,15,16,15,16,16,16,16,16,15,16,15,16,17,16,16,15,16,15,16,15,16,16,15,16,16,15,16,15,16,16,15,17,16,15,16,15,16,15,16,16,16,15,16,15,16,16,16,16,15,16,16,16,15,16,15,16,15,16,16,16,16,15,16,16,15,16,16,15,16,15,16,15,17,16,15,16,15,15,16,16,16,15,16,15,15,17,15,16,15,32,16,15,16,16,15,16,15,16,15,16,15,17,16,16,15,16,15,17,16,15,16,16,15,16,15,16,15,17,15,16,15,16,16,14,17,16,15,16,15,17,15,17,16,15,17,15,16,15,16,16,15,16,15,16,15,16,16,16,16,15,16,15,17,15,17,15,16,15,16,15,16,16,16,16,15,17,16,16,15,16,15,15,17,15,16,15,16,15,16,16,15,16,15,16,16,15,16,15,16,31,16,15,16,15,16,22,17,15,16,16,17,16,16,15,15,16,15,17,15,16,16,15,16,15,15,17,15,35,5,14,31,12,18,15,29,18,4,16,14,16,17,16,15,11,16,15,15,16,15,17,16,16,15,15,16,15,28,13,14,18,14,16,14,34,13,31,20,16,17,18,19,15,23,23,16,13,18,14,26,11,38,5,16,16,16,15,16,15,17,16,15,15,17,15,17,17,19,18,40,17,15,16,15,16,15,16,15,17,16,16,15,17,15,16,15,16,15,16,14,16,15,16,16,23,29,5,16,15,28,18,15,17,15,15,17,15,16,15,15,15,15,17,15,15,17,15,15,15,15,17,15,15,16,16,15,36,5,16,15,15,15,17,15,15,16,15,15,15,15,17,15,15,16,16,15,15,16,16,15,16,16,15,15,15,17,15,15,16,36,5,17,17,15,15,15,15,17,15,15,32,16,15,15,15,16,16,15,15,16,16,15,15,15,17,15,16,16,15,15,16,35,5,17,15,17,15,15,15,15,17,15,15,17,15,15,17,15,15,17,15,15,15,16,15,15,16,16,15,19,24,17,15,24,21,15,15,15,17,15,15,17,15,17,15,15,16,15,15,15,16,16,15,15,17,15,15,17,15,14,16,15,15,15,17,34,15,15,15,15,17,15,15,17,15,15,15,17,15,33,17,15,15,16,16,15,14,16,16,15,16,16,16,15,17,15,26,22,17,15,16,16,16,16,14,17,15,15,16,16,15,16,15,15,15,16,15,17,15,15,16,16,15,17,15,15,17,15,26,24,15,16,16,15,16,16,15,17,15,15,16,15,15,15,17,15,15,15,17,15,15,15,17,27,14,14,18,15,16,15,25,16,18,16,18,15,17,15,15,18,15,17,17,15,17,15,17,15,17,50,8,15,17,15,17,16,15,17,16,14,16,15,17,16,16,16,14,17,15,16,16,16,17,14,15,16,15,17,16,16,15,16,16,16,16,15,17,16,17,17,17,16,17,16,15,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,15,17,16,15,16,15,17,16,15,17,16,16,16,15,17,16,16,15,16,16,16,16,15,17,15,16,16,16,15,17,16,16,16,16,18,16,15,16,15,15,31,16,15,17,16,16,15,17,15,17,15,17,15,16,17,27,18,23,28,14,14,18,12,21,14,22,12,25,13,15,17,15,17,15,19,15,15,15,16,16,14,16,15,15,17,16,15,15,15,16,15,17,15,16,15,17,15,17,15,17,15,17,15,17,15,15,15,15,17,15,16,15,15,17,15,17,15,17,15,17,15,17,15,16,15,15,17,15,16,16,17,15,17,15,16,15,15,17,15,16,32,15,15,16,15,15,16,15,15,16,16,16,15,17,24,25,15,15,16,17,15,14,17,15,16,15,15,16,15,15,17,12,16,15,16,17,15,14,16,15,16,15,15,15,17,15,16,15,16,15,15,17,15,15,17,15,17,15,16,15,15,17,15,16,15,15,17,15,16,15,14,16,15,15,17,15,15,17,26,25,15,16,16,15,17,15,16,15,15,16,15,15,15,16,15,15,17,15,16,15,30,16,15,17,15,15,16,16,15,15,17,15,17,15,16,15,15,16,16,15,17,15,15,17,15,17,15,16,15,15,16,15,15,15,17,15,17,15,16,15,15,16,15,15,15,17,15,17,15,16,15,15,16,15,15,16,15,15,16,15,15,17,15,16,15,14,16,15,15,16,15,15,17,15,17,15,15,17,15,17,15,16,16,16,15,17,15,17,15,16,15,15,15,17,15,16,15,16,15,15,31,15,16,17,15,15,33,16,16,15,17,16,15,19,15,15,17,15,15,16,15,16,15,15,16,16,15,16,17,15,16,16,15,17,15,15,16,15,17,15,17,15,16,15,15,16,15,15,15,17,15,16,41,14,19,15,34,13,19,15,34,23,13,14,16,15,16,15,15,26,5,17,14,17,15,14,17,16,16,16,16,17,15,19,24,20,16,17,16,17,16,15,15,17,15,17,23,14,22,40,20,25,13,23,14,15,21,20,47,16,14,21,14,22,11,18,17,15,15,16,15,16,15,20,22,20,13,23,28,11,20,16,17,15,17,15,16,15,17,16,47,5,34,7,8,11,17,15,17,15,16,16,15,16,34,14,21,14,19,12,30,10,23,14,20,12,25,15,17,16,16,15,15,16,15,16,15,15,16,15,15,17,15,17,15,16,15,15,16,15,16,16,15,17,16,16,16,15,15,16,35,16,16,16,16,16,15,17,15,16,15,16,16,15,17,15,16,15,16,15,15,17,15,16,15,15,16,15,15,16,17,15,15,17,15,16,15,15,16,15,15,17,15,16,15,15,16,15,16,16,15,17,15,16,16,15,16,15,26,5,25,16,16,16,16,15,17,16,16,15,16,15,16,15,21,22,14,18,29,18,12,22,13,16,17,16,20,14,16,40,13,18,15,17,16,15,15,35,15,23,64,19,13,23,12,20,12,20,16,16,22,15,16,17,15,16,15,16,15,15,17,16,16,16,16,16,16,15,16,16,15,17,15,16,15,16,16,16,15,15,16,15,16,14,16,17,16,15,15,16,16,16,16,15,17,16,16,15,17,15,16,15,16,16,16,14,16,16,16,15,16,16,25,26,32,11,19,16,18,14,14,17,16,15,17,15,16,15,16,15,15,16,17,15,17,16,16,16,15,16,32,16,16,15,15,17,16,15,15,17,16,16,16,16,16,16,16,16,14,17,16,16,15,16,16,15,16,16,16,15,15,17,16,15,16,16,15,17,16,16,15,16,16,15,15,16,16,15,16,16,16,16,16,16,16,15,16,15,15,16,16,15,16,15,15,16,15,15,16,17,15,17,16,15,16,15,15,17,15,16,15,16,16,15,17,16,16,16,15,15,16,15,15,17,16,16,15,17,15,17,31,16,15,16,15,16,16,16,15,15,16,15,16,15,15,17,16,15,15,16,15,15,16,15,16,15,15,16,17,15,16,15,15,16,17,15,16,15,16,15,15,16,16,15,15,17,16,15,15,16,15,16,16,15,17,16,16,16,15,15,17,15,17,15,16,16,15,15,17,15,16,16,15,16,16,15,16,16,15,16,15,16,16,15,17,16,16,15,17,15,17,16,15,15,17,16,15,15,17,15,31,16,15,17,15,17,15,17,15,17,16,15,14,16,15,15,16,16,15,16,15,16,15,15,16,17,16,15,15,17,15,17,15,17,15,16,16,15,16,15,16,16,16,16,16,16,16,15,14,17,15,16,16,15,16,16,16,15,15,16,15,14,17,16,15,16,15,17,39,14,20,15,17,15,16,15,39,22,17,16,16,16,17,16,16,16,16,16,16,25,38,12,31,15,15,17,16,17,26,11,60,16,15,24,13,23,14,18,15,18,11,17,15,20,19,13,17,14,16,15,17,16,15,15,16,19,30,7,17,14,16,15,14,16,15,15,15,17,15,17,15,15,14,16,17,15,16,15,16,17,15,15,15,17,15,15,16,17,15,15,15,17,15,16,15,15,15,16,15,15,15,17,15,16,16,15,16,16,15,15,17,15,17,15,15,17,15,15,16,15,15,15,16,16,15,15,17,15,15,17,33,15,17,15,15,17,15,15,17,15,17,15,15,17,15,15,16,16,15,15,15,17,15,15,17,15,15,15,15,17,15,16,15,15,14,17,15,15,17,15,15,16,15,15,15,17,15,15,15,17,15,15,15,17,15,12,16,15,17,15,16,16,15,15,17,15,15,17,15,15,16,16,15,17,15,15,16,16,15,15,17,15,16,16,15,17,14,17,15,15,15,16,15,15,15,17,15,15,15,17,31,16,15,15,15,17,15,15,17,15,16,16,15,15,17,15,16,16,15,15,16,16,17,15,15,16,15,15,15,15,17,15,15,17,15,15,17,15,15,17,15,15,16,16,15,15,17,15,15,15,17,15,15,16,16,15,15,17,15,15,16,16,15,16,16,15,15,16,15,15,15,16,15,15,15,16,15,15,15,17,15,16,16,15,15,17,15,14,17,15,15,14,16,16,15,15,17,15,16,16,30,16,15,15,17,15,16,16,15,16,16,15,14,17,15,15,15,17,15,15,15,17,15,15,15,17,15,15,15,17,15,15,15,16,17,16,15,15,17,15,15,16,16,15,15,17,15,14,15,17,15,15,17,15,15,17,15,15,17,15,15,16,16,15,16,16,15,16,15,31,18,16,17,15,27,22,13,18,16,17,14,16,15,18,15,16,16,15,15,17,15,15,17,14,17,15,17,15,15,17,33,16,14,16,15,14,39,5,7,10,36,20,20,18,20,20,19,19,19,19,19,19,19,20,19,20,19,19,19,20,19,19,20,19,17,21,20,19,19,19,20,18,20,18,19,19,19,19,19,19,19,19,19,19,19,19,19,20,31,26,17,15,16,17,17,31,21,5,16,12,17,17,15,17,39,39,15,22,18,28,20,20,17,21,17,22,20,17,28,17,17,17,15,17,15,18,15,16,18,16,38,17,15,18,15,17,15,16,18,15,17,15,17,15,17,15,17,38,6,17,17,15,17,17,15,17,15,16,16,18,15,17,17,16,17,15,17,15,17,17,15,17,16,17,15,17,17,16,40,6,17,15,17,15,17,15,17,15,16,18,15,17,15,16,17,17,15,17,15,17,16,17,15,17,15,17,16,17,15,17,39,6,16,17,17,15,17,16,17,15,17,17,16,16,17,17,17,15,17,17,36,15,17,17,15,17,15,17,15,17,38,6,17,17,16,17,17,17,15,17,15,17,15,17,15,17,16,17,16,17,26,13,19,25,31,23,14,22,17,24,14,21,15,24,13,31,7,19,17,17,12,19,16,18,18,18,18,16,18,16,16,18,16,18,18,18,16,16,18,18,16,18,16,18,17,18,16,17,17,16,18,16,18,16,18,16,18,17,18,16,18,16,18,16,18,17,18,17,18,17,50,28,32,12,38,6,17,17,17,16,17,17,16,17,15,16,17,16,16,17,15,17,17,16,16,15,18,15,17,15,17,17,15,16,18,25,26,17,17,15,17,15,17,15,17,17,15,17,15,17,16,17,15,17,15,17,15,17,17,15,17,15,17,15,17,15,36,6,17,18,20,22,18,12,18,15,18,15,18,16,15,17,16,18,16,17,16,16,17,17,43,7,25,15,19,15,18,15,18,15,37,16,16,17,16,27,5,16,16,16,16,16,16,15,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,22,23,17,17,15,17,16,33,5,16,15,17,16,16,16,15,16,17,15,16,16,16,16,15,16,17,15,16,16,16,16,16,16,15,16,15,17,16,23,14,38,6,17,15,16,15,41,12,21,13,35,14,19,15,17,15,17,16,16,16,15,15,17,16,16,16,16,17,16,15,26,44,16,16,15,16,16,16,16,16,15,16,16,16,17,15,16,34,11,33,17,17,16,17,15,17,16,16,16,17,16,14,16,17,16,16,15,17,16,16,16,16,15,17,16,15,16,16,17,15,20,27,18,17,14,15,17,15,17,14,16,16,16,16,16,16,16,15,16,16,16,16,15,17,16,16,17,16,16,16,16,16,16,25,21,16,16,15,17,16,16,16,16,16,16,16,16,16,16,16,15,36,18,17,15,15,16,15,16,16,15,17,15,17,15,39,13,18,19,16,17,15,26,6,16,16,16,16,15,16,16,15,15,16,16,16,14,16,15,17,16,15,16,16,16,16,15,45,10,17,15,17,15,17,16,15,17,16,16,15,16,15,18,18,17,16,16,16,15,16,16,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,19,17,17,20,16,16,16,35,15,14,16,16,14,16,16,16,17,17,15,16,16,25,15,16,15,16,15,16,15,17,16,15,16,15,16,15,16,16,15,16,15,16,16,15,16,16,15,26,16,16,16,16,15,16,17,16,23,14,17,14,39,11,18,15,16,16,15,17,25,16,17,16,15,18,16,16,15,15,16,16,16,18,19,12,17,21,19,24,13,19,16,17,16,17,16,24,13,17,20,20,13,25,13,29,13,19,19,37,21,14,38,16,22,14,18,11,19,17,19,15,18,14,19,14,19,13,35,14,25,14,18,18,19,16,17,16,15,16,15,16,16,16,16,16,16,16,16,15,16,15,16,16,15,25,16,21,14,21,17,22,17,22,20,20,16,20,15,56,13,18,15,17,16,15,16,15,16,15,14,17,16,15,16,15,16,17,15,15,21,22,14,18,14,16,15,17,16,15,16,16,15,17,15,15,17,16,15,35,16,15,17,16,15,16,16,15,17,15,16,16,16,16,16,16,15,16,16,15,16,16,13,28,13,18,15,17,15,17,16,14,16,15,16,16,16,16,15,17,16,16,16,16,24,18,15,54,8,26,12,19,30,22,34,22,16,17,21,17,17,26,20,20,16,17,22,35,13,19,15,17,15,16,15,17,16,18,12,17,15,17,15,15,17,15,16,16,15,17,16,16,15,17,14,17,16,15,15,35,20,16,37,18,21,52,5,17,20,17,20,16,15,17,15,17,15,16,15,17,15,17,17,15,17,15,17,15,17,15,17,15,17,14,18,15,16,44,11,16,15,16,15,17,16,15,16,16,16,16,16,16,16,15,16,15,15,17,37,4,17,12,16,16,15,16,15,17,16,16,15,16,15,17,16,15,17,16,16,15,17,15,16,16,16,15,18,26,6,16,15,16,16,15,16,15,16,22,40,18,16,16,15,16,16,15,17,16,15,16,16,16,16,15,16,15,17,16,16,15,16,16,16,22,13,21,15,16,15,17,17,29,16,15,16,15,16,16,15,16,15,16,15,16,18,20,18,13,17,15,17,16,15,15,17,16,16,16,25,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,26,7,16,16,16,16,16,16,16,16,16,16,15,18,15,16,15,16,15,16,16,16,15,16,16,33,16,16,17,16,15,16,15,17,16,15,16,15,16,16,16,26,24,14,23,15,178,14,10,28,6,17,11,27,16,16,16,16,16,17,22,16,15,16,16,15,27,5,16,15,16,15,16,15,16,16,15,16,15,15,17,15,16,15,15,17,16,15,15,15,16,15,15,16,15,16,32,23,13,18,18,19,13,27,14,17,16,16,16,17,15,16,16,15,16,16,14,16,15,16,16,16,16,15,16,35,16,16,15,17,16,16,16,15,16,15,16,16,16,16,16,15,16,16,16,16,17,17,17,15,16,16,16,15,16,16,16,15,16,16,15,16,16,15,17,16,16,15,16,16,16,15,18,17,17,15,16,16,16,15,17,16,16,16,15,16,16,16,15,17,15,16,16,16,15,16,16,16,17,15,16,16,16,14,16,16,17,15,16,16,15,16,16,16,15,16,16,15,16,16,16,16,17,15,16,32,16,16,16,16,15,23,14,19,15,17,24,28,17,17,12,18,15,17,16,15,17,16,16,15,16,16,16,15,16,16,16,15,16,15,16,16,16,15,15,17,16,16,15,16,16,15,16,16,15,16,16,16,16,16,15,16,16,16,16,16,16,16,16,15,16,16,17,15,16,16,15,16,16,16,15,16,15,14,16,16,16,16,16,15,16,16,15,16,16,16,16,16,16,15,15,16,16,16,15,34,17,15,15,17,15,17,15,16,16,15,16,16,17,16,16,16,16,15,16,16,15,16,16,15,15,16,15,17,15,16,15,16,16,16,26,16,17,16,15,16,16,16,15,16,16,15,15,17,16,16,14,16,15,16,16,15,16,16,16,16,16,15,16,16,15,15,17,16,16,16,16,16,16,16,16,16,15,16,16,16,15,16,16,15,16,16,15,15,17,16,16,15,16,15,15,16,16,15,36,17,16,15,15,16,16,16,15,16,15,17,15,16,16,15,17,16,16,16,15,16,16,16,15,17,16,16,15,16,16,16,15,16,16,15,15,17,16,16,15,16,15,17,15,16,16,17,14,16,15,16,16,16,15,16,16,16,16,15,15,17,16,16,15,16,16,15,16,16,16,16,15,16,16,16,14,16,15,14,17,16,16,14,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,15,16,32,16,16,15,16,16,15,16,16,16,15,16,16,17,15,16,16,16,15,16,16,16,15,16,16,16,16,16,16,15,16,16,16,16,16,16,15,17,16,16,15,17,16,15,16,16,15,16,16,16,15,16,16,16,15,15,16,16,16,15,16,15,17,16,16,16,15,16,15,16,16,16,15,16,16,15,16,16,16,16,15,16,16,16,14,15,17,15,16,16,15,16,16,16,15,16,16,15,16,16,31,16,16,11,17,16,16,15,16,16,15,17,15,16,16,15,16,16,16,16,16,15,16,16,16,15,16,15,16,17,17,15,16,16,17,14,16,15,16,15,17,17,16,15,16,15,15,17,16,16,16,17,15,15,17,16,15,16,16,16,16,15,16,16,15,16,16,15,17,15,31,12,20,13,19,18,21,18,39,14,19,15,12,20,11,23,17,21,12,18,15,17,16,15,17,16,15,17,15,16,34,17,15,16,16,15,16,39,30,35,13,19,16,17,15,16,16,15,16,16,17,15,16,16,15,16,16,16,15,16,16,15,16,15,17,15,16,16,16,15,16,16,16,16,16,15,17,16,15,16,16,15,16,16,15,16,16,15,16,16,15,16,16,15,16,16,15,16,16,15,16,16,15,16,16,17,16,16,16,17,15,15,16,17,16,16,16,14,17,15,16,16,17,15,16,15,16,16,16,16,34,17,15,16,16,15,16,16,15,16,15,16,16,15,16,16,15,16,16,15,16,16,15,16,16,17,15,16,16,16,16,16,15,16,16,15,16,16,16,15,16,16,16,16,16,15,16,16,16,15,16,16,15,16,16,15,16,16,15,16,16,17,15,16,15,16,16,15,16,16,15,16,16,16,15,16,16,16,16,16,16,15,16,16,17,16,16,16,15,16,16,16,16,16,16,17,15,16,15,16,32,14,16,16,15,16,16,17,15,16,16,17,15,16,15,14,17,16,15,16,16,15,16,16,15,16,16,15,15,17,16,15,16,16,16,16,16,16,15,16,16,15,16,15,16,15,16,16,15,16,16,15,33,13,19,14,16,15,17,16,15,17,15,17,15,16,16,16,15,16,16,15,16,16,16,16,15,21,16,16,17,16,16,16,16,16,17,15,16,15,17,14,22,21,22,13,12,20,18,21,66,16,23,28,34,15,5,15,22,14,19,17,17,15,17,17,14,17,22,18,12,18,14,18,14,17,16,17,15,14,17,16,16,34,14,19,15,17,16,17,16,17,16,17,22,15,20,12,49,14,19,18,24,12,42,13,18,14,17,15,17,17,16,16,15,16,16,17,16,15,15,16,15,16,16,17,16,15,31,14,24,16,21,12,24,13,12,50,13,25,16,22,12,21,16,54,14,20,17,19,77,22,14,17,22,20,12,26,15,17,15,17,16,15,16,17,16,15,17,15,16,16,14,16,15,16,15,16,16,14,16,17,15,16,15,16,16,15,16,16,16,15,16,16,15,15,16,16,15,16,16,16,15,17,15,16,16,15,16,15,16,16,16,16,16,15,16,16,16,16,16,16,16,16,15,16,15,14,17,56,7,41,6,14,11,18,16,15,16,16,15,16,16,15,15,17,15,17,16,14,35,16,15,17,15,16,16,16,15,16,16,16,15,16,16,16,15,16,15,17,16,16,16,16,16,15,16,16,15,17,16,16,14,15,17,16,15,16,16,15,17,15,16,15,17,16,16,15,16,15,17,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,25,21,30,13,35,16,16,14,17,26,26,26,6,29,6,16,16,16,15,16,15,16,15,16,16,15,16,15,16,16,15,16,34,15,16,15,16,15,16,15,16,16,16,16,16,16,16,15,16,15,16,15,16,16,16,16,16,16,15,16,16,16,35,14,18,16,14,23,16,21,14,20,11,34,16,17,15,16,16,16,16,14,16,16,15,16,18,16,15,16,16,16,16,16,16,18,14,15,16,16,17,34,14,24,12,12,21,15,25,12,32,15,17,10,15,15,16,16,15,16,15,16,13,17,15,17,15,16,15,16,15,16,34,16,16,31,13,18,15,17,16,22,16,16,15,16,15,15,16,15,16,16,16,15,15,17,16,15,15,16,16,16,16,15,16,15,16,15,16,15,16,16,16,17,33,26,3,20,52,5,16,18,15,13,16,16,16,15,15,16,15,16,15,17,15,15,16,16,15,16,15,15,17,15,16,15,15,15,15,17,24,24,16,16,16,16,16,23,25,15,15,17,16,15,15,17,15,16,15,16,16,16,32,16,15,17,15,15,16,15,16,16,23,25,16,15,16,16,15,24,25,15,16,15,16,16,16,15,24,24,13,27,13,18,18,17,18,17,16,34,14,17,16,15,15,17,16,16,15,17,16,22,16,16,16,15,15,16,16,16,16,16,16,16,15,16,15,15,17,15,16,15,16,16,16,15,15,16,16,15,17,16,15,16,15,16,15,16,16,16,16,16,15,16,15,16,15,15,16,16,16,16,34,16,15,16,15,16,15,15,17,15,16,15,16,16,16,15,16,16,16,16,16,16,16,15,16,16,16,13,16,15,15,17,16,16,16,15,16,16,16,16,16,16,16,15,16,16,15,17,16,15,16,16,16,15,16,16,15,16,21,27,22,31,8,11,18,16,16,17,15,16,20,15,16,16,16,24,24,16,16,16,14,16,15,16,15,16,15,16,15,15,16,15,15,16,15,15,15,15,16,15,33,17,15,15,15,16,15,16,16,15,17,16,15,15,16,16,15,16,16,15,16,15,16,15,16,15,15,16,16,16,15,15,17,16,23,25,15,16,16,24,24,16,16,15,16,16,15,16,16,15,15,17,16,15,17,16,16,16,15,16,15,17,16,16,16,16,15,16,14,16,15,14,17,15,16,15,16,16,15,17,15,16,15,16,16,15,16,15,15,16,15,15,17,15,24,25,15,16,16,15,31,16,16,15,15,16,15,16,15,24,24,17,15,16,15,15,17,15,16,15,15,16,15,15,16,15,15,16,26,24,17,15,17,16,15,15,16,23,25,16,15,15,16,15,16,15,15,16,15,15,16,15,16,16,16,23,24,17,16,16,15,17,15,16,15,15,16,15,27,24,17,16,15,15,16,15,15,24,24,16,16,15,17,15,16,15,15,17,24,25,15,16,16,16,16,15,17,16,23,25,30,16,15,17,16,15,15,24,24,16,15,15,24,25,16,15,17,15,24,25,15,16,15,16,16,15,17,15,17,16,15,16,26,5,25,6,15,15,16,15,16,16,16,23,25,16,15,17,15,26,25,15,15,17,15,17,16,22,16,19,16,16,15,23,20,16,15,17,15,23,20,15,15,17,15,17,15,28,5,17,26,16,15,16,15,16,16,15,16,17,16,16,16,15,16,43,13,13,27,68,25,13,22,27,12,10,19,16,18,16,20,26,16,19,21,16,18,29,16,16,16,17,18,15,22,20,13,18,32,8,13,19,13,24,14,19,13,19,13,26,12,25,13,27,11,20,17,37,11,20,15,19,15,26,17,27,12,27,13,27,11,26,41,25,26,19,12,25,17,27,14,31,12,31,15,20,18,25,31,7,9,36,13,24,14,17,13,17,28,38,12,58,18,26,6,21,14,18,16,56,14,17,21,28,23,17,21,22,9,18,20,22,21,8,17,38,16,13,20,16,22,20,25,30,14,14,16,15,16,16,15,16,16,16,15,16,16,16,15,14,16,16,16,16,15,16,16,16,17,15,16,15,17,16,16,16,15,16,16,15,16,16,21,13,24,14,17,16,15,17,16,16,16,15,16,16,15,16,16,16,16,15,15,17,16,16,15,17,16,18,11,17,16,15,17,15,16,16,16,16,34,15,15,16,14,16,15,16,16,15,16,16,15,16,15,16,16,16,16,16,15,16,15,16,20,12,58,13,18,16,15,16,16,16,16,15,17,16,16,16,16,15,16,16,15,16,15,16,16,15,18,17,17,15,17,16,16,16,16,15,16,15,16,16,15,16,16,15,16,16,15,16,15,16,16,16,16,16,21,12,19,15,17,16,16,16,16,15,16,17,13,17,15,17,15,17,16,16,17,17,33,16,16,16,16,16,15,16,15,15,17,16,17,17,25,12,19,15,16,16,16,15,17,16,16,15,16,16,16,15,16,15,16,16,19,18,17,16,16,16,16,15,16,16,15,16,16,16,16,15,16,16,16,16,15,16,16,16,22,13,19,16,16,15,14,17,16,16,21,13,18,15,17,15,17,17,16,14,17,17,14,16,15,17,15,16,19,16,17,16,15,16,16,16,13,17,18,15,15,16,34,14,15,16,16,16,16,15,16,16,15,16,16,16,14,16,16,15,21,13,56,13,19,15,18,14,17,16,16,16,16,15,17,16,16,15,17,15,16,21,16,17,15,16,16,16,16,15,16,15,16,16,16,16,16,17,15,16,16,16,17,15,16,15,16,16,16,15,16,16,18,15,17,17,17,16,17,16,16,15,17,15,16,16,15,17,16,16,15,16,16,16,15,16,16,15,17,16,15,17,34,16,16,17,15,16,16,16,15,17,15,16,16,16,15,16,16,15,16,16,16,16,17,17,16,16,16,16,15,16,16,16,15,16,16,16,17,17,18,16,19,13,18,15,17,16,15,17,16,16,16,15,16,16,14,16,16,15,16,16,15,16,15,16,16,15,16,16,15,16,15,15,17,15,16,16,15,21,18,17,12,17,15,16,15,17,15,15,17,16,16,15,16,16,15,20,11,18,23,23,36,16,17,16,17,15,15,16,16,16,16,16,15,16,16,17,15,17,16,15,17,20,11,23,16,17,15,17,15,17,16,15,16,15,17,16,16,15,17,16,16,16,16,16,15,16,15,17,16,15,16,16,17,31,14,24,13,25,15,17,16,15,15,17,16,15,16,16,16,15,16,38,13,19,16,17,36,12,18,15,17,15,16,16,15,16,16,15,16,16,15,17,16,17,17,15,16,16,16,15,34,16,15,17,16,15,16,16,15,15,17,16,16,17,17,15,16,16,15,17,17,16,16,16,15,16,15,17,16,16,15,16,16,16,13,17,16,15,16,15,16,16,16,15,16,16,16,16,16,15,16,16,16,16,16,16,16,15,16,16,17,14,16,16,15,16,16,16,14,16,15,16,16,16,15,16,16,16,16,16,16,15,17,15,16,15,17,16,16,15,16,16,16,16,16,16,16,15,16,16,31,17,16,16,16,16,16,15,16,16,16,15,15,17,16,16,15,16,16,15,16,16,16,15,17,33,11,24,15,17,16,47,6,14,16,15,16,16,16,17,15,15,17,16,15,16,15,16,16,16,16,17,15,15,17,15,16,16,16,16,16,16,15,17,16,16,15,16,16,15,16,15,16,16,16,15,16,15,16,16,15,15,17,16,15,16,16,16,15,16,16,16,16,16,15,16,16,15,16,16,34,25,15,34,13,19,15,17,15,17,15,16,16,27,13,22,15,17,16,16,16,16,16,16,15,17,16,16,17,17,17,15,16,16,17,16,14,16,16,15,17,16,17,16,17,15,16,15,16,16,15,16,16,16,15,16,16,17,15,16,16,15,16,15,15,16,15,16,16,22,11,18,15,17,16,14,17,16,15,16,16,16,15,16,15,16,16,15,17,15,16,16,15,16,16,15,16,16,15,16,34,17,15,16,15,16,16,16,15,16,15,15,37,13,19,19,20,11,20,11,27,14,19,13,22,13,23,17,21,13,19,16,15,16,16,16,15,16,16,16,15,16,15,17,16,15,17,17,15,16,16,15,17,15,16,16,16,17,16,15,16,16,16,15,15,17,16,16,16,15,16,16,16,15,16,16,16,14,16,17,17,16,17,22,18,9,16,19,13,16,18,16,13,17,16,16,15,16,16,16,34,16,16,16,15,16,16,16,17,15,16,16,15,16,16,16,15,16,16,15,16,16,16,21,13,21,11,19,13,18,14,16,16,15,16,25,5,16,16,17,15,16,15,15,24,11,21,29,20,16,20,13,31,13,14,21,20,18,13,27,20,11,22,17,25,21,9,25,17,17,17,16,17,16,17,14,17,16,35,14,20,31,21,12,18,20,19,11,18,17,54,6,10,14,20,25,20,15,17,15,35,17,15,17,33,12,22,21,19,11,26,11,19,15,15,15,15,17,16,16,16,16,15,16,16,16,15,17,16,16,16,17,15,34,15,20,14,18,14,27,16,22,13,24,16,17,16,16,16,16,15,17,16,15,16,15,16,16,15,16,16,15,14,17,16,16,16,16,17,15,16,15,16,16,14,16,16,16,16,16,16,16,15,16,16,15,15,16,16,15,17,16,16,16,15,16,16,15,16,15,35,15,15,16,16,16,16,15,15,17,16,16,16,15,16,16,15,16,15,16,15,16,15,15,15,16,16,15,16,16,16,16,15,16,16,16,15,16,16,15,16,15,16,16,15,16,15,16,15,16,15,16,16,15,16,15,16,15,16,16,15,16,15,16,16,16,16,16,15,16,15,16,15,16,16,15,16,16,15,16,15,16,16,15,16,15,16,16,15,16,16,16,16,15,16,16,15,16,34,41,40,14,18,15,24,20,10,10,17,16,16,25,13,13,17,15,17,15,17,15,17,15,17,15,16,16,16,16,16,15,16,16,16,15,17,16,16,15,14,17,15,17,16,16,16,17,15,16,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,16,14,16,16,15,16,16,15,17,15,16,16,16,16,14,16,16,16,15,16,16,16,15,16,16,16,16,14,16,16,15,16,16,34,17,15,16,16,16,15,16,16,16,15,16,16,15,15,16,16,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,15,16,16,16,16,16,14,15,17,16,15,16,16,16,16,15,17,16,16,15,16,16,16,15,15,16,27,38,20,25,7,16,16,16,15,37,11,24,14,17,16,23,12,41,13,18,23,15,22,14,13,17,16,15,16,16,16,15,16,22,22,18,15,17,33,16,16,16,15,16,15,14,17,16,15,14,17,16,17,17,15,16,16,15,17,16,16,16,16,16,17,14,16,16,16,15,16,16,15,17,15,16,16,15,16,16,16,15,16,16,16,17,15,16,16,15,16,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,15,16,16,14,16,16,16,16,16,16,15,15,17,16,16,15,16,16,15,16,15,17,15,16,16,15,17,16,32,16,16,15,16,16,15,17,16,16,16,16,15,16,16,16,14,16,15,16,16,15,17,15,16,16,15,16,16,15,16,15,17,15,16,16,15,16,15,17,15,16,16,15,15,16,16,15,16,16,16,15,16,16,15,17,15,16,16,15,16,15,17,15,16,28,10,13,17,15,15,17,32,13,19,15,16,16,15,16,16,16,16,16,15,17,16,17,17,14,16,15,14,17,16,15,17,15,16,16,34,16,16,16,16,16,16,16,15,16,16,16,15,16,15,16,16,16,16,16,16,16,15,16,15,16,14,17,16,15,16,15,16,15,16,15,16,15,15,17,15,16,16,16,15,16,15,16,15,16,15,16,15,16,16,15,17,15,16,15,17,16,15,16,15,16,16,16,15,15,17,16,15,16,15,16,15,16,15,17,16,15,16,15,16,15,15,17,16,15,17,15,16,16,15,16,15,16,15,16,30,16,15,16,17,16,15,16,15,16,15,16,14,17,15,17,26,17,12,14,18,16,14,16,16,23,17,23,15,18,16,14,17,15,16,15,17,15,17,26,18,11,18,15,42,5,16,16,15,15,17,15,15,18,25,23,9,15,16,14,17,15,17,16,15,15,17,15,16,15,16,17,15,17,16,16,44,4,25,14,33,14,12,21,13,35,10,22,25,33,14,20,19,11,19,18,14,21,14,19,54,26,14,16,15,16,15,15,17,27,15,13,19,14,17,15,17,15,15,17,15,15,17,16,15,17,15,15,17,15,17,15,16,16,16,16,16,15,25,15,16,15,16,16,15,17,15,17,15,16,16,16,15,16,16,15,17,16,15,15,17,15,17,15,16,17,16,16,15,15,16,16,16,16,16,16,15,17,15,16,15,17,16,15,15,17,15,16,15,15,16,15,15,16,15,16,16,15,17,15,34,16,15,15,17,15,59,6,30,6,17,16,16,28,20,20,10,18,15,19,11,40,13,22,16,17,22,18,17,17,15,17,15,17,15,25,16,20,15,15,17,15,16,16,15,16,14,17,14,16,15,16,14,16,15,14,17,16,15,16,16,15,16,16,15,16,15,15,16,15,16,16,15,15,16,17,15,15,16,14,16,15,15,17,15,16,15,14,15,16,15,16,15,15,16,15,16,15,16,16,33,15,15,17,15,16,15,17,15,16,15,15,16,16,15,15,15,16,15,16,16,15,15,17,15,16,16,15,15,16,15,16,16,15,17,15,17,15,17,15,17,16,16,15,16,15,16,17,15,15,16,17,14,17,15,15,17,16,16,15,17,15,17,15,17,15,16,15,15,16,15,17,15,17,15,16,14,17,15,16,16,15,16,14,16,15,17,15,17,15,16,14,16,15,14,17,15,16,15,34,16,15,16,17,14,17,15,15,16,17,24,24,16,15,15,17,15,17,16,15,14,17,15,17,15,15,16,15,16,15,16,16,15,17,15,15,17,15,16,17,15,16,15,17,14,17,15,16,15,15,16,15,15,16,17,15,15,16,15,14,16,15,15,15,16,16,15,15,17,15,17,16,16,14,17,15,16,16,15,15,16,15,17,15,17,15,16,15,15,16,16,15,16,17,15,15,15,16,16,33,17,14,16,15,15,17,15,15,16,16,15,16,15,16,14,17,15,16,16,16,15,15,15,16,16,15,15,16,15,15,16,15,16,16,16,16,16,16,16,15,15,16,15,15,16,15,16,16,15,15,15,17,14,16,15,15,17,15,16,15,16,15,15,15,16,16,15,15,15,16,16,15,17,14,16,15,16,15,15,16,15,15,16,15,15,16,16,15,14,16,15,16,16,15,17,15,17,15,16,15,30,15,16,15,14,16,15,15,16,15,17,15,16,17,15,15,16,15,15,17,15,17,15,17,16,15,15,16,16,15,16,15,15,17,14,16,15,15,17,15,16,17,16,15,16,15,16,17,15,15,16,15,17,15,15,16,16,15,14,17,15,16,15,15,15,16,15,16,15,16,17,15,17,15,16,15,15,15,16,16,15,15,32,15,17,16,15,15,17,28,16,10,15,15,17,20,14,17,16,17,32,16,15,17,23,17,19,53,24,13,18,23,24,12,25,16,24,12,21,16,17,22,10,16,22,13,17,14,17,15,17,15,14,21,15,25,15,17,15,17,16,15,14,17,15,15,16,17,15,16,16,14,17,15,16,15,15,16,15,14,17,15,16,15,15,16,16,15,16,15,15,17,15,16,15,15,17,15,17,15,16,15,15,16,16,15,16,15,15,15,16,16,16,15,15,16,16,15,15,14,33,16,15,16,15,16,15,15,17,15,16,15,16,15,15,15,17,17,15,23,48,23,22,22,18,23,19,14,13,16,16,14,17,15,16,15,15,16,14,17,15,15,17,15,16,15,16,16,15,16,16,17,15,17,15,16,15,16,15,15,16,15,15,16,15,16,15,15,27,5,17,17,18,16,15,16,16,15,16,15,15,16,15,15,14,17,15,16,15,14,16,16,15,16,15,15,16,16,15,16,33,16,15,14,17,15,16,16,15,16,16,15,17,16,16,15,17,15,15,16,15,16,16,15,15,17,15,16,30,15,16,15,16,16,16,26,5,16,16,15,17,15,16,16,15,17,15,17,15,17,15,16,16,15,16,15,14,16,15,15,15,16,17,15,14,19,25,13,18,15,17,24,5,15,17,15,14,17,16,16,15,17,15,16,16,15,16,15,16,16,15,16,17,15,15,17,16,15,15,16,33,16,15,17,16,15,15,17,16,15,15,17,15,16,16,15,15,17,15,16,16,15,15,17,15,15,17,14,16,15,16,16,15,16,16,15,16,15,15,16,16,15,16,15,15,16,15,23,25,5,16,17,16,15,40,13,19,15,28,25,48,9,17,15,19,16,16,15,15,16,15,16,16,31,14,23,19,13,22,16,20,15,24,11,20,16,21,13,18,16,17,16,17,22,12,18,16,34,14,19,35,27,12,30,23,27,45,19,21,12,22,24,12,25,13,15,17,16,14,29,24,16,20,11,22,24,18,19,15,17,15,16,16,15,17,16,16,15,17,15,16,16,16,14,16,15,16,15,17,27,10,30,22,15,25,27,11,18,21,15,16,16,16,15,17,16,47,14,27,16,18,16,17,16,39,6,13,15,20,21,19,14,17,16,24,14,23,11,19,12,17,23,12,19,17,17,14,24,15,17,36,16,15,17,16,16,15,16,16,16,22,9,17,15,17,16,17,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,22,13,18,16,16,14,17,16,15,16,16,16,15,16,15,16,16,15,16,16,16,16,16,15,16,15,16,16,16,16,15,16,15,16,16,17,15,16,16,16,15,16,16,15,15,16,16,15,16,16,16,15,16,16,15,16,15,16,15,16,15,16,15,15,16,15,34,41,19,15,17,14,16,16,15,17,15,17,15,14,16,16,15,16,15,17,16,15,16,15,17,17,15,16,16,16,14,20,23,12,18,14,20,17,15,17,16,16,15,16,16,16,16,15,16,16,16,16,16,15,16,16,15,15,17,16,15,16,16,16,17,15,16,16,15,16,16,15,16,16,16,16,15,18,15,16,16,16,16,16,17,15,16,16,16,16,15,16,16,16,16,16,17,15,16,17,15,16,34,16,15,17,16,16,14,16,16,15,16,16,16,20,11,24,14,16,15,17,16,15,16,16,15,16,16,16,16,15,16,16,16,15,16,16,15,17,16,15,16,15,17,16,15,16,16,15,17,17,16,17,15,16,16,15,17,22,14,18,16,17,15,17,16,16,15,17,15,17,16,15,15,17,16,15,16,16,16,16,16,16,16,16,16,15,16,16,15,16,15,16,16,15,15,16,16,15,16,15,35,16,16,15,16,14,15,16,15,16,15,17,15,16,15,16,15,16,15,16,15,16,15,16,16,15,15,16,16,16,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,16,16,15,15,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,15,16,16,15,16,16,15,15,16,16,16,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,32,16,16,16,16,13,17,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,16,16,15,16,15,16,16,16,16,15,16,19,20,12,17,15,17,15,17,16,15,17,16,16,16,15,16,16,15,16,16,15,17,16,16,16,15,15,17,15,16,16,15,24,31,12,11,25,12,19,15,16,16,28,23,11,13,25,10,18,15,17,17,32,13,35,13,29,16,17,17,17,14,17,16,34,17,15,16,16,16,19,28,17,13,17,16,15,15,17,15,17,16,16,16,16,15,17,16,15,16,16,16,16,15,16,16,15,16,16,15,16,16,15,16,16,15,16,16,16,15,16,16,17,15,16,16,17,15,16,16,17,15,16,18,26,13,18,16,16,15,16,15,17,15,17,14,16,16,15,17,15,17,15,16,16,16,15,16,16,16,14,16,15,16,16,14,15,17,16,15,16,15,17,16,35,16,15,16,16,15,16,16,17,15,16,16,16,16,16,16,13,17,16,16,15,16,21,13,16,16,16,15,16,15,16,15,16,15,16,16,16,16,15,16,16,15,16,15,15,17,16,16,16,15,15,17,15,27,16,16,16,15,16,16,16,14,16,16,16,15,16,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,21,14,18,15,17,15,17,16,16,15,16,16,15,34,17,15,16,16,16,16,16,15,16,17,15,16,16,15,16,16,17,17,17,15,16,15,16,16,16,16,16,15,16,16,16,16,15,16,15,16,16,17,15,16,17,16,16,16,16,16,16,15,16,15,16,16,17,15,16,18,26,13,19,15,16,15,17,16,15,16,16,16,16,15,17,15,14,17,16,16,16,16,14,16,16,16,15,16,23,19,13,17,15,17,16,16,15,17,15,16,16,15,16,32,16,16,15,16,16,16,17,16,16,16,15,16,16,16,15,18,25,18,11,16,14,17,14,17,16,18,16,15,17,15,17,16,16,15,17,16,16,16,16,15,16,16,16,15,16,15,17,16,17,15,27,12,18,15,17,15,17,16,15,17,15,16,15,17,16,15,17,15,12,17,17,16,15,16,16,16,16,15,16,15,17,15,16,16,16,15,16,16,16,17,15,16,16,15,16,16,16,15,16,40,16,16,15,16,25,18,19,15,18,15,25,11,28,14,19,12,28,18,21,19,11,17,18,18,16,20,16,16,16,16,17,15,16,16,15,16,16,15,16,15,16,16,15,16,25,15,16,16,16,16,15,16,15,33,54,28,31,15,12,18,15,17,15,43,13,14,30,11,18,31,15,27,10,16,16,16,22,12,18,18,17,15,17,16,17,16,15,16,17,16,16,16,23,11,19,17,16,17,17,38,16,14,16,16,17,16,15,17,16,16,16,16,19,19,15,14,16,16,16,16,16,16,16,16,17,14,16,18,13,16,17,14,16,16,16,16,16,17,15,17,14,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,17,16,14,17,16,16,15,17,16,16,15,17,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,17,16,16,16,16,16,16,33,16,15,17,16,16,18,19,15,17,15,16,16,14,17,16,27,15,12,18,15,17,16,16,14,26,16,16,16,16,14,17,16,16,23,14,16,16,16,16,16,16,15,16,16,15,16,16,17,15,14,16,16,16,15,16,16,15,17,16,15,16,16,17,15,15,16,16,15,15,17,16,16,15,16,16,15,16,16,16,17,15,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,35,15,14,16,16,15,16,16,16,15,16,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,15,17,17,15,16,16,15,16,16,16,15,16,16,16,16,15,16,16,15,16,16,15,17,15,16,16,16,15,16,16,15,16,16,16,16,16,25,18,22,14,18,14,15,17,15,16,16,16,15,16,16,15,16,15,16,16,16,15,16,16,16,15,16,16,15,16,16,17,19,38,18,15,16,15,16,16,16,15,18,15,16,16,16,16,14,16,15,17,16,16,15,17,16,16,17,15,16,16,16,16,16,14,15,17,16,16,15,16,16,16,16,15,16,16,16,15,16,15,17,16,16,15,16,16,16,15,15,16,16,16,15,15,16,16,16,14,16,16,16,15,18,20,14,18,15,17,15,16,16,15,15,17,15,17,16,16,15,17,16,16,15,17,16,16,14,17,15,16,16,34,16,14,15,16,16,15,17,16,16,15,17,15,17,15,17,15,17,16,16,16,16,15,16,16,16,16,16,16,15,17,16,16,16,15,16,16,16,16,24,27,14,79,5,14,12,52,20,14,11,20,18,22,14,17,24,14,20,16,17,15,17,16,16,16,23,16,17,15,17,16,15,17,15,17,15,16,16,16,16,16,16,16,17,15,16,16,16,16,16,17,16,15,15,17,16,15,17,16,16,34,16,16,16,16,14,16,16,15,16,16,16,16,16,15,16,15,17,16,16,15,15,16,16,16,16,17,15,17,14,16,16,16,16,16,16,15,16,15,15,18,15,15,15,16,16,16,15,17,16,15,15,16,16,16,16,15,16,16,16,16,15,17,16,16,16,16,16,15,16,16,15,17,15,17,16,16,16,16,18,19,14,18,15,17,15,17,14,16,15,17,15,17,16,15,15,16,16,15,16,34,17,16,15,17,15,16,16,15,17,16,15,17,15,17,17,15,16,15,17,16,16,15,16,16,16,15,16,16,16,15,16,16,15,17,16,15,16,15,17,16,15,16,16,16,16,16,11,16,15,16,16,16,15,16,16,15,16,16,16,16,15,16,16,15,16,16,18,17,21,14,19,15,15,15,17,14,16,16,25,16,16,17,17,15,14,18,15,15,16,16,16,17,33,19,14,17,16,16,15,35,15,17,15,15,27,15,27,14,26,15,20,12,17,25,20,13,16,15,17,19,44,13,8,14,18,16,22,16,22,14,18,13,21,21,12,12,22,24,28,9,17,10,20,20,18,16,17,14,15,17,16,16,16,14,16,16,16,16,16,14,16,16,15,16,16,15,16,16,16,16,25,15,22,14,22,13,32,18,23,15,19,10,27,6,15,15,17,15,15,17,15,15,17,15,16,14,16,15,15,35,16,15,16,17,16,14,16,15,16,15,15,16,17,15,16,16,15,15,16,14,17,15,16,15,16,15,15,17,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,31,24,5,14,17,16,15,16,16,16,16,15,15,16,15,16,15,16,16,16,15,16,15,16,15,15,16,15,16,16,16,16,16,15,16,37,8,15,15,26,19,16,15,16,15,24,24,16,15,16,14,17,15,16,28,30,16,19,16,30,9,23,17,17,18,14,16,16,16,16,16,26,27,8,54,9,17,16,16,19,17,19,20,27,5,14,12,28,12,21,15,17,25,10,13,16,33,14,19,16,17,14,17,15,17,16,24,16,14,16,16,16,16,16,25,16,16,16,15,16,15,16,16,16,16,15,16,15,15,17,15,15,17,15,16,15,16,15,16,16,15,16,15,16,15,16,16,16,16,16,16,16,15,17,15,34,16,16,16,15,16,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,15,16,16,15,16,15,16,16,15,16,16,15,16,15,16,16,16,15,16,16,15,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,15,16,16,24,22,20,13,17,15,26,15,17,16,16,15,17,16,15,17,15,16,16,16,15,16,16,15,16,15,16,16,16,16,16,15,16,15,16,16,16,15,17,33,16,16,15,16,16,15,16,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,16,16,15,16,16,16,16,16,15,15,17,16,15,16,15,16,16,16,15,15,17,16,15,16,15,16,15,16,15,16,16,16,15,16,14,16,16,15,16,15,16,15,16,16,16,15,16,15,16,15,16,16,16,15,16,16,16,16,16,15,16,16,16,16,17,16,16,16,16,16,15,16,15,16,16,31,16,15,16,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,16,15,17,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,15,16,15,16,16,16,15,16,16,16,16,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,16,31,16,15,16,15,16,16,16,15,16,16,15,16,15,16,15,16,15,16,16,16,15,16,16,16,15,16,15,16,16,16,16,15,16,15,15,16,15,16,16,16,16,16,16,15,16,15,15,16,15,15,17,16,16,15,16,15,15,16,16,16,16,15,16,16,16,16,16,15,15,16,15,15,16,15,15,16,16,15,16,14,17,15,15,16,15,15,16,15,15,16,16,15,16,15,17,15,15,17,15,31,16,15,15,16,15,15,16,16,15,16,15,45,6,14,27,16,15,17,16,17,36,17,15,18,26,17,27,13,26,9,15,19,13,18,15,17,16,15,17,16,15,17,16,22,15,17,15,17,15,16,15,17,16,16,16,15,15,17,16,16,15,16,16,15,16,15,16,16,15,16,15,16,16,15,16,15,17,15,16,15,17,16,16,16,16,15,16,15,17,24,23,17,15,16,16,15,15,17,15,35,16,16,16,16,16,15,15,17,14,16,15,16,16,16,15,16,15,17,15,17,14,16,15,17,16,16,15,16,15,16,15,16,16,15,16,15,16,16,15,16,15,16,15,17,15,16,15,16,16,16,16,16,16,15,16,16,15,17,16,16,15,16,16,16,15,17,24,23,17,15,16,16,16,16,16,16,15,16,15,16,15,16,15,17,15,16,15,16,15,16,16,16,16,15,17,15,16,16,15,31,16,16,16,15,16,15,17,16,16,16,15,16,16,15,17,15,16,15,16,15,34,5,19,13,17,16,16,15,17,16,15,16,15,25,16,15,16,15,16,15,16,14,16,15,16,15,16,41,19,22,12,26,13,18,15,27,15,17,15,16,16,15,16,15,16,16,14,16,15,17,14,16,16,15,16,16,16,16,15,16,26,25,16,16,16,15,17,16,15,16,15,16,16,15,16,15,15,17,15,34,16,16,14,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,15,17,16,15,16,15,16,15,16,16,16,16,16,16,15,16,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,16,14,17,16,15,15,17,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,15,17,16,15,16,15,16,16,16,16,15,16,16,15,31,16,15,17,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,17,16,15,16,15,16,15,16,15,16,15,16,15,15,17,15,16,15,16,15,16,15,16,15,16,15,15,17,15,17,16,16,16,16,15,16,15,16,15,16,14,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,15,17,14,16,15,16,15,16,15,16,16,16,16,14,16,16,16,16,17,39,35,15,60,8,19,14,20,14,22,11,30,18,14,15,23,15,22,14,21,24,13,20,11,19,14,17,16,15,17,15,18,24,8,15,16,16,16,16,16,16,18,28,12,40,23,12,23,15,17,16,15,16,16,15,17,15,17,16,15,17,14,16,16,16,16,15,16,16,16,16,16,15,16,15,17,16,15,16,16,16,16,17,14,16,15,16,16,21,17,22,14,21,14,19,11,23,13,19,15,17,61,16,15,16,16,16,15,16,16,17,15,16,16,17,14,16,15,15,17,16,16,15,16,15,17,16,16,16,24,16,17,16,15,16,16,16,16,17,15,16,16,16,15,16,16,15,17,17,13,18,15,17,15,17,16,16,15,16,16,16,15,16,16,16,16,16,15,16,25,15,16,15,16,15,16,15,16,15,16,15,16,16,16,15,16,15,16,16,16,15,16,24,15,16,16,15,16,16,15,16,34,16,16,16,16,16,15,16,16,15,16,16,16,17,15,16,16,15,16,16,16,15,16,16,17,17,14,16,15,16,20,16,17,15,16,16,15,16,16,16,15,16,16,16,15,16,16,17,15,16,16,16,16,16,16,16,15,16,15,16,16,15,16,16,16,17,20,12,17,16,17,15,14,17,16,16,15,16,15,16,15,16,15,13,16,16,16,15,16,16,15,16,15,16,16,15,16,16,15,16,34,16,16,16,15,16,15,16,16,15,16,16,16,15,16,15,16,15,17,15,21,11,21,14,18,15,17,16,16,16,15,15,17,16,16,16,16,15,16,16,16,16,16,16,15,16,16,16,16,15,16,16,16,14,16,16,16,16,15,17,17,16,15,16,16,16,16,15,16,16,16,16,17,17,15,16,16,16,16,16,16,16,16,16,16,15,16,16,16,15,16,16,16,16,15,16,15,17,16,21,36,16,15,17,16,16,15,17,14,16,16,16,16,15,16,16,16,15,17,16,15,16,16,16,16,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,15,16,17,20,14,18,15,17,15,16,15,17,16,16,16,16,16,15,16,16,16,15,16,16,22,16,15,15,16,16,16,15,16,16,16,16,15,16,16,16,37,13,40,6,12,12,18,15,15,42,48,22,15,14,15,23,16,13,19,16,17,16,20,25,19,14,16,16,16,16,15,16,16,14,16,15,16,25,15,17,15,16,16,15,16,15,16,27,11,16,17,15,17,16,15,17,16,15,16,15,17,16,15,16,16,16,16,16,15,16,16,15,15,17,16,16,20,12,56,14,18,15,17,15,17,16,14,16,15,16,16,15,16,15,17,16,16,14,19,18,18,10,17,15,17,14,15,15,17,16,34,16,16,15,35,13,20,16,16,23,14,21,18,11,29,21,34,5,16,14,18,19,13,19,12,28,13,20,13,22,13,40,14,17,15,17,15,17,22,21,15,20,14,20,18,12,18,15,17,15,17,16,22,12,16,18,20,17,21,20,19,17,21,14,22,21,22,15,21,13,26,12,14,20,12,18,17,19,17,19,15,20,12,34,13,27,14,26,16,19,11,39,14,18,15,17,16,16,15,16,35,17,16,15,25,25,21,13,35,16,19,22,22,18,17,15,30,7,14,25,12,18,15,15,16,16,14,16,16,15,16,16,15,16,16,19,16,17,15,16,16,15,16,16,15,16,16,17,15,16,17,15,16,15,16,16,15,16,16,15,16,16,15,16,15,16,15,16,15,16,16,15,16,15,16,16,15,16,15,16,16,16,16,15,16,15,16,16,15,16,16,16,16,15,16,356,15,16,15,16,35,16,16,15,16,16,16,16,15,16,16,15,16,15,16,16,15,16,16,16,15,16,16,15,16,15,14,17,16,16,16,16,15,16,21,16,16,15,16,16,17,15,16,15,16,15,16,16,15,15,17,16,16,15,16,15,16,15,16,16,15,16,17,15,16,16,16,16,15,16,15,16,16,15,16,15,16,16,16,29,31,23,16,17,15,17,14,16,46,15,21,27,17,18,25,7,15,15,15,17,35,13,16,24,32,13,15,16,17,16,16,16,15,17,22,14,18,15,17,15,17,15,16,16,15,16,16,16,16,16,15,15,17,16,16,15,16,15,16,16,15,16,15,15,17,16,16,15,16,16,15,16,22,16,32,15,17,15,17,15,17,16,16,16,16,16,16,16,15,14,17,15,16,16,16,16,16,14,16,17,14,16,16,16,16,16,15,16,16,16,17,16,16,16,16,16,14,16,16,16,34,17,16,16,17,15,24,13,21,21,23,14,22,14,39,6,10,15,19,23,19,22,17,15,17,16,16,16,15,17,20,12,19,15,17,14,17,16,16,16,16,16,16,13,17,16,16,16,15,17,16,15,17,15,16,16,16,16,16,16,15,16,16,16,16,15,16,16,16,16,16,15,16,16,16,15,17,15,17,15,16,16,15,16,15,17,15,17,16,16,14,16,16,16,15,16,16,16,15,16,35,17,16,15,16,16,16,15,17,16,16,14,15,17,16,16,15,16,16,16,16,15,16,16,16,16,15,16,16,16,16,15,16,16,16,16,15,16,16,16,15,17,16,15,16,16,16,16,14,16,16,16,16,15,16,16,16,16,16,14,16,16,16,14,16,16,15,16,16,16,16,15,16,16,15,16,16,16,16,15,16,16,16,15,17,15,16,16,16,16,16,15,16,16,16,16,15,16,16,15,32,16,16,16,16,15,16,15,17,16,15,16,16,16,16,16,17,15,16,16,15,17,16,16,16,16,15,16,16,16,15,16,16,16,16,16,15,16,16,16,17,15,16,15,17,16,16,16,15,16,16,16,15,16,16,16,16,16,19,16,16,15,16,16,16,16,16,16,15,16,16,16,16,15,16,16,15,16,15,16,15,16,15,30,14,14,18,15,17,15,17,15,16,25,16,15,16,16,16,15,32,15,15,17,15,16,16,13,15,16,15,16,15,16,16,16,15,16,15,16,16,16,16,16,15,16,16,16,15,15,17,16,16,16,15,15,17,15,16,15,16,15,16,16,16,16,15,17,16,16,16,15,16,16,16,15,16,16,16,15,15,17,16,15,16,16,16,15,16,16,16,16,16,15,16,16,16,15,16,16,16,16,16,15,15,17,15,16,15,16,16,16,16,15,16,15,16,15,17,25,37,17,43,18,13,15,15,21,14,18,31,25,19,17,14,16,15,16,15,17,15,15,17,16,20,16,22,14,26,12,16,14,16,15,17,21,21,29,6,12,12,28,11,49,11,22,28,13,15,17,34,14,18,15,17,16,15,17,21,33,6,14,13,21,10,22,28,18,15,17,16,16,31,28,17,15,25,18,16,11,18,14,19,14,18,15,23,25,15,15,21,22,37,12,21,16,21,14,37,53,18,17,24,13,18,14,16,21,14,23,32,15,10,18,16,20,24,20,29,13,17,15,15,17,14,17,16,15,17,15,16,15,15,17,15,17,15,17,15,16,16,16,15,16,16,16,16,16,15,17,16,16,16,15,16,16,16,16,16,16,15,16,16,16,16,16,15,16,16,16,16,16,15,16,16,16,15,17,16,15,16,15,17,15,16,16,15,16,23,24,16,16,16,16,33,44,3,17,17,20,31,14,16,16,15,16,15,16,15,16,15,15,16,15,15,16,15,15,17,15,15,16,15,15,17,15,16,15,16,15,15,17,15,16,15,15,16,16,16,16,16,16,15,15,16,15,15,16,15,15,16,16,16,16,16,15,17,15,17,15,17,16,16,16,16,15,17,16,15,15,16,17,15,16,16,16,16,15,17,15,16,14,16,15,16,15,15,17,15,16,15,15,16,15,34,16,25,12,19,36,18,14,34,14,27,15,17,15,17,15,17,16,16,17,16,16,15,16,16,15,14,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,15,16,19,13,18,16,17,14,15,17,15,17,16,15,17,16,15,17,16,17,15,15,18,15,17,15,17,15,16,16,15,14,18,15,17,16,16,16,25,7,16,15,16,15,16,15,16,15,16,15,16,14,16,14,16,14,16,15,16,15,16,17,16,15,33,15,15,16,16,15,16,15,16,15,16,14,16,15,16,14,16,14,16,12,16,15,17,23,24,15,17,15,15,16,15,16,16,15,16,14,17,15,15,17,15,16,15,16,15,16,14,17,15,19,16,16,16,15,16,16,16,15,16,16,15,15,16,16,14,16,15,15,17,15,17,16,15,16,16,15,16,16,16,16,16,15,15,17,16,16,14,16,16,16,16,15,17,15,16,16,15,15,16,16,32,38,14,32,12,15,15,15,35,21,37,8,8,12,12,22,15,21,17,15,15,16,16,21,15,56,10,16,16,15,17,16,16,14,16,15,16,16,19,16,16,16,16,16,14,16,15,23,14,19,16,17,20,15,20,16,15,15,20,12,16,18,32,17,21,38,13,18,15,21,15,31,16,13,19,15,21,12,20,21,11,19,14,20,11,21,17,37,17,21,13,19,16,19,27,13,33,15,17,15,35,16,15,17,16,17,27,13,19,16,16,15,15,17,16,16,16,15,16,16,15,16,16,16,16,15,15,17,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,16,15,16,16,16,16,16,16,16,15,15,17,16,17,15,16,16,15,16,16,16,17,17,15,16,16,15,16,16,16,15,16,15,16,16,16,15,16,16,16,15,34,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,15,16,16,16,15,16,15,16,16,15,16,16,17,15,16,16,15,16,16,15,16,16,16,17,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,17,15,16,16,16,14,16,16,16,15,16,16,16,15,16,16,15,16,16,16,32,16,16,15,16,16,15,16,16,16,17,16,16,16,16,16,15,16,16,15,17,17,15,16,16,16,15,16,16,17,15,15,17,16,17,17,15,16,16,16,16,16,16,16,15,16,15,16,16,16,16,16,16,16,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,16,17,15,16,15,16,16,16,16,16,16,16,15,16,16,15,16,16,16,15,32,16,16,15,16,16,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,15,16,14,17,17,15,16,16,15,16,16,16,16,16,16,15,17,15,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,16,35,11,18,18,19,14,21,15,26,9,12,28,72,40,8,11,11,37,5,16,13,18,21,9,16,16,18,25,12,17,15,18,29,14,19,15,17,16,17,15,16,16,17,15,15,31,17,30,11,25,17,17,17,21,14,22,11,18,11,23,15,19,13,44,8,115,15,22,16,46,11,40,16,16,21,17,24,14,21,15,39,13,24,11,18,16,16,34,14,35,13,12,21,13,17,15,16,15,17,16,16,16,16,14,16,16,16,15,15,17,15,16,16,37,16,16,29,16,20,14,19,13,42,8,7,13,18,15,16,18,16,15,16,16,15,24,25,15,16,16,24,25,16,16,16,24,25,15,16,15,24,25,15,16,16,16,16,24,25,16,15,16,22,25,16,15,24,25,15,17,15,16,16,15,16,15,16,16,16,24,25,15,16,15,16,15,16,15,16,16,14,15,16,16,16,16,15,16,15,16,16,15,16,15,16,16,16,16,15,16,16,15,17,32,16,15,17,16,15,16,15,15,17,15,16,16,15,16,16,16,16,15,15,16,16,15,16,16,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,16,15,16,15,16,15,16,16,16,16,15,16,15,24,25,16,16,15,15,16,15,16,16,15,16,15,16,15,16,15,16,15,16,16,16,16,15,16,15,16,15,16,15,16,15,16,16,15,16,15,17,15,16,16,16,15,24,25,16,30,16,16,15,16,23,25,15,16,15,16,15,16,26,25,16,15,16,15,16,16,15,16,15,15,16,15,27,25,6,16,16,16,15,15,17,16,16,15,16,16,16,16,15,27,24,13,41,13,18,14,16,15,26,16,15,16,15,16,15,16,15,15,16,15,16,16,15,16,15,16,16,15,16,16,15,17,15,17,16,16,16,15,16,15,15,17,14,17,16,16,16,16,15,16,15,16,16,16,16,34,16,15,16,15,16,15,15,16,15,15,17,16,16,16,15,15,16,15,16,16,16,16,16,32,15,17,15,16,16,15,19,16,15,16,15,16,16,16,16,16,48,6,15,20,25,19,10,16,15,17,16,51,17,10,15,29,29,20,32,16,11,18,15,23,16,17,16,21,18,16,25,16,17,15,16,16,15,15,16,16,15,16,24,14,47,13,19,14,17,16,21,16,21,16,21,13,19,25,66,15,27,26,13,18,33,19,13,17,34,19,13,17,18,17,14,17,16,16,16,15,32,26,15,23,14,18,16,15,16,16,16,15,16,15,16,15,16,16,16,15,15,16,15,16,15,15,16,15,15,17,15,16,15,16,16,16,16,16,16,16,15,20,16,16,22,16,15,15,17,15,16,15,15,17,16,16,16,15,15,16,15,15,41,13,18,15,20,22,20,12,13,23,14,26,15,27,16,20,66,20,13,20,20,15,42,13,18,15,17,16,16,16,16,16,16,14,16,23,12,22,57,6,22,20,22,14,37,13,11,19,14,17,15,17,16,17,14,16,15,15,17,15,17,15,14,17,16,16,16,20,11,21,18,24,16,21,15,20,14,22,16,20,16,17,16,16,16,16,15,20,17,17,15,17,16,15,17,16,16,15,16,16,16,16,16,16,15,16,15,16,16,16,16,14,16,16,15,16,37,17,17,21,17,15,17,16,16,15,16,16,16,15,16,17,16,16,16,15,16,16,16,16,15,16,16,16,17,17,15,17,15,17,16,17,16,15,16,16,16,15,15,17,16,15,16,16,19,12,24,15,15,16,16,16,16,15,16,16,16,15,17,16,16,15,16,16,16,14,16,16,15,16,16,15,16,16,16,15,16,16,15,16,16,16,17,16,16,17,16,14,16,16,16,14,15,17,14,16,17,31,51,21,18,15,15,16,16,16,15,16,16,16,16,15,16,16,16,14,15,17,16,14,16,15,17,16,20,13,18,15,17,16,17,16,15,16,16,16,16,15,16,16,15,16,16,17,15,16,16,15,16,15,16,16,17,15,16,16,34,14,17,16,17,13,17,16,16,16,16,16,14,16,16,15,16,16,16,15,17,16,16,16,15,17,16,16,15,16,16,16,15,16,16,24,14,18,14,17,16,33,34,13,30,37,8,16,16,17,15,27,16,27,14,28,15,29,42,16,14,23,17,17,17,23,19,18,22,34,13,18,15,17,16,14,17,15,20,14,17,21,11,15,17,16,16,16,16,14,20,11,24,10,19,23,17,20,17,11,40,11,12,19,16,17,15,16,18,17,11,17,16,16,15,16,16,16,16,14,16,16,15,16,16,15,16,16,16,15,16,16,16,16,15,17,17,16,14,16,16,34,15,16,15,16,16,16,17,16,16,16,16,15,16,16,16,15,16,15,17,17,14,16,16,18,20,15,17,16,15,16,16,15,16,16,17,15,16,16,16,15,16,16,15,16,16,15,16,16,16,15,16,16,14,16,16,16,16,15,16,16,15,16,16,16,18,15,17,15,17,16,16,16,16,17,15,16,16,17,13,17,16,16,16,16,16,17,14,16,15,16,16,15,16,16,16,15,16,16,16,32,17,15,16,16,16,15,16,16,16,15,16,16,16,16,18,13,18,15,17,16,16,15,16,14,17,16,16,16,15,16,15,17,15,16,16,15,16,16,15,16,16,15,16,21,18,16,15,16,16,15,16,15,16,16,14,16,15,16,16,16,16,16,15,16,16,15,16,16,15,16,15,16,16,15,16,15,16,16,16,15,16,15,16,16,15,16,23,12,28,13,18,15,15,16,17,14,16,16,16,33,17,15,15,16,16,17,16,16,17,14,17,16,16,14,16,16,16,16,15,16,16,16,16,16,16,16,16,15,14,17,18,16,17,16,16,15,16,16,16,16,16,15,18,16,16,16,16,16,16,16,15,17,15,16,17,15,16,16,16,15,17,16,16,16,16,15,17,21,14,18,15,16,16,14,17,16,16,16,15,16,16,15,16,16,16,15,15,17,15,16,16,16,15,20,17,17,15,17,38,15,15,17,15,17,16,16,16,16,15,16,16,15,16,16,16,15,16,16,16,15,16,16,13,17,16,15,18,13,18,15,17,15,17,16,16,15,17,15,17,16,16,16,14,17,15,16,15,17,16,16,17,15,16,16,15,16,16,16,16,15,16,16,17,15,16,16,16,15,16,16,16,15,16,15,16,16,16,14,16,15,16,16,15,14,17,16,24,30,14,29,8,84,16,5,14,21,34,10,63,21,11,23,17,22,12,26,11,19,16,26,18,38,15,21,22,22,15,14,17,25,18,16,15,16,16,19,11,18,16,14,16,16,20,25,20,12,18,12,21,15,17,18,17,16,15,16,16,16,15,16,16,15,16,16,15,16,16,15,15,17,16,15,16,16,15,16,13,16,16,16,16,16,16,15,16,16,16,15,16,16,14,16,16,15,16,17,15,16,16,15,16,16,15,16,16,17,15,16,16,35,16,16,16,16,15,16,16,16,14,16,16,17,19,18,13,17,16,16,14,16,16,15,17,15,17,15,17,16,15,17,16,16,16,15,14,17,16,15,16,15,15,16,15,16,15,12,22,17,16,15,16,16,11,17,16,16,15,16,16,15,16,16,16,10,18,15,16,15,17,15,16,29,12,11,12,21,12,20,12,25,11,20,20,14,21,14,13,24,11,29,12,23,12,20,14,11,21,13,22,55,16,15,17,15,16,18,12,16,16,17,14,17,15,16,21,12,27,22,25,12,18,24,10,25,18,15,15,16,16,16,16,15,17,13,18,14,16,15,15,16,16,17,15,11,16,15,14,18,16,15,17,16,15,12,17,16,16,11,17,16,15,15,17,16,43,15,15,17,16,17,18,20,14,19,18,15,16,18,15,16,18,25,17,15,16,18,15,16,19,18,15,16,18,14,16,16,22,20,17,19,19,11,18,16,20,11,18,16,19,12,17,16,17,16,18,24,14,19,16,18,28,12,17,17,17,22,20,18,16,19,13,16,17,18,17,16,17,18,48,16,19,18,15,17,21,26,16,22,14,20,17,17,17,16,16,19,31,5,20,13,18,15,16,17,34,18,16,16,20,17,18,17,18,17,17,17,18,17,17,17,16,19,24,18,19,29,19,14,19,14,25,11,21,18,12,16,16,30,9,17,21,15,16,16,12,17,17,17,40,22,27,19,21,12,14,16,26,17,16,17,17,16,17,17,16,17,17,16,17,18,17,16,17,17,16,20,16,33,26,12,18,17,13,19,17,21,18,10,18,22,17,16,18,17,17,22,20,19,25,16,17,17,16,19,37,16,22,18,15,16,22,12,20,13,20,14,17,17,16,17,17,16,17,17,17,17,16,20,16,17,17,17,16,17,20,16,27,15,15,16,22,11,19,15,17,19,48,3,17,15,18,16,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,48,17,17,16,16,17,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,18,16,16,34,49,17,17,16,17,17,17,18,17,16,17,17,16,15,18,16,17,17,16,17,17,17,17,16,17,17,17,16,18,47,17,17,16,17,17,17,16,18,17,16,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,16,17,52,16,17,17,18,17,18,18,18,18,17,16,17,17,17,17,18,17,17,17,16,18,16,17,17,17,16,17,52,17,17,17,16,17,18,17,17,16,17,17,17,31,18,17,17,16,17,17,18,17,17,17,16,17,17,17,48,4,18,16,17,18,17,16,17,17,17,16,17,17,17,16,17,18,18,17,17,17,16,17,17,17,17,16,17,47,17,17,17,18,17,17,16,16,17,31,5,28,13,17,15,16,20,11,18,19,18,20,17,16,18,17,15,17,14,16,17,17,17,17,17,17,17,17,17,17,47,17,18,17,17,17,17,17,17,16,17,17,17,17,17,35,17,17,17,17,18,16,17,17,17,17,17,16,48,17,18,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,18,16,17,17,17,17,17,17,17,17,48,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,18,16,48,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,16,17,17,16,18,17,17,17,17,17,17,17,31,52,17,17,16,17,18,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,16,18,28,20,19,18,19,15,15,26,20,33,22,32,24,16,16,20,14,14,18,21,17,23,13,17,22,13,19,21,20,18,13,16,22,16,19,19,19,19,11,22,16,16,26,8,18,18,17,20,15,16,17,18,18,18,17,17,17,16,17,18,17,17,17,17,16,17,17,18,17,17,16,17,17,17,17,16,35,53,17,17,18,18,17,17,16,18,16,17,17,17,17,16,17,17,17,17,16,17,17,18,17,17,17,16,17,17,48,16,18,16,17,17,16,17,17,17,18,17,17,16,17,17,17,17,17,17,16,17,18,18,17,17,17,16,17,49,17,18,17,18,18,18,17,17,17,16,17,17,17,17,17,20,17,16,17,15,16,20,11,18,14,16,16,17,17,17,17,16,18,16,18,18,17,16,17,17,31,18,16,17,17,16,17,17,17,16,17,17,17,17,17,16,17,20,20,17,17,17,17,16,17,17,11,18,17,15,16,18,15,16,17,15,16,18,15,17,17,16,16,15,20,16,18,17,16,17,18,18,18,17,17,16,17,17,16,17,17,18,17,16,17,17,18,17,48,4,18,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,23,18,19,23,25,25,11,19,47,21,16,26,11,19,16,14,18,25,16,14,16,18,15,16,16,16,15,17,15,17,14,19,16,14,16,16,18,27,16,22,13,24,25,14,15,16,17,47,17,17,18,17,17,16,18,17,16,18,17,16,18,17,16,17,16,18,17,16,17,18,16,17,18,17,17,17,47,18,16,17,17,17,16,18,16,17,17,17,17,16,17,18,17,16,17,18,17,16,17,16,18,17,16,17,18,48,17,16,35,16,17,16,17,17,17,16,17,15,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,49,16,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,16,17,18,16,18,17,17,15,17,17,18,17,48,17,17,16,17,17,17,16,17,17,17,16,17,18,17,16,22,11,32,17,17,16,17,21,31,14,21,18,19,17,28,12,25,16,16,21,20,10,17,30,13,16,18,21,15,36,14,16,17,16,16,20,11,18,19,15,15,20,15,15,15,23,16,18,14,16,19,15,18,17,17,17,17,16,18,18,17,18,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,55,17,16,17,17,17,17,16,17,18,17,17,16,17,17,17,16,17,17,17,16,17,17,18,18,17,16,17,17,48,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,18,33,18,16,17,17,17,16,17,17,48,17,16,17,17,16,17,17,17,17,16,17,17,17,16,17,18,17,17,16,17,17,17,17,16,18,18,17,16,48,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,48,17,17,16,17,17,18,18,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,48,18,17,17,30,18,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,48,17,17,17,16,17,17,17,16,17,17,17,16,17,13,17,17,17,17,16,17,17,18,17,16,16,17,17,17,47,17,17,17,16,17,17,17,16,17,17,17,16,17,18,18,17,17,16,17,17,17,16,17,17,17,16,17,17,47,17,17,17,17,17,16,17,17,17,16,17,17,17,16,17,18,17,31,17,18,18,17,16,17,17,17,16,48,17,17,17,16,17,18,18,18,17,16,17,17,17,16,17,17,17,16,17,18,18,17,16,17,18,18,18,53,17,16,17,17,16,17,18,18,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,18,17,16,48,17,18,18,17,17,16,17,18,17,16,17,17,17,16,17,18,18,18,17,16,17,17,17,17,16,17,18,53,17,17,17,16,31,17,17,18,18,18,17,16,17,18,18,21,12,23,17,19,16,30,23,20,23,26,14,20,13,14,17,17,16,17,17,20,16,19,15,16,17,17,16,18,17,16,16,17,18,17,18,20,15,17,15,16,15,16,16,18,16,17,18,18,18,18,17,16,17,17,17,17,16,17,18,18,17,16,17,17,17,16,17,17,18,18,18,18,17,47,5,16,16,17,18,18,18,18,17,16,17,18,17,16,33,18,16,17,17,17,17,16,17,17,17,17,16,50,15,17,17,17,16,17,17,16,17,17,17,16,17,17,18,18,18,17,16,17,17,17,16,17,17,16,17,17,48,3,18,17,17,16,17,17,17,16,17,17,17,16,17,17,16,17,17,17,16,17,18,17,16,17,18,18,17,48,17,18,18,18,17,16,17,17,16,17,17,16,17,18,17,16,17,17,16,17,17,18,18,18,16,17,17,49,31,18,17,16,17,17,17,16,17,17,18,18,18,18,17,16,17,17,16,17,17,17,16,17,19,16,16,48,18,17,16,17,17,17,16,17,18,18,18,17,17,16,17,17,17,16,17,17,18,18,18,17,16,17,17,49,4,18,16,17,17,17,16,17,22,18,17,17,17,29,13,19,30,23,18,19,17,26,14,24,26,23,16,17,20,22,17,16,23,19,14,17,18,21,18,23,22,25,16,33,56,28,12,52,25,32,18,18,24,21,31,3,17,19,19,18,21,24,12,17,19,22,17,20,18,26,19,8,22,15,18,18,21,24,18,16,19,22,22,20,34,4,14,12,24,19,18,21,19,14,14,18,17,17,17,17,16,17,17,17,17,17,17,17,17,18,17,17,17,17,16,22,19,15,50,24,23,19,28,15,17,51,6,17,17,17,17,17,17,18,17,16,17,17,17,17,17,17,17,17,36,18,17,17,16,18,16,17,17,43,4,18,16,17,17,17,16,17,17,17,16,17,17,17,17,17,21,18,17,17,17,17,17,17,17,16,17,17,17,17,16,17,22,25,8,28,15,18,15,16,20,17,23,19,20,22,23,18,18,18,20,20,25,9,16,17,18,19,19,21,14,14,16,17,17,17,17,17,17,17,16,17,17,21,16,15,16,20,14,16,16,18,16,20,18,16,22,18,18,18,40,17,17,17,17,16,17,18,17,17,17,16,17,18,17,17,16,17,17,17,17,16,17,17,17,17,22,19,17,10,17,16,17,17,18,17,17,16,17,17,17,17,16,17,17,18,17,17,17,16,17,17,17,16,17,17,17,17,17,16,17,20,45,7,19,15,16,16,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,17,17,16,44,4,17,17,17,17,16,17,17,32,18,17,16,22,18,18,16,16,15,15,18,18,14,16,17,17,17,16,17,17,17,17,17,17,16,17,17,19,30,15,16,25,25,17,15,26,25,26,9,29,25,26,16,18,17,17,16,17,17,17,17,16,17,17,43,4,18,17,16,17,17,17,21,19,14,26,23,30,22,19,26,25,16,26,24,16,16,26,25,18,15,15,27,24,19,15,27,27,17,17,17,17,16,20,40,7,18,16,17,34,18,17,16,17,17,17,16,17,17,16,17,18,17,16,17,17,16,17,17,17,16,17,17,43,3,17,17,16,17,18,16,17,16,17,17,16,17,17,19,18,17,18,16,17,17,18,18,17,16,17,17,17,17,16,17,18,18,17,16,17,17,17,16,17,17,16,21,14,16,22,13,17,17,16,17,46,3,19,18,35,3,35,3,19,24,20,15,16,16,15,15,16,16,17,17,18,16,17,17,35,17,17,17,18,17,17,17,17,17,17,44,3,18,17,17,17,17,19,16,25,11,17,16,17,17,17,16,17,17,16,17,18,17,17,17,17,16,17,17,16,28,20,16,17,17,32,13,3,19,16,17,17,17,17,17,16,17,17,19,15,18,13,17,16,18,18,18,17,17,17,17,16,17,17,17,17,45,3,17,16,17,17,17,16,18,16,19,16,16,22,24,17,16,18,22,22,18,25,15,44,19,19,17,22,16,12,22,12,15,18,17,24,13,19,22,12,17,17,16,17,17,18,19,16,18,18,18,17,16,21,22,13,16,19,15,16,17,18,16,44,4,18,17,16,16,17,17,17,17,17,16,16,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,46,4,17,17,17,16,17,17,17,17,18,17,17,17,16,17,17,17,17,17,17,17,17,17,17,16,17,20,14,34,45,3,18,17,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,16,17,17,17,17,44,3,18,17,17,17,17,17,17,17,17,19,15,17,16,17,17,17,17,16,17,16,17,16,17,17,17,17,17,16,18,17,16,17,17,18,18,45,8,16,18,17,18,17,19,17,18,17,17,17,16,17,17,17,17,16,17,17,16,17,17,17,17,16,18,18,45,4,18,33,17,16,17,17,17,16,18,17,15,17,17,16,17,18,17,18,18,17,17,16,17,17,17,17,16,17,17,17,23,17,16,17,17,17,30,18,15,18,17,18,17,20,16,17,16,17,17,17,16,17,17,17,16,17,17,18,18,18,17,17,17,16,17,43,4,18,17,16,17,17,18,18,17,16,17,19,16,18,16,18,16,17,17,16,18,16,17,17,17,17,16,17,16,17,17,17,17,16,17,34,36,24,15,20,23,36,25,13,16,19,37,13,23,20,21,16,28,10,18,43,15,16,15,17,18,17,18,14,17,45,18,31,14,47,6,18,33,17,90,16,17,17,17,17,17,17,17,16,17,17,17,20,14,17,17,17,17,17,17,17,16,18,17,16,48,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,48,17,17,17,17,17,35,18,16,17,17,17,16,17,18,16,17,17,17,17,17,17,17,17,17,17,17,17,49,17,19,17,20,16,17,17,17,17,21,20,22,12,18,18,26,13,15,17,16,18,17,17,17,16,17,20,17,16,17,16,17,17,17,17,17,16,17,17,17,15,19,15,17,17,16,17,19,17,16,18,13,25,15,15,16,17,16,18,16,47,3,18,17,17,17,17,17,16,17,17,17,17,17,17,17,16,34,18,17,18,17,17,17,16,17,17,17,49,17,17,17,18,17,16,16,17,17,17,17,17,17,16,17,33,12,4,18,17,17,16,17,17,18,32,3,18,18,20,15,16,17,17,17,17,16,18,16,17,17,16,17,17,17,16,17,17,17,16,18,16,17,17,17,17,16,17,49,3,19,16,17,17,17,17,16,17,19,16,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,49,33,18,17,17,16,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,18,17,18,17,17,17,16,49,17,17,17,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,18,19,16,17,17,16,48,17,17,17,17,16,18,16,17,18,17,17,16,18,17,16,17,17,17,16,17,17,17,16,17,17,16,18,16,48,17,16,17,20,14,19,16,18,24,20,17,16,16,17,32,18,21,23,21,18,11,16,21,16,16,48,18,16,18,17,17,16,17,17,17,16,17,17,17,16,17,17,16,17,17,17,17,16,17,17,16,17,17,17,48,4,18,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,49,18,15,17,17,17,16,17,17,16,17,17,17,16,17,17,16,17,17,17,17,17,16,18,17,17,16,17,17,49,33,18,16,17,17,17,16,17,17,17,17,16,17,18,17,17,16,17,17,17,17,16,17,17,16,17,17,48,16,17,16,17,17,17,16,17,17,16,17,16,17,18,18,16,17,17,16,17,16,17,17,17,16,17,16,17,48,17,17,16,17,17,16,17,17,17,17,16,21,18,17,17,19,19,16,26,17,19,21,27,18,18,24,10,18,17,19,20,12,17,19,19,17,33,11,22,14,17,16,17,34,18,26,21,15,17,21,12,18,16,18,17,18,18,18,17,17,24,12,14,49,4,17,17,17,16,22,22,15,17,16,17,17,18,18,15,16,17,16,17,17,17,16,18,16,18,16,16,17,49,4,17,17,18,18,17,16,17,17,16,17,17,18,17,17,16,17,17,16,17,17,18,18,18,18,17,17,16,48,17,17,17,16,17,17,16,14,17,17,17,16,17,17,16,17,18,18,17,16,17,34,17,17,17,17,16,49,18,16,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,31,14,21,19,20,17,16,12,16,18,18,17,17,17,17,17,17,18,15,17,17,17,16,22,18,20,17,17,17,15,13,17,17,17,17,16,24,12,15,24,23,13,22,20,16,16,23,21,17,18,19,21,25,12,21,22,16,16,23,17,21,16,17,16,17,22,20,31,17,38,19,22,16,17,16,17,17,16,17,17,18,17,16,17,18,18,18,17,16,17,18,26,15,23,21,22,19,16,17,21,26,20,7,16,17,17,17,17,18,17,17,16,17,17,17,16,17,17,17,17,16,17,17,19,15,16,17,17,17,16,17,17,17,17,16,17,17,50,3,17,15,18,16,18,16,17,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,17,17,25,21,16,23,15,23,56,20,25,15,18,17,17,17,16,17,17,17,17,17,17,16,17,17,16,17,27,22,20,21,23,27,19,18,14,17,17,17,17,17,17,17,17,49,4,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,18,16,17,17,17,17,18,17,48,16,17,17,17,17,17,17,17,18,17,17,17,17,18,16,17,17,17,17,17,17,17,17,17,17,17,18,48,17,17,17,17,17,35,18,17,16,17,17,18,17,17,16,17,17,17,18,17,17,17,17,17,17,17,49,17,17,17,17,17,17,18,17,16,17,17,17,17,16,17,16,17,17,17,17,17,17,17,17,17,17,17,17,49,17,17,17,16,17,17,16,18,17,17,17,39,20,18,18,22,27,25,3,24,33,20,17,24,22,21,21,17,21,12,21,18,18,14,15,15,17,17,16,17,20,17,30,26,17,17,17,15,51,28,23,29,21,18,15,27,26,16,15,26,25,16,27,22,21,16,34,19,12,22,17,19,12,21,18,13,16,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,16,17,17,17,17,17,17,17,17,17,17,16,17,49,17,17,17,16,18,16,17,17,17,16,17,17,16,17,16,17,17,17,17,17,17,17,16,17,17,17,17,17,48,4,18,17,16,17,17,17,17,17,17,17,14,17,34,16,17,17,17,17,17,16,17,18,16,17,17,17,17,48,17,16,18,16,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,16,17,48,4,18,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,16,17,18,16,17,17,17,17,17,17,48,17,17,16,17,17,17,17,17,17,17,17,17,16,17,18,16,17,17,17,16,17,17,18,16,17,17,31,48,4,18,17,17,16,17,17,17,18,18,26,17,16,17,18,17,16,17,16,17,16,17,18,17,16,18,16,17,48,17,17,16,17,17,16,17,16,17,17,17,16,16,17,17,16,17,17,16,17,16,27,26,4,18,16,17,16,48,17,17,16,17,17,16,18,17,16,18,16,17,17,16,17,17,16,17,17,17,16,17,16,17,17,27,3,28,48,16,17,16,17,18,17,23,25,17,17,16,30,18,16,16,17,18,16,17,16,17,18,16,17,18,16,48,16,17,18,16,17,17,16,17,16,17,17,16,18,16,17,16,17,18,16,17,16,18,16,16,17,18,23,26,23,20,15,16,17,15,28,24,20,23,14,21,27,13,17,17,16,22,14,12,19,18,21,17,17,15,16,20,16,19,15,41,14,14,21,11,33,10,18,15,14,17,16,24,20,56,6,17,17,16,17,17,16,17,17,16,33,17,17,18,17,16,17,18,16,17,17,16,17,16,17,17,16,17,47,4,18,24,24,16,17,17,16,17,18,24,25,17,16,17,18,16,17,18,16,24,25,17,16,17,17,47,17,16,23,26,17,18,16,17,18,16,17,16,17,17,16,17,27,27,3,17,17,17,16,17,18,16,17,51,17,16,17,16,17,17,16,17,17,16,17,16,17,16,17,17,16,17,18,16,17,18,16,17,17,16,30,37,23,17,22,15,26,27,16,52,29,27,16,26,21,3,16,22,16,18,16,17,16,18,16,18,16,18,16,17,16,17,16,17,16,18,47,29,19,8,28,31,12,16,27,17,18,16,16,17,16,17,16,17,16,17,16,17,16,17,16,17,17,46,17,16,17,27,30,30,16,25,7,20,39,4,22,26,17,5,27,9,21,16,21,10,18,29,5,31,16,16,28,6,30,16,16,29,5,39,21,16,16,17,16,17,18,16,49,17,13,18,18,16,17,18,16,17,16,17,18,16,17,16,17,18,16,17,37,28,19,16,17,18,18,27,18,19,17,18,16,17,18,16,19,18,28,18,24,27,25,15,26,25,17,26,27,11,28,27,16,25,25,16,26,27,11,28,27,51,30,7,16,28,32,2,17,18,18,16,17,16,17,16,17,18,48,18,15,14,17,22,23,21,23,22,22,18,16,20,62,18,17,28,18,16,20,17,22,19,20,19,29,4,23,16,13,19,16,18,17,19,16,22,21,20,22,19,18,18,21,17,17,28,17,7,19,37,20,18,15,16,17,16,15,18,15,16,18,15,16,17,15,15,17,16,17,17,18,16,18,16,17,18,18,37,14,17,21,20,23,11,23,16,14,17,26,23,17,15,19,15,16,15,17,14,18,14,18,15,16,14,18,14,16,17,17,21,18,62,19,14,16,16,17,17,18,17,18,17,26,18,26,12,25,20,18,21,17,21,22,23,19,22,26,19,23,21,86,20,18,17,25,20,15,17,20,20,17,19,14,22,18,18,24,15,26,12,22,13,16,19,16,24,20,18,25,20,20,19,24,13,29,12,18,17,18,17,17,16,18,16,17,16,17,17,17,16,18,17,19,21,17,16,18,15,18,17,17,17,17,17,16,17,17,16,16,17,17,17,36,16,18,17,17,17,22,12,24,11,16,16,20,17,45,12,17,16,17,16,14,22,16,15,18,20,14,17,16,17,17,17,17,16,21,13,19,16,18,20,18,18,15,43,11,16,16,15,16,16,17,17,16,17,16,17,17,16,17,17,16,18,17,16,17,17,16,17,17,16,17,17,16,44,4,17,18,17,16,17,16,17,18,17,17,17,16,16,23,12,16,16,17,17,17,16,17,17,16,18,35,17,43,4,18,16,17,17,19,21,17,17,20,15,16,17,18,17,17,16,17,17,16,16,17,18,17,17,16,17,17,17,16,17,16,17,18,18,18,17,17,16,50,3,17,15,17,17,17,17,16,17,17,16,17,16,17,25,18,17,16,17,16,18,16,17,16,17,17,17,16,45,3,17,15,17,16,17,16,17,17,17,17,17,16,18,17,17,16,18,19,16,17,17,16,18,17,17,17,17,35,44,3,17,17,17,16,17,17,16,17,17,17,17,16,17,17,16,17,17,17,17,14,17,16,17,17,17,17,17,29,12,7,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,16,17,18,17,19,15,16,17,17,17,17,17,16,17,17,19,15,16,17,17,17,16,17,17,18,15,17,17,17,16,17,17,16,19,22,16,16,15,16,16,17,17,17,16,17,17,16,18,16,17,39,13,19,23,16,18,18,17,23,18,19,22,15,20,29,18,27,14,21,17,21,16,14,15,28,16,20,16,23,15,16,17,17,16,17,17,23,16,16,17,17,19,18,21,15,14,16,19,14,18,17,12,17,22,17,21,12,16,16,17,23,13,19,16,22,19,13,17,16,19,18,18,20,15,32,18,3,17,16,17,17,18,16,17,17,17,17,17,17,17,17,17,17,17,17,17,18,17,17,17,37,15,17,17,17,17,16,17,18,16,18,16,17,17,17,17,17,17,16,17,16,18,16,17,17,17,20,31,18,3,18,15,18,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,43,4,18,16,17,17,18,17,16,17,17,17,17,16,17,17,18,17,16,17,17,16,17,16,17,17,17,16,31,20,20,30,4,16,17,17,17,16,18,17,16,17,34,18,17,17,17,16,17,18,16,17,17,17,16,17,17,16,17,18,49,17,16,17,22,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,48,17,17,17,22,14,16,17,16,17,16,17,17,17,16,17,17,16,17,17,20,18,32,3,18,15,22,29,4,19,18,29,32,3,16,15,18,17,18,18,17,17,16,17,17,17,19,16,17,17,16,17,17,17,34,18,17,16,17,17,17,49,17,16,17,17,18,18,18,17,18,17,17,17,16,17,17,17,17,17,18,15,17,16,17,17,17,17,17,43,4,18,17,16,17,17,17,17,16,18,17,17,18,18,17,17,16,17,16,16,17,17,16,17,17,18,17,17,16,49,3,18,16,18,17,17,17,16,17,17,16,17,18,18,17,17,16,17,18,18,18,18,18,18,17,17,16,17,44,3,17,16,17,19,30,16,17,16,17,17,17,17,16,17,17,18,18,17,17,16,17,17,17,16,17,17,19,13,16,16,15,16,16,16,17,11,16,15,17,16,15,15,15,15,15,15,17,15,17,16,15,15,14,17,38,5,59,187,9,249,6,14,18,15,21,13,22,12,23,15,19,11,18,16,16,16,15,22,14,18,14,18,19,20,111,15,15,17,16,31,17,13,17,16,14,17,26,15,14,17,18,15,17,18,15,17,16,17,16,18,16,17,17,17,17,16,17,16,18,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,16,17,17,16,16,17,17,17,16,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,17,16,17,16,17,17,15,16,17,34,18,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,17,17,16,17,17,17,17,16,17,17,17,16,16,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,18,18,17,17,16,17,17,16,16,17,17,17,17,16,17,17,17,31,17,17,17,16,17,17,17,17,16,17,17,15,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,16,16,17,17,17,16,17,17,17,17,16,17,17,16,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,16,17,16,31,17,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,18,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,18,18,18,18,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,18,16,17,17,16,17,17,16,17,17,16,17,17,17,30,17,22,15,12,17,23,13,17,16,18,21,19,23,24,12,31,16,19,18,16,30,25,39,10,18,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,13,18,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,18,17,17,16,17,17,18,18,18,17,16,17,17,17,17,16,17,17,17,16,34,18,17,16,17,17,17,16,17,17,17,17,16,17,17,17,21,24,14,17,16,17,18,16,17,17,17,21,17,15,13,17,16,17,16,17,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,18,16,17,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,18,16,17,17,16,17,18,16,17,17,16,17,17,16,17,18,16,17,17,16,17,33,16,16,17,17,16,17,18,16,17,17,16,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,16,17,17,16,17,16,17,17,16,17,18,16,17,17,16,31,17,17,16,17,17,16,17,18,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,18,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,16,17,17,16,17,16,17,17,16,17,18,16,17,17,16,17,18,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,31,17,16,17,17,16,17,18,16,17,17,17,16,17,16,17,17,16,17,16,17,17,16,17,17,16,17,18,16,17,17,16,17,17,16,17,16,17,17,16,23,14,16,16,18,13,18,14,15,16,17,16,17,17,16,17,16,17,17,16,17,17,16,17,18,16,17,16,17,21,15,15,20,18,19,25,8,19,20,33,21,20,20,24,14,19,23,15,16,18,16,26,25,17,26,25,15,27,25,42,24,18,16,17,17,17,17,17,17,16,30,20,11,26,19,17,20,18,18,20,18,23,18,16,16,27,27,11,28,28,15,26,22,24,14,26,26,16,26,25,16,26,22,25,12,16,17,17,15,65,15,19,19,13,17,16,18,12,17,17,17,16,18,17,17,16,13,16,17,17,17,16,17,18,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,18,17,17,17,17,16,17,17,33,18,17,16,17,17,17,16,17,17,16,17,17,16,17,17,17,16,17,17,17,16,18,17,17,17,16,18,17,17,17,16,17,17,16,17,17,16,18,16,16,17,16,17,17,17,16,17,17,16,17,17,17,16,18,17,17,16,18,17,17,16,17,17,16,17,17,17,16,17,17,17,17,17,16,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,21,24,16,13,16,19,14,36,13,17,17,17,17,16,17,15,16,17,15,16,19,15,17,19,14,17,21,11,18,16,15,18,17,16,17,17,16,17,18,18,17,16,17,17,17,16,17,17,17,16,17,17,16,17,17,16,17,17,16,17,16,18,17,18,17,16,17,18,17,16,17,17,17,16,17,17,16,17,17,17,17,17,17,16,17,17,17,16,18,17,17,16,19,16,17,16,18,16,17,16,18,17,17,16,17,16,18,16,31,17,17,17,17,16,17,17,17,16,17,18,17,16,18,16,17,16,17,17,16,18,16,17,16,17,17,17,16,17,17,17,16,18,17,17,17,16,17,16,18,17,18,18,17,17,16,17,17,17,16,17,17,17,16,17,16,17,18,17,17,17,16,18,18,17,17,16,18,18,18,17,17,17,16,17,16,17,17,16,17,17,17,16,17,17,16,17,16,17,17,16,17,17,17,16,17,17,17,17,30,16,17,16,17,17,16,17,18,17,17,16,17,16,18,16,17,16,17,18,17,16,17,18,17,16,17,18,17,16,17,19,17,22,17,18,17,17,16,17,16,17,16,17,16,17,17,16,18,17,16,17,15,18,16,17,16,17,17,16,17,17,17,16,17,17,17,16,17,16,17,18,15,17,17,17,16,17,17,16,17,17,17,16,17,28,12,21,19,18,20,22,49,17,25,17,18,13,15,15,34,17,17,16,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,17,16,17,16,17,16,17,18,17,16,17,17,16,17,17,16,17,16,17,17,16,17,16,17,16,17,16,17,17,16,18,17,16,17,16,17,16,17,16,17,17,17,16,17,17,16,17,16,18,17,16,14,18,16,17,17,16,17,16,17,16,17,17,17,16,17,17,16,17,16,18,17,17,30,18,16,17,17,16,17,16,17,17,17,16,17,16,17,17,16,17,17,16,17,16,17,17,16,17,16,17,17,16,17,17,17,16,16,17,16,17,17,17,16,17,17,16,17,16,18,17,16,17,17,16,16,17,17,16,17,17,16,16,17,17,17,16,17,16,16,17,16,17,17,16,17,16,17,23,18,16,17,14,17,15,15,17,17,17,16,17,17,18,17,17,17,16,17,17,17,17,16,17,34,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,18,17,17,16,17,17,17,16,17,17,18,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,18,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,31,18,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,18,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,20,18,22,17,61,22,21,23,28,22,12,19,19,19,11,16,17,16,17,17,16,17,17,16,17,17,17,16,17,17,16,17,17,17,22,22,20,16,16,20,18,28,18,17,24,18,15,17,20,24,16,20,25,29,16,25,22,27,16,21,20,21,32,30,23,15,26,318,16,21,206,18,25,15,25,17,18,18,23,18,24,17,32,12,26,23,16,16,31,24,16,18,19,29,30,15,27,21,83,29,24,21,32,27,64,29,13,19,26,19,18,21,18,17,20,21,16,23,15,32,14,27,16,18,14,13,19,37,31,25,16,15,18,16,29,21,28,16,31,21,17,15,22,24,21,21,21,19,18,30,12,22,18,27,18,34,11,20,18,22,14,18,17,20,16,16,20,18,14,17,17,16,16,18,15,16,19,15,16,17,17,23,20,20,15,25,28,22,20,14,25,18,16,43,29,24,15,16,25,25,32,15,17,18,37,28,24,58,18,25,26,18,15,27,24,18,19,39,18,17,27,28,18,15,26,25,15,26,25,16,26,23,24,11,28,27,16,26,25,16,27,25,16,26,27,13,26,28,15,27,27,16,15,18,14,16,18,11,16,24,48,4,18,19,15,17,17,18,17,17,17,17,16,17,17,17,17,16,17,17,18,18,17,17,17,17,16,17,17,45,4,27,17,16,17,16,17,17,16,17,18,16,17,17,34,18,16,17,17,16,37,22,15,24,28,16,26,27,15,26,26,15,26,22,17,19,16,17,16,18,16,17,16,17,16,17,16,17,16,17,16,17,18,47,17,31,12,15,17,17,16,17,17,17,17,16,17,17,18,17,17,16,17,17,18,17,20,17,18,30,14,16,18,17,16,22,20,14,19,19,15,18,17,20,17,21,19,15,18,21,16,18,19,15,17,17,19,18,17,16,17,17,16,22,27,17,16,19,16,19,21,16,16,13,16,18,17,17,23,22,17,13,16,16,16,24,16,14,17,15,14,15,16,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,33,24,16,17,17,17,15,17,17,17,17,16,17,17,17,16,17,17,17,16,17,20,16,16,17,17,18,18,17,17,23,41,29,8,18,17,17,16,17,27,15,16,16,20,15,18,16,16,17,16,20,17,32,17,16,13,15,17,48,17,17,17,16,17,20,20,16,16,16,15,18,16,16,17,16,16,16,12,16,16,18,17,16,16,18,17,17,48,17,16,17,17,17,18,16,18,17,16,18,17,16,16,18,16,17,17,17,17,17,16,16,17,17,17,18,16,17,17,17,17,16,17,17,17,16,17,17,17,21,18,15,16,16,18,24,25,15,16,16,14,19,14,18,16,16,13,16,16,18,16,17,17,34,16,17,16,16,17,17,28,3,18,16,17,17,17,17,17,17,17,17,20,16,18,17,17,16,17,16,17,17,17,16,16,18,19,15,17,17,16,17,17,17,16,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,44,3,18,17,17,16,20,15,15,17,17,16,17,17,17,16,17,17,16,17,17,16,17,17,15,17,17,17,16,17,17,16,17,17,16,17,17,35,43,12,16,17,16,17,17,15,17,17,15,17,17,16,17,17,17,16,17,17,15,17,17,17,16,17,17,17,16,17,44,4,17,17,22,13,16,17,16,18,17,17,16,17,18,15,17,17,16,16,17,17,17,16,17,17,17,17,16,17,22,48,3,29,14,18,17,20,17,18,18,20,21,18,15,18,16,17,17,17,16,17,18,18,17,16,17,17,17,17,17,17,16,17,17,17,17,16,18,34,18,18,15,18,17,16,17,17,17,17,16,17,17,17,17,16,22,16,27,27,16,17,16,17,17,25,18,15,19,21,17,16,19,16,19,15,16,19,15,16,17,17,21,18,16,14,16,17,16,17,17,17,16,17,17,17,17,20,16,19,15,16,17,20,15,24,15,17,16,18,16,17,19,18,32,19,18,17,17,17,17,17,17,17,16,17,17,17,18,17,16,18,16,17,18,16,17,17,17,45,22,17,21,17,24,20,21,21,23,21,22,18,21,18,12,22,15,17,15,16,20,13,17,15,17,18,15,16,21,12,16,20,28,18,23,18,20,17,17,17,16,18,16,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,18,17,17,16,17,17,17,16,18,48,17,16,17,17,17,16,17,17,18,18,17,17,16,17,17,18,17,17,17,16,17,17,17,16,17,17,34,52,17,17,17,16,16,17,18,17,17,16,17,18,17,16,17,17,16,17,17,16,17,17,17,16,17,17,17,17,16,48,17,17,16,17,17,17,17,16,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,47,17,18,18,18,17,16,17,18,18,17,17,16,17,17,16,17,18,17,16,17,17,17,17,16,17,17,17,16,48,17,17,17,16,17,17,18,18,18,16,30,18,17,16,17,18,17,16,17,17,17,18,17,17,17,16,17,47,17,17,17,16,17,17,17,16,17,17,17,16,17,23,19,34,16,28,19,13,17,17,17,17,17,17,47,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,18,17,17,17,17,16,17,17,17,48,17,17,17,17,17,17,17,17,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,33,48,17,17,17,17,17,17,17,17,17,15,18,17,13,16,17,17,17,17,17,17,17,17,17,16,17,17,17,16,49,17,17,17,16,17,17,17,17,17,17,16,16,17,17,17,17,17,17,17,17,17,17,17,17,16,16,17,21,13,22,23,19,28,21,21,14,22,20,18,22,19,16,16,19,18,15,18,15,26,27,21,19,15,16,29,27,22,27,16,16,19,15,22,19,20,11,17,17,17,37,15,19,27,22,14,13,20,19,17,17,30,19,29,12,36,17,13,14,17,17,16,17,17,17,17,17,17,17,16,17,17,17,17,17,16,16,48,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,18,16,17,17,16,47,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,16,17,16,17,17,17,17,17,17,16,17,17,48,17,17,17,17,33,18,18,17,17,17,17,16,17,17,18,17,17,17,16,17,17,17,17,17,17,16,17,48,18,17,18,17,17,17,16,17,17,17,17,17,17,17,16,17,17,17,17,16,17,17,17,18,17,17,17,17,48,4,18,17,16,17,17,18,17,17,16,17,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,17,17,47,17,17,16,18,16,17,17,17,17,17,16,17,17,17,17,17,17,16,32,17,17,17,17,17,16,17,17,48,4,18,17,17,16,17,17,17,17,17,17,16,17,17,23,16,17,16,17,17,16,17,17,16,18,16,17,18,47,16,17,17,17,16,17,16,17,17,16,17,16,17,16,17,18,16,17,18,16,17,17,16,17,18,16,17,18,47,17,17,16,17,18,16,17,17,16,17,16,17,17,16,17,17,16,17,18,16,17,17,16,17,18,16,17,18,47,18,16,17,30,17,17,16,17,16,28,21,17,15,18,15,16,17,16,16,17,15,16,15,15,17,17,17,17,16,17,17,17,17,17,16,18,17,24,20,18,14,16,18,12,17,42,27,17,18,17,18,17,17,17,17,17,17,17,17,26,31,13,28,17,16,15,16,24,6,20,20,41,20,25,16,23,15,16,27,14,24,23,26,22,19,23,17,23,31,31,30,29,30,20,16,39,22,19,22,19,26,28,16,62,19,19,15,20,21,28,23,64,22,13,18,27,21,17,18,20,21,28,28,29,17,25,20,12,22,18,24,21,20,14,25,16,15,18,26,16,14,18,13,16,29,16,16,22,17,17,17,22,33,22,7,21,17,51,22,17,17,16,17,17,16,14,18,40,17,15,21,16,16,17,15,16,16,17,15,16,20,18,17,17,16,17,17,16,17,24,17,27,10,22,25,22,17,23,14,17,17,17,17,33,18,16,18,15,16,20,12,18,17,17,16,16,19,22,19,20,21,19,21,12,29,21,16,52,18,18,25,13,16,16,19,13,17,17,18,17,16,18,16,17,17,17,17,17,17,17,17,17,17,17,17,50,16,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,48,3,19,16,17,17,17,17,16,17,17,16,17,17,17,17,18,16,18,34,18,17,17,17,17,17,17,17,49,17,17,17,17,17,16,17,17,18,16,17,17,17,17,17,18,16,17,17,17,17,17,17,17,17,17,17,17,48,17,17,17,17,17,17,16,16,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,47,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,17,47,17,18,16,31,18,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,48,17,18,16,17,17,17,18,16,18,17,16,17,18,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,49,17,16,17,18,16,17,17,17,17,17,17,17,17,18,16,17,17,17,17,17,16,17,17,16,17,17,17,17,48,17,17,17,17,18,16,17,17,17,17,17,17,17,17,18,16,18,30,17,17,17,17,17,17,17,18,16,48,17,17,17,21,26,21,16,17,16,17,15,46,14,25,12,30,13,20,19,21,14,18,16,16,17,15,23,16,18,17,22,15,16,13,15,17,16,17,17,17,18,16,17,16,17,17,19,17,15,16,24,11,20,17,16,15,19,22,15,15,18,15,15,18,15,16,19,14,16,20,12,18,19,13,17,16,17,17,17,17,17,17,17,17,17,17,17,17,48,32,18,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,18,48,17,17,17,16,17,17,17,17,17,17,14,16,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,48,17,17,16,17,17,17,17,17,17,17,17,17,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,48,17,16,17,17,17,17,17,17,18,17,17,16,17,17,31,18,17,17,17,16,18,16,17,17,17,17,17,49,17,17,17,17,17,16,17,17,17,17,17,17,17,17,19,16,17,17,17,18,16,17,17,17,17,17,17,49,17,16,17,17,18,16,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,48,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,48,30,18,17,17,16,18,16,17,17,17,18,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,47,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,18,16,17,17,17,17,17,17,17,18,17,17,30,9,19,13,16,16,21,16,33,15,17,17,14,15,17,24,15,16,19,14,17,19,14,16,20,19,17,16,17,14,16,16,15,18,15,16,17,16,15,15,15,17,17,16,19,45,6,28,16,13,18,15,16,14,16,17,17,16,18,16,18,17,16,17,17,18,18,18,17,16,17,17,17,17,17,16,17,17,18,18,18,18,18,18,56,17,22,18,14,16,18,16,16,15,18,18,18,17,16,17,18,18,17,27,22,24,17,16,17,17,21,21,24,22,31,24,16,14,15,15,16,24,17,18,23,13,15,19,13,17,17,17,17,16,17,17,17,19,19,20,12,17,16,15,26,30,14,17,17,17,18,34,18,18,16,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,17,17,17,17,16,16,17,17,17,17,48,17,17,17,16,17,17,17,17,18,17,17,22,12,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,48,21,15,31,12,27,18,30,17,23,34,10,24,29,12,22,19,18,20,20,17,20,12,17,17,17,17,17,18,18,18,28,12,18,17,64,22,21,23,17,45,7,19,18,25,16,16,16,17,16,17,20,17,17,43,12,17,15,17,17,16,17,17,16,17,18,17,16,17,17,16,17,18,17,16,17,17,16,17,18,17,16,17,18,17,13,18,20,17,19,17,16,17,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,16,17,44,3,26,20,18,18,22,21,21,13,16,18,16,17,34,18,16,18,16,17,19,19,16,18,18,15,19,13,15,17,17,20,16,16,17,16,16,21,25,28,16,20,21,15,19,15,16,16,16,18,17,17,17,18,16,18,17,16,43,16,15,16,18,16,16,19,16,18,19,14,19,16,16,20,14,16,19,13,24,15,16,20,19,14,20,18,21,13,18,14,16,23,13,18,17,21,15,16,20,23,11,17,18,22,18,18,17,17,22,14,18,14,16,18,33,17,15,17,14,16,17,17,16,17,18,18,16,16,17,17,17,16,17,19,19,16,17,17,17,17,17,21,12,17,17,16,17,17,16,16,17,17,17,16,17,18,17,18,18,16,17,17,18,16,17,17,17,17,17,16,18,16,17,18,16,17,17,17,17,17,17,17,17,17,17,16,17,50,17,17,17,17,17,17,17,16,18,16,18,16,17,17,16,17,16,17,18,17,16,17,17,18,16,17,39,30,4,15,16,16,17,17,18,19,22,26,22,20,14,15,24,12,18,17,22,12,15,17,19,15,18,17,21,17,16,18,16,17,21,14,16,17,17,16,17,17,16,17,17,17,16,17,18,25,21,21,17,17,19,21,21,22,16,16,44,3,18,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,18,16,17,17,18,17,17,17,17,16,17,35,16,17,17,18,16,17,17,15,17,17,17,17,17,17,17,17,48,18,16,33,13,6,16,17,16,17,16,17,17,17,16,16,16,17,17,17,17,16,17,16,17,17,16,17,17,17,17,16,17,17,47,17,17,15,17,17,17,15,17,17,15,17,18,16,17,17,17,16,17,17,15,17,17,15,18,16,17,16,17,17,21,15,17,16,18,16,17,17,17,15,17,17,17,16,17,17,17,17,17,34,31,19,3,17,15,17,18,16,17,17,17,17,17,17,16,17,17,17,17,17,16,18,16,17,17,17,17,16,18,19,14,17,17,16,17,17,15,17,17,17,16,17,17,16,17,17,16,17,17,17,16,20,31,18,2,18,15,16,17,17,16,12,18,16,17,17,16,18,16,17,16,17,18,18,17,16,17,17,20,26,87,19,22,13,24,12,15,19,21,12,17,16,17,17,16,18,16,17,17,33,18,17,16,44,4,18,17,16,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,15,17,48,4,18,16,17,17,17,16,17,18,16,17,16,17,17,17,16,17,17,17,19,14,17,17,16,17,17,16,16,17,17,16,17,17,17,16,21,43,23,32,3,19,17,21,31,3,19,17,21,16,16,16,17,17,17,16,17,17,17,17,17,17,16,17,17,17,33,18,17,17,17,16,17,17,18,17,48,3,18,17,17,17,17,16,17,17,17,17,17,17,16,17,17,16,17,17,18,18,17,17,16,17,17,18,17,50,16,17,17,18,17,17,17,17,16,18,19,15,22,17,18,16,17,19,21,18,21,21,17,22,12,26,12,15,17,17,18,15,16,18,16,19,14,19,16,18,17,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,21,15,18,37,17,17,17,20,16,47,3,18,17,16,17,17,15,17,17,17,17,16,17,17,17,17,16,17,17,15,17,17,17,17,17,16,17,17,17,48,17,16,16,17,17,16,17,17,17,16,17,17,16,17,17,17,17,17,16,18,16,17,17,16,17,17,17,17,47,17,17,17,16,17,17,17,16,17,17,17,18,17,16,17,17,16,17,17,17,16,17,17,17,17,15,17,17,48,17,16,17,17,17,17,33,18,17,16,17,18,16,16,17,17,17,16,20,15,16,17,17,16,17,17,17,48,19,17,17,21,21,23,30,21,17,27,32,19,29,19,25,32,31,4,26,34,30,17,17,15,18,16,17,23,33,18,22,25,18,15,33,17,18,13,16,18,17,17,24,10,19,31,14,15,29,5,19,27,6,30,14,19,11,29,16,15,35,18,15,17,14,18,16,16,22,25,13,23,23,21,24,14,21,13,65,17,18,16,17,17,16,17,17,17,17,16,17,17,16,16,17,18,18,17,17,17,17,23,21,16,21,20,24,11,15,17,17,47,17,17,17,17,16,17,17,17,17,17,16,17,16,18,16,17,17,17,17,17,16,17,17,16,17,17,17,17,47,17,17,16,17,16,17,17,17,17,16,17,16,17,17,17,17,16,17,16,17,17,16,17,17,16,18,16,17,47,18,17,17,17,16,17,16,17,34,18,16,17,17,17,17,17,16,17,17,17,16,17,17,16,17,17,17,47,17,17,18,16,17,17,17,16,18,17,17,17,17,17,17,16,17,17,16,17,18,17,17,17,16,16,17,16,48,17,17,17,17,16,18,16,17,17,16,16,17,19,18,14,16,16,20,15,16,24,11,16,17,18,16,17,17,17,17,17,16,18,17,17,17,16,24,35,19,14,15,26,27,23,17,25,18,27,17,18,36,16,17,17,21,23,28,16,17,27,7,52,9,19,18,18,17,16,17,18,18,17,17,17,16,17,18,18,18,18,23,15,34,11,25,14,19,14,19,16,18,44,3,18,17,16,17,17,17,16,17,17,18,18,18,17,17,16,17,17,18,17,17,16,18,16,16,17,16,17,49,16,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,17,16,18,16,48,35,18,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,18,16,17,18,17,17,16,17,48,17,17,16,17,17,17,17,17,16,17,19,16,17,17,16,17,17,17,17,17,16,18,16,17,17,17,16,17,48,17,17,17,16,17,17,18,17,17,17,16,18,16,17,17,17,17,17,16,17,17,17,17,16,18,16,17,17,49,18,16,17,17,17,16,17,17,17,17,16,18,16,17,31,17,18,16,18,17,17,16,17,17,17,17,17,17,47,17,17,17,17,17,16,18,16,17,17,17,17,17,17,16,17,17,17,17,16,18,16,17,17,17,16,17,17,49,3,18,17,17,16,18,18,16,24,28,20,4,21,45,5,29,27,15,26,25,16,26,26,15,26,27,15,26,26,15,27,25,14,17,21,17,16,55,17,16,17,17,16,17,16,17,16,17,17,16,16,16,17,16,18,16,34,17,17,16,17,16,17,17,16,17,47,18,17,16,17,16,18,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,48,24,15,26,26,16,26,25,16,27,23,17,26,24,16,26,5,23,17,26,24,16,26,59,3,31,25,16,26,24,17,16,15,16,27,25,16,16,17,17,17,17,16,17,17,17,17,13,18,49,17,17,16,17,17,17,17,17,16,18,16,32,17,17,17,17,17,17,16,17,17,17,17,16,17,17,18,48,16,17,17,17,18,17,17,17,16,17,17,17,17,17,18,17,17,16,17,17,17,17,17,17,17,16,17,17,48,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,23,21,12,17,16,18,16,22,22,25,34,6,23,25,23,20,17,16,17,21,15,21,15,21,20,17,18,16,17,17,16,18,16,16,17,16,17,16,17,36,16,17,16,16,17,18,19,49,4,17,17,17,17,16,18,17,17,16,17,18,16,17,16,16,17,18,17,16,17,17,17,17,16,17,17,16,18,48,17,17,16,17,17,17,16,18,17,17,17,16,17,16,17,17,16,18,18,17,16,17,17,17,17,16,17,17,50,3,23,15,17,16,17,17,17,16,17,17,16,17,17,16,18,18,17,16,17,17,16,17,17,17,17,16,18,48,20,21,29,40,18,24,33,32,3,19,14,22,32,3,18,18,18,18,30,5,18,17,17,17,16,18,17,25,14,17,17,17,23,16,33,17,18,22,34,18,18,20,18,16,16,17,16,17,16,17,16,17,21,26,19,21,17,17,19,18,24,31,22,18,20,19,20,20,23,19,17,16,21,14,15,20,14,26,21,3,17,17,16,16,17,17,16,18,16,17,18,16,16,17,17,16,17,16,17,16,17,18,16,33,17,47,17,18,17,16,17,16,17,16,17,16,17,17,16,16,17,16,17,16,17,17,16,17,16,17,16,17,17,17,51,17,16,17,17,16,17,16,17,16,17,16,17,17,16,17,16,18,16,17,17,16,15,17,17,16,18,16,17,16,48,16,17,16,17,16,17,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,17,16,17,16,17,16,17,48,16,17,18,16,17,16,17,18,16,31,16,17,17,16,17,16,16,17,17,16,17,16,17,16,16,17,18,47,18,16,17,16,17,16,17,16,17,16,17,16,18,16,17,16,17,16,17,16,16,17,17,17,26,22,18,29,8,17,17,17,24,22,16,27,26,26,20,19,17,14,19,15,19,18,27,4,28,12,24,16,15,17,17,17,16,17,16,17,17,17,16,18,16,17,23,16,21,15,12,15,16,22,18,26,21,3,17,24,16,33,23,24,22,17,26,23,24,22,16,18,20,26,4,17,17,18,16,17,49,17,16,17,17,16,16,17,16,17,17,16,17,16,17,16,17,16,17,16,18,16,16,17,16,17,17,16,17,48,18,16,17,16,17,18,16,17,16,17,16,17,17,16,17,16,17,16,17,17,16,17,16,17,16,17,16,17,48,18,17,16,16,17,17,16,17,16,18,16,17,17,16,16,17,17,16,17,16,17,16,33,17,16,32,24,15,19,17,25,23,38,3,24,18,13,24,16,18,13,17,15,17,23,18,21,17,16,17,26,20,21,16,17,19,14,18,12,19,20,16,16,17,16,18,21,18,14,17,17,17,23,31,16,25,24,22,21,49,19,20,18,17,18,18,23,26,19,16,16,27,17,21,20,18,21,20,22,22,17,15,20,19,18,17,19,17,19,18,18,19,17,19,17,19,18,18,28,17,20,27,111,29,20,17,16,17,16,17,16,16,17,17,17,16,17,17,17,16,17,17,15,17,17,17,17,17,17,17,16,17,16,49,17,17,17,16,17,17,17,16,17,16,18,16,17,17,16,17,17,17,16,17,16,17,17,16,17,17,16,17,50,3,17,15,18,16,17,16,17,17,17,16,17,16,17,17,17,16,17,15,18,16,17,16,17,16,18,16,15,17,49,17,16,17,17,16,17,16,17,17,32,18,16,16,17,17,17,16,18,16,17,16,18,16,17,17,16,17,47,4,18,16,17,16,17,16,18,16,16,16,17,16,17,17,16,17,17,16,17,16,17,17,16,16,18,16,16,17,48,16,17,16,16,17,16,16,17,17,17,16,17,15,18,16,16,16,17,16,18,16,17,16,17,16,18,16,16,49,17,17,17,16,18,17,16,17,16,17,17,17,16,17,21,16,14,16,14,16,17,19,30,17,17,17,16,47,4,17,17,17,16,17,16,18,16,17,17,17,16,17,17,16,17,17,17,16,17,17,16,17,17,19,19,11,36,7,19,13,16,21,21,15,18,21,21,20,26,13,19,17,14,17,17,16,17,18,22,16,16,21,13,15,18,17,17,16,17,17,17,17,16,16,17,17,17,18,18,17,19,15,17,16,17,16,17,17,17,19,48,7,17,17,17,16,18,16,17,17,17,16,34,18,16,16,18,16,17,17,17,17,13,17,17,16,17,16,17,48,4,18,16,17,16,18,16,17,17,17,16,17,16,16,17,17,17,17,17,16,16,16,17,17,17,17,16,17,17,49,16,17,16,18,16,16,17,16,17,17,16,17,17,17,17,17,17,16,17,17,16,17,16,17,17,17,17,16,48,17,17,17,16,17,16,17,15,18,16,17,17,16,17,17,17,17,22,16,16,28,29,5,19,50,17,23,21,13,13,17,17,17,16,17,17,17,17,17,17,16,17,17,24,20,16,24,15,21,21,13,18,17,25,15,25,16,18,20,24,35,21,15,26,22,20,24,24,22,19,22,17,18,22,18,21,27,18,15,18,18,20,17,24,16,19,22,16,25,19,25,20,22,16,22,17,17,44,18,19,16,20,15,18,14,22,14,19,17,20,20,31,20,18,19,17,21,15,20,18,17,16,30,19,19,15,16,18,16,15,18,16,16,17,16,18,18,48,5,16,17,17,16,17,16,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,16,17,16,45,3,17,16,17,18,18,18,19,20,10,18,14,16,17,16,18,20,19,19,18,15,16,18,14,15,18,13,16,18,17,17,31,24,17,16,17,16,17,16,17,16,17,17,16,17,16,17,17,17,16,17,16,18,17,34,16,17,17,16,17,44,3,16,17,18,16,16,17,16,27,17,16,18,20,19,17,17,17,24,18,18,31,21,26,16,20,14,20,17,18,18,17,21,16,19,16,19,17,23,16,16,17,17,19,16,16,16,18,16,18,17,16,17,18,17,17,16,17,17,16,22,20,17,18,17,25,18,19,15,15,14,44,3,18,17,17,17,17,17,17,17,17,17,16,17,17,17,17,16,17,16,17,17,17,35,18,16,17,17,17,17,17,17,17,19,18,26,26,17,17,17,17,17,16,18,17,16,17,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,18,16,46,2,18,15,18,16,17,17,16,18,16,18,17,16,17,18,17,17,16,17,17,17,17,17,16,19,20,18,16,45,4,18,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,18,16,17,17,17,17,17,18,17,17,34,48,16,16,17,17,17,18,18,17,17,17,16,17,17,17,17,17,18,17,17,17,11,18,17,17,16,17,17,17,48,3,18,17,17,17,16,17,17,17,18,17,17,17,17,16,17,17,18,17,17,17,16,17,17,17,17,17,16,48,17,17,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,17,17,17,18,17,17,17,17,16,17,17,56,16,16,17,17,16,17,17,17,17,17,16,32,18,17,17,16,17,18,16,17,17,17,17,17,17,16,50,17,17,16,18,16,17,17,17,17,17,17,17,17,16,17,17,17,17,17,18,15,16,17,17,17,17,17,21,15,20,16,19,12,19,16,14,17,18,17,17,17,17,17,18,16,18,17,17,16,17,17,17,17,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,18,17,16,16,17,17,17,17,17,16,17,17,35,17,17,17,17,17,17,17,17,16,17,17,17,17,18,17,17,16,16,17,17,18,47,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,16,49,4,28,21,17,17,17,17,16,17,17,17,22,16,39,3,35,25,15,26,35,17,20,18,20,27,17,16,15,14,15,17,19,15,16,17,23,15,16,20,14,15,18,17,17,18,17,16,17,32,18,17,16,17,17,17,17,16,17,19,17,18,17,19,12,15,18,16,17,16,17,27,40,16,17,16,17,16,17,18,16,17,18,16,17,16,17,16,17,16,17,18,16,17,16,17,16,17,18,16,50,16,17,18,16,18,16,17,16,17,17,16,18,16,16,17,16,17,16,17,16,17,16,17,16,16,17,16,17,47,17,18,16,16,17,17,16,16,32,10,17,18,15,17,17,17,16,17,17,32,18,17,16,17,17,18,16,48,17,17,16,17,17,15,17,17,17,17,17,17,17,17,16,17,17,17,16,17,17,16,17,17,16,16,17,16,48,17,17,17,17,17,16,17,17,17,16,17,17,16,17,17,18,17,17,17,16,17,17,17,17,17,16,17,17,48,16,17,17,17,17,17,17,17,17,17,18,16,17,16,17,17,16,17,17,17,16,17,17,17,16,17,17,17,47,17,17,17,17,31,18,16,17,17,17,18,17,16,17,17,17,17,17,16,17,17,16,18,16,17,17,17,48,17,18,18,16,17,17,16,17,17,16,14,18,17,16,17,17,18,17,17,16,17,17,17,17,21,14,15,17,16,17,21,16,18,16,23,14,16,19,23,15,18,22,18,24,16,20,18,16,17,15,27,24,15,26,28,18,9,28,28,3,28,26,15,27,43,16,22,19,20,18,18,20,22,15,16,14,34,51,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,16,18,16,17,17,17,17,49,17,16,17,17,17,17,17,17,17,16,17,17,17,17,18,17,17,17,17,17,17,17,17,16,17,17,17,17,48,17,17,17,16,17,17,17,17,17,16,17,17,17,18,17,17,17,16,17,17,17,17,17,16,17,17,17,17,48,3,17,17,16,18,16,17,17,17,17,16,32,17,31,11,17,15,26,24,23,36,14,19,23,18,16,17,17,17,17,25,15,23,24,35,9,17,16,17,16,17,18,17,16,19,16,18,17,16,17,21,19,17,20,21,11,16,18,18,20,51,6,18,16,17,17,16,17,17,16,17,17,17,16,17,17,16,17,17,18,17,18,16,18,16,17,22,17,18,17,18,17,20,23,26,27,14,27,33,15,3,21,19,19,21,12,17,16,18,17,17,38,18,13,22,18,18,14,15,17,18,17,17,24,16,16,27,22,16,23,9,19,22,7,19,21,18,32,21,20,13,36,20,21,22,16,17,23,23,23,17,20,23,20,22,28,23,21,21,14,19,17,16,17,17,16,17,17,16,16,17,17,17,16,17,17,17,16,17,22,19,17,20,25,21,19,14,34,21,24,11,17,16,17,17,17,17,17,16,17,17,17,16,17,17,22,15,47,17,16,17,39,16,16,15,17,18,16,17,16,17,17,17,17,17,16,17,17,17,17,18,17,17,16,17,17,17,17,17,16,17,17,17,17,18,18,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,15,17,17,16,17,17,18,15,17,17,48,4,18,16,17,17,17,17,16,17,17,17,16,17,18,16,17,16,26,18,15,20,12,21,17,15,16,14,16,47,17,17,16,17,17,35,18,17,16,17,17,17,16,17,17,16,16,17,17,17,16,17,17,15,17,17,17,47,4,17,17,17,17,16,17,17,15,17,17,17,16,17,17,17,17,16,17,17,17,16,17,15,17,17,17,17,17,48,17,16,17,17,17,17,16,17,17,17,15,17,17,17,17,16,17,17,17,17,16,18,16,17,15,17,17,17,48,4,17,17,17,16,17,17,15,18,16,17,15,17,17,17,17,17,16,31,18,17,16,17,17,17,17,16,17,48,17,17,17,16,17,17,16,16,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,62,17,18,29,16,15,20,11,18,49,7,13,12,34,18,21,16,22,25,18,17,15,17,13,16,21,15,21,18,20,11,18,20,12,17,18,17,16,17,17,16,17,20,17,16,17,15,17,17,16,24,14,20,22,20,13,20,17,18,17,49,33,18,16,18,14,16,16,14,17,18,17,17,16,17,17,17,17,17,17,16,17,17,17,17,17,17,17,49,16,17,17,17,18,17,17,17,16,17,17,17,17,17,17,18,17,18,17,17,18,17,17,18,17,18,17,55,17,17,16,18,17,17,16,17,17,17,17,16,18,17,18,17,17,16,17,17,17,16,17,17,17,17,16,17,55,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,31,17,17,17,16,17,17,16,17,17,17,16,17,48,17,16,17,17,17,16,17,17,17,16,17,17,16,17,17,17,16,17,18,17,16,17,16,16,17,17,17,16,48,17,18,18,18,18,17,16,17,17,18,18,18,17,16,17,17,18,16,17,17,17,17,16,17,17,16,17,54,16,17,18,17,16,17,18,17,16,17,18,17,16,17,17,25,17,17,16,15,15,15,18,17,16,17,17,17,49,31,17,17,18,17,16,17,17,17,21,17,18,17,16,17,17,17,17,17,16,17,17,16,17,17,16,17,49,16,17,17,16,17,17,16,17,17,17,16,17,17,21,30,11,25,23,15,12,20,22,18,26,20,16,21,25,32,29,15,20,30,16,18,33,22,13,17,17,16,21,10,19,20,15,26,21,11,18,14,21,21,22,30,33,18,17,50,4,22,12,16,16,17,17,17,16,17,17,18,18,34,18,17,17,16,17,18,17,17,17,17,16,18,17,49,17,16,17,18,18,18,17,17,16,17,21,14,18,15,15,20,21,10,18,24,14,15,18,17,17,17,16,50,17,17,16,17,17,18,17,17,17,17,16,17,17,17,17,14,17,17,16,17,17,17,18,17,17,17,17,16,49,17,17,16,17,17,17,16,17,17,18,18,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,33,54,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,17,16,18,16,17,17,26,27,13,21,16,14,17,16,24,22,29,11,16,16,24,15,23,19,14,22,12,17,17,16,25,16,22,17,27,12,13,17,16,17,18,17,17,16,26,17,17,17,16,17,23,16,19,19,23,14,14,23,17,18,16,17,18,16,17,17,17,17,18,17,17,18,16,17,17,17,17,17,17,17,17,17,17,34,18,16,17,49,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,50,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,49,17,17,17,17,17,17,16,17,17,17,17,17,17,16,17,17,18,18,17,17,16,17,17,17,17,17,17,17,47,4,18,17,17,16,17,17,17,31,18,16,17,17,18,18,17,17,16,17,17,18,18,24,21,19,17,11,18,19,18,20,22,49,5,22,12,15,17,17,17,16,17,17,17,17,17,17,17,17,17,18,16,17,16,16,18,17,17,17,17,17,48,18,17,16,17,17,17,17,16,18,17,16,18,17,17,17,17,16,18,17,17,17,18,16,17,18,16,17,17,54,17,17,17,17,16,17,18,17,17,17,17,17,16,17,17,17,17,34,18,17,17,17,17,18,16,17,17,47,17,17,17,17,17,17,16,17,17,15,17,17,17,17,17,17,18,16,17,17,17,16,18,17,17,18,17,17,50,17,16,18,16,17,17,17,17,17,16,18,17,17,17,16,17,15,17,17,17,17,17,18,17,17,17,17,17,49,17,17,19,16,18,17,16,17,17,17,17,17,17,17,17,17,18,17,17,17,17,16,18,18,18,18,16,48,17,16,17,31,18,17,17,17,17,17,17,17,21,38,18,19,15,18,22,19,21,22,27,18,19,23,15,18,17,13,23,19,20,15,16,17,17,17,16,17,18,17,20,17,19,17,19,11,16,19,15,17,16,17,17,17,16,17,17,18,17,16,17,17,17,16,17,17,16,17,17,18,18,13,18,16,17,17,17,17,16,17,48,17,16,17,17,18,18,18,18,18,18,17,17,16,17,18,18,17,16,17,17,34,18,17,16,17,17,50,17,18,18,17,17,17,16,17,18,17,16,17,18,19,16,17,16,17,18,17,17,16,17,17,17,16,18,47,18,17,18,18,17,17,16,17,18,16,18,18,18,17,17,17,17,16,17,18,18,17,18,17,17,16,17,49,4,17,17,17,18,17,17,16,17,17,18,18,17,17,18,17,17,17,16,17,17,18,17,17,17,16,17,17,54,17,17,17,16,17,17,17,18,31,18,17,16,17,17,18,18,17,17,17,16,17,17,18,18,17,17,17,48,3,18,17,17,17,17,16,17,17,17,18,17,18,18,17,17,17,16,17,17,17,18,17,17,17,16,17,17,55,17,16,17,17,17,17,17,16,17,21,29,15,15,16,18,13,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,18,17,17,17,17,16,48,17,17,18,17,17,17,17,18,17,17,17,34,18,16,17,17,17,17,17,17,17,17,16,17,17,17,16,50,17,16,17,17,17,16,18,16,17,18,16,17,17,17,17,17,16,17,17,17,17,17,17,18,16,17,17,16,49,17,17,17,17,17,17,16,18,17,17,16,18,16,17,17,18,17,16,18,17,16,17,17,18,18,17,17,61,40,15,18,21,18,23,22,20,22,18,23,25,16,17,18,18,17,19,16,62,25,15,19,26,15,15,33,18,25,14,34,15,26,27,19,29,18,24,18,36,19,26,25,21,19,15,25,19,14,16,16,17,16,17,28,16,13,16,14,17,16,17,18,17,17,17,17,18,16,17,16,17,17,17,17,17,17,19,15,23,17,16,24,25,21,16,13,18,15,16,18,15,16,21,17,16,16,20,11,18,19,14,16,18,16,17,18,17,17,17,20,15,16,17,17,17,16,17,17,17,23,18,20,20,19,19,44,25,18,22,47,15,27,29,26,24,13,20,26,17,26,12,18,17,18,31,22,8,18,21,21,18,20,17,23,16,20,21,13,19,14,23,11,28,20,18,18,15,21,27,20,26,20,22,22,25,20,28,16,25,21,16,18,16,16,18,17,16,16,16,16,16,16,18,17,17,16,21,15,21,17,31,31,20,29,22,43,17,19,21,13,21,17,18,22,32,15,32,15,21,21,20,21,24,20,19,79,19,19,19,22,25,22,13,18,15,28,17,18,15,20,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,16,17,18,16,17,17,16,16,17,17,17,17,17,17,17,17,16,16,18,16,17,18,16,17,17,17,16,18,16,17,18,16,17,17,18,17,17,17,17,17,18,16,17,17,17,17,17,17,17,16,16,17,17,17,17,17,17,17,35,16,17,17,17,16,17,17,17,17,17,17,17,16,17,17,18,16,19,17,17,17,17,17,17,16,17,17,17,17,17,17,17,20,16,17,16,17,17,18,16,17,17,24,17,14,25,15,18,25,20,19,15,16,19,18,14,15,15,17,17,17,17,21,17,16,20,12,17,29,37,16,18,16,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,18,16,18,16,17,19,16,17,49,33,18,17,17,16,17,17,16,18,16,17,17,17,18,17,16,18,18,17,18,16,18,16,17,17,16,17,47,17,16,17,16,17,17,17,17,17,16,17,17,16,17,17,16,17,17,16,17,17,17,16,17,16,17,17,17,47,17,17,17,16,17,18,17,17,17,16,18,20,22,19,19,23,23,22,15,16,14,23,19,27,18,17,20,20,17,21,11,17,13,15,17,16,21,26,26,16,22,22,17,30,17,17,16,17,17,17,17,17,15,17,17,27,17,17,17,17,17,17,17,28,15,27,19,14,17,17,17,17,17,36,17,21,17,27,28,26,23,3,31,15,14,16,27,5,31,17,15,16,27,6,30,17,16,20,12,47,5,17,16,17,16,17,16,17,16,17,16,16,17,16,17,16,16,17,18,25,4,18,16,18,16,17,17,16,17,49,16,17,16,17,17,16,17,17,17,16,15,17,17,35,17,17,16,17,17,17,17,17,16,17,17,16,17,49,18,16,17,18,16,18,17,16,17,17,16,17,18,17,17,16,17,16,17,17,17,16,17,17,17,16,17,17,52,17,16,17,17,16,17,18,16,17,17,17,16,17,16,17,17,17,16,17,17,17,17,16,17,17,16,17,17,16,50,16,17,17,17,17,16,17,17,16,17,17,17,16,17,17,18,17,16,17,17,14,17,17,17,17,17,31,53,17,17,16,17,17,18,16,17,17,16,17,17,17,16,17,18,18,17,16,17,16,17,17,16,17,17,17,16,17,48,18,16,17,18,16,17,18,16,17,17,16,17,16,17,16,17,17,16,17,17,16,17,18,16,17,17,16,17,48,16,17,16,17,18,18,16,17,17,17,16,17,17,16,17,16,17,18,16,17,18,16,17,18,16,17,18,16,48,4,18,16,17,17,16,17,17,16,17,31,17,17,17,17,16,17,17,16,17,17,16,17,17,18,18,17,17,54,17,17,17,16,17,17,17,16,17,17,18,17,17,16,17,18,18,17,16,17,18,16,17,17,18,17,16,17,47,4,18,16,17,18,17,16,17,17,17,16,17,16,32,30,13,24,20,21,22,19,21,21,19,17,20,19,21,23,24,28,27,17,17,39,18,17,17,17,16,30,29,17,19,18,21,19,19,21,20,26,26,42,18,18,17,23,20,14,23,17,21,20,22,17,24,33,18,34,34,20,20,20,21,18,34,26,8,23,27,54,20,14,24,12,13,38,14,23,18,20,28,18,20,16,21,32,24,24,31,19,41,17,18,20,19,23,26,39,13,21,23,22,24,20,18,20,19,19,22,20,21,22,28,20,21,31,15,19,26,24,12,30,17,17,16,18,15,17,14,33,9,19,18,16,16,26,31,28,33,26,23,44,24,19,22,17,16,13,16,14,16,17,17,16,17,16,16,17,16,17,17,21,17,12,17,17,17,27,14,19,14,17,14,16,33,8,27,22,13,15,16,16,20,14,18,19,23,17,23,16,16,16,15,16,16,17,17,17,17,20,16,16,31,4,20,14,16,16,14,16,17,30,6,19,13,17,16,18,16,21,16,18,16,23,17,18,17,16,18,16,17,16,17,17,20,14,25,20,30,13,24,68,17,17,48,7,21,13,18,16,18,17,16,17,17,16,17,17,17,17,17,17,17,16,17,17,17,17,16,18,16,17,17,47,3,17,16,16,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,15,17,17,17,17,16,17,48,4,18,17,17,16,17,17,17,17,17,16,17,17,17,17,17,16,16,17,17,17,16,16,17,17,17,17,17,16,48,17,17,16,17,17,17,17,33,16,17,16,17,17,14,17,17,17,17,17,17,16,17,17,16,17,17,17,48,16,17,17,17,16,17,17,17,17,16,17,17,17,15,17,17,17,17,17,17,17,17,16,17,17,16,16,17,48,3,18,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,15,49,4,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,32,16,16,16,17,17,16,17,48,17,16,17,17,17,17,16,17,17,16,18,16,17,27,5,30,16,31,9,17,16,17,18,19,23,19,21,21,21,23,11,18,18,16,28,15,15,15,18,19,14,22,11,18,18,14,16,17,16,16,17,15,16,17,20,19,14,16,17,17,17,20,15,16,17,16,17,17,17,22,13,49,17,17,17,17,16,17,17,17,17,16,17,17,17,18,17,17,16,17,17,35,18,16,17,17,16,17,17,48,17,16,17,17,17,17,16,17,17,17,18,18,18,17,17,16,17,17,18,18,17,16,17,17,18,17,16,49,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,48,17,16,17,17,16,16,17,17,17,16,17,18,17,17,16,17,18,17,16,17,17,17,16,17,17,17,16,17,48,18,17,17,16,17,31,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,18,18,17,47,17,18,17,17,16,17,17,16,17,17,17,16,17,17,18,17,18,37,17,21,19,14,20,12,15,19,16,16,16,17,18,17,17,17,16,17,17,18,16,17,16,17,17,16,17,48,17,17,16,17,17,17,16,18,16,17,18,17,16,17,17,16,17,17,17,16,17,18,16,17,17,17,16,17,48,4,18,35,17,17,16,18,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,20,42,23,21,17,21,17,17,33,21,16,23,13,17,20,29,7,20,18,17,18,18,17,17,18,17,18,23,18,16,19,16,17,14,20,17,19,18,18,18,18,17,18,17,49,18,17,18,17,18,18,18,18,17,18,18,18,18,17,17,17,18,18,18,18,18,18,18,18,18,17,49,18,18,17,18,18,17,18,38,19,18,28,7,18,17,17,18,17,18,19,18,18,18,17,18,18,16,23,18,17,18,17,17,17,16,17,17,17,17,18,17,17,17,17,17,17,18,17,17,17,17,17,18,17,17,17,47,48,17,17,17,17,16,17,17,17,17,18,17,17,17,16,17,16,17,17,16,17,17,17,17,18,17,17,17,17,48,17,18,17,17,17,17,16,26,21,20,21,17,20,23,20,18,20,20,17,24,18,38,28,19,21,18,16,21,17,33,8,25,22,26,19,18,27,20,19,22,18,25,17,56,4,17,19,19,23,20,18,28,17,22,22,19,18,19,19,18,24,16,18,20,24,20,16,19,47,21,11,29,12,26,20,18,19,30,17,29,27,21,25,23,19,23,23,25,16,21,19,25,16,17,22,16,16,20,15,18,20,18,16,16,16,16,16,16,15,17,27,20,19,22,16,11,23,17,17,20,18,71,34,14,22,18,23,19,17,14,15,16,18,23,16,18,16,25,25,18,14,16,29,15,15,18,10,25,18,17,21,17,17,17,22,10,27,8,14,26,15,15,16,18,23,12,18,17,16,22,12,18,25,18,16,15,18,12,16,17,17,17,17,17,17,16,23,11,17,17,18,17,16,21,16,18,16,17,17,17,17,17,16,17,12,17,16,17,17,17,19,16,16,17,17,17,16,19,16,24,17,38,17,13,18,20,12,32,17,53,17,16,18,16,17,17,16,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,47,18,16,17,17,17,17,16,17,17,17,16,16,17,17,16,17,16,17,17,17,17,17,16,17,17,17,17,17,47,17,17,17,17,17,16,17,17,17,15,18,16,17,17,16,16,17,17,17,17,16,16,17,17,17,17,21,18,13,14,15,17,16,33,16,17,16,49,23,18,27,18,19,16,17,17,17,17,16,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,17,17,17,17,48,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,16,17,16,17,17,49,16,17,17,17,17,16,17,17,17,16,17,17,17,15,21,14,14,19,25,17,17,16,17,17,19,17,20,39,19,17,19,24,33,16,17,20,19,15,13,21,16,17,18,16,17,17,16,17,17,16,18,16,17,16,17,18,18,18,17,18,15,17,14,17,16,17,19,15,48,4,17,17,17,17,16,17,18,17,16,17,17,17,16,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,48,17,17,18,18,17,16,17,17,18,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,21,15,16,17,16,17,17,34,48,16,17,17,17,16,17,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,17,16,49,16,17,16,17,17,17,16,17,17,16,17,16,17,17,16,17,17,17,16,17,16,17,16,17,17,16,17,17,48,17,17,16,17,17,17,16,17,17,16,18,17,16,17,17,17,16,17,17,16,17,17,16,17,17,16,17,17,47,18,16,17,16,17,17,16,17,17,16,17,31,17,17,17,17,16,17,16,17,18,17,16,17,17,17,16,50,17,18,17,17,16,17,17,16,18,17,16,17,17,16,17,17,16,17,17,17,16,17,16,17,17,16,17,18,48,17,17,16,17,16,17,17,16,17,17,17,16,17,17,16,17,17,16,17,18,17,16,17,17,17,16,17,16,49,16,17,16,17,17,16,18,16,17,17,17,16,18,17,16,17,16,17,18,16,17,16,17,16,17,31,17,48,4,18,16,18,16,18,16,17,16,18,17,16,17,17,17,16,17,16,18,17,17,16,17,16,17,17,17,16,17,48,4,18,16,18,18,17,16,17,17,16,17,17,16,17,17,17,16,17,16,17,17,17,16,16,18,16,17,17,16,47,4,18,16,18,17,17,16,17,17,16,17,16,17,17,17,16,17,17,16,17,17,16,17,16,17,17,17,16,17,48,4,17,17,17,17,16,17,31,16,17,18,18,17,16,17,18,16,16,16,19,15,17,17,16,17,16,17,17,47,18,17,16,17,17,16,18,22,12,26,12,19,15,18,27,20,16,19,27,13,17,17,17,17,16,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,26,14,19,32,18,14,20,20,46,14,15,27,17,24,17,18,20,13,30,16,16,17,20,24,19,14,26,18,18,25,18,73,14,24,8,17,25,17,21,16,28,26,18,25,16,27,13,12,17,17,17,17,17,16,18,28,9,19,20,16,16,19,14,16,16,14,20,26,17,15,24,10,19,29,13,5,21,21,16,18,16,17,17,17,16,17,17,17,17,17,17,17,17,16,16,17,16,17,17,16,18,16,17,17,17,17,16,17,17,31,23,14,15,29,14,19,20,11,17,16,17,16,16,17,17,17,16,17,17,17,17,17,36,17,17,21,15,15,15,17,17,17,16,18,16,17,17,16,21,18,17,25,18,16,19,15,19,17,16,16,17,17,14,20,15,17,15,26,4,17,17,17,17,17,17,17,18,16,17,17,17,17,17,21,18,19,21,15,28,18,20,17,15,26,17,18,20,16,21,19,19,32,5,16,21,21,16,57,3,6,29,46,22,26,40,28,19,21,15,27,21,21,18,35,12,22,16,35,6,19,21,13,52,18,31,19,16,23,13,17,26,17,19,17,20,19,23,5,24,14,27,41,11,16,14,22,18,26,20,28,20,17,34,13,25,16,17,16,21,24,6,27,14,26,16,15,16,16,15,18,18,22,16,19,32,11,17,18,18,16,17,26,13,16,16,16,19,13,19,13,15,16,17,19,19,19,17,12,23,22,13,15,26,21,16,16,19,12,20,21,16,25,16,16,27,12,18,17,17,17,28,7,46,21,26,26,17,32,14,18,20,22,10,18,17,17,18,29,17,11,18,11,20,15,20,23,16,17,18,15,17,15,15,23,28,16,13,15,16,17,16,17,17,20,21,23,22,21,21,18,18,20,21,18,18,17,21,28,25,17,22,27,17,18,15,16,17,16,16,18,15,16,19,11,18,18,15,16,17,25,10,19,21,13,16,18,25,34,20,18,19,14,17,18,15,16,19,14,16,20,11,29,21,17,17,19,17,12,17,17,16,17,22,22,6,33,13,11,17,17,17,18,23,17,18,22,25,12,20,30,14,23,18,16,17,20,20,16,16,17,24,23,17,12,16,19,18,15,17,15,18,16,20,20,21,16,18,17,17,19,16,19,18,28,16,22,18,15,17,20,21,12,18,16,17,17,15,16,17,15,16,20,12,17,15,17,15,17,16,17,14,15,17,17,17,16,17,16,17,17,16,18,34,18,17,18,17,18,17,16,17,26,17,18,17,17,17,16,17,17,17,18,17,17,17,15,16,17,17,18,17,17,20,19,16,17,17,17,17,16,17,17,16,17,17,21,14,16,18,15,18,15,17,17,18,16,13,17,17,16,23,20,15,20,21,16,15,17,18,15,18,16,21,26,11,35,14,23,23,21,21,18,19,25,17,22,20,32,19,25,18,18,18,19,21,19,28,24,25,23,49,19,70,16,27,22,17,29,12,25,19,24,56,26,24,17,22,22,16,25,18,19,18,18,20,32,28,9,22,24,18,19,26,40,21,59,8,18,19,21,21,25,31,7,27,25,19,8,17,17,17,16,17,17,17,16,21,13,17,16,17,17,17,16,25,13,15,29,5,17,16,17,16,17,16,17,17,18,21,13,15,17,17,23,13,15,16,17,18,16,17,17,16,17,16,17,23,12,15,17,16,17,34,16,16,16,17,12,22,17,17,17,17,18,21,12,17,16,17,17,17,19,27,16,17,17,18,15,17,16,17,17,22,17,17,17,17,19,15,17,17,17,17,16,17,16,18,17,24,13,12,15,17,23,17,13,31,17,20,18,19,17,17,18,18,19,16,16,17,19,23,10,18,17,17,17,16,16,18,17,18,20,18,17,18,21,28,15,17,22,21,24,23,24,13,25,20,26,17,28,34,27,43,15,20,13,16,17,18,16,16,17,18,17,18,16,17,16,17,17,19,21,14,17,16,16,16,16,38,18,19,36,14,25,15,20,15,13,17,16,17,18,17,16,19,17,17,16,17,17,16,17,17,17,16,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,18,16,16,17,26,18,21,17,39,23,20,18,19,17,20,16,22,15,19,15,16,16,15,16,28,18,25,19,18,26,37,11,65,22,17,26,17,17,17,16,18,16,17,17,16,17,15,23,23,18,14,43,19,21,22,19,16,20,15,20,27,24,36,21,18,35,8,22,20,16,14,16,23,33,13,17,26,17,16,19,12,23,36,26,18,19,26,13,16,22,25,3,24,16,26,10,17,22,27,26,14,17,16,14,17,16,13,18,16,21,14,17,17,17,16,17,20,16,14,17,16,17,17,16,17,17,17,16,23,23,19,26,71,12,24,19,21,14,49,17,16,17,17,17,16,18,17,17,16,17,16,17,17,16,17,17,16,18,17,17,17,16,17,17,16,17,16,50,2,18,15,17,17,17,16,17,16,18,17,16,18,16,18,16,17,16,17,16,17,16,17,17,17,16,17,16,17,48,13,17,17,16,17,17,16,17,17,16,18,17,17,16,17,17,16,17,16,17,17,17,16,17,17,16,17,17,47,17,16,17,17,17,33,17,18,17,16,17,18,17,16,17,17,16,17,17,16,17,16,18,16,17,17,16,49,16,17,16,17,18,18,17,17,16,18,29,15,25,14,26,15,20,33,9,16,17,16,17,19,17,21,17,23,19,9,13,26,25,16,27,17,12,16,16,17,17,49,3,18,15,17,18,17,16,17,18,16,17,17,16,17,17,17,16,17,17,16,17,18,16,17,17,17,16,17,17,49,3,19,15,18,17,34,17,17,17,17,16,17,17,16,18,16,17,16,17,17,17,17,16,16,17,17,16,17,47,18,18,17,17,16,16,17,17,16,17,17,16,17,17,16,17,17,16,16,16,16,17,18,18,17,16,17,17,47,5,18,16,17,18,17,16,17,17,16,16,17,16,17,17,16,25,16,17,17,16,17,21,18,16,22,17,18,22,13,24,23,14,27,18,22,21,23,9,14,22,18,21,39,18,21,13,31,17,17,17,17,16,18,17,17,17,17,17,16,36,20,17,13,15,17,16,22,11,48,17,16,17,16,17,18,17,16,17,17,17,16,17,15,17,17,17,16,17,16,18,16,17,16,17,17,17,16,49,17,16,17,17,17,16,17,16,17,17,17,16,17,17,17,16,17,17,16,17,17,17,16,17,17,17,16,17,48,17,17,17,16,17,17,17,16,17,16,17,17,17,16,17,16,18,16,17,34,17,17,17,16,17,17,16,49,17,16,17,17,17,16,17,17,16,17,17,17,17,16,17,16,17,17,17,16,17,16,17,17,16,18,16,17,48,17,17,17,16,17,17,16,17,17,17,16,17,17,16,17,17,17,16,17,17,16,17,18,16,17,17,17,16,49,4,23,13,16,16,17,17,16,16,17,17,17,16,17,17,16,17,17,17,16,17,17,16,16,17,17,16,17,17,48,17,16,16,35,18,17,16,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,48,17,17,17,16,17,17,16,17,17,17,17,16,17,17,17,16,16,17,17,17,17,16,17,17,17,17,16,17,48,16,17,17,17,16,17,17,17,17,16,17,17,16,16,17,17,17,17,16,17,17,17,17,16,14,17,17,17,48,16,17,17,16,17,17,17,16,17,16,16,17,17,17,16,17,17,31,17,17,17,17,16,17,17,17,17,48,17,16,17,18,18,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,16,48,17,17,16,17,17,16,17,17,17,17,16,17,21,23,19,19,16,16,15,25,45,18,23,23,17,7,25,18,17,27,17,30,27,13,34,15,16,17,17,16,17,17,18,16,17,16,17,18,22,17,13,16,18,17,20,17,52,2,21,17,29,17,16,17,22,13,16,18,16,21,13,16,18,16,17,16,17,31,23,16,24,19,91,25,18,78,12,23,21,27,23,10,25,14,15,15,17,17,16,17,18,17,20,14,16,17,17,17,17,17,17,17,16,17,20,24,19,11,26,22,12,28,9,17,17,21,17,15,16,17,17,26,12,17,20,22,17,16,17,20,16,24,20,20,20,16,23,13,21,12,23,17,16,16,16,16,16,17,16,16,38,16,17,16,16,16,17,16,16,17,17,17,17,16,17,17,17,17,16,17,17,16,17,16,22,16,16,16,17,16,16,17,16,17,16,17,16,16,17,16,17,16,17,16,17,16,17,16,16,16,16,16,17,16,16,16,29,20,23,19,18,34,8,19,19,18,15,16,17,18,17,17,17,18,17,18,17,17,17,16,18,17,17,16,17,18,37,25,23,9,18,18,23,9,24,12,22,12,22,11,39,17,17,16,16,17,22,16,17,17,17,18,17,17,16,22,16,17,16,17,15,15,16,14,15,17,21,18,12,16,16,17,15,15,16,17,15,17,18,17,18,17,26,17,17,17,17,17,16,17,17,17,16,17,49,17,17,17,16,17,16,16,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,16,17,17,17,17,17,47,4,18,16,18,16,16,17,16,17,17,16,16,17,17,17,17,31,16,17,17,17,16,17,17,17,16,16,17,48,17,16,17,17,17,17,17,17,17,16,18,16,17,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,48,4,18,17,16,17,17,16,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,16,17,16,17,17,17,17,48,17,17,17,16,17,17,17,17,17,17,16,17,17,17,17,17,17,16,16,23,16,30,20,17,17,17,21,13,71,29,15,18,16,16,21,17,18,17,21,16,20,17,17,16,18,17,16,17,17,16,18,17,16,17,20,15,16,17,17,18,18,18,20,20,14,15,18,20,16,16,17,17,20,16,16,16,15,15,16,17,17,17,16,18,16,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,16,16,18,46,17,17,17,16,17,17,17,16,18,16,17,16,17,18,17,16,17,17,18,28,8,37,15,31,5,23,15,17,19,16,48,17,17,16,17,17,17,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,47,16,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,47,17,17,17,17,17,16,17,17,17,17,15,17,17,17,17,17,16,17,17,17,17,17,16,27,20,16,16,16,16,16,16,48,3,34,18,17,16,17,17,17,17,17,16,17,18,17,17,17,16,18,16,16,16,18,16,17,17,17,16,17,49,17,16,17,17,17,16,17,17,18,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,16,17,48,17,16,17,17,18,18,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,18,18,17,17,16,17,17,48,17,16,17,17,18,17,17,17,16,18,16,18,18,18,31,16,17,16,17,17,17,17,16,17,17,17,16,48,17,17,16,17,18,18,17,17,16,17,17,19,16,17,17,16,17,18,17,17,17,16,17,17,17,16,17,17,48,3,18,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,18,16,17,16,18,16,48,17,16,17,17,17,17,16,17,18,18,18,18,18,18,17,17,17,16,17,17,17,16,18,16,18,17,17,30,52,16,17,16,18,16,17,17,16,18,16,17,17,16,17,17,16,18,16,18,17,17,17,16,18,16,18,18,17,48,16,17,17,17,17,17,16,17,17,17,16,18,16,17,17,16,17,17,17,17,16,17,18,18,18,18,18,17,48,18,18,17,17,17,16,17,17,17,17,20,17,16,15,14,16,17,17,16,17,18,17,19,16,18,16,17,18,16,21,18,29,10,17,16,18,39,20,21,22,40,14,13,21,16,17,20,19,19,18,15,17,18,18,17,17,16,17,18,18,18,18,17,20,14,21,18,16,16,17,17,17,21,17,15,18,14,16,16,14,17,17,16,17,17,16,18,17,17,16,18,18,19,17,16,17,17,17,16,17,18,18,17,16,48,20,18,13,17,17,16,17,18,18,18,18,18,18,17,19,31,28,16,17,42,18,16,32,21,19,33,19,18,13,32,14,15,19,19,16,38,18,19,16,27,26,18,18,24,39,18,18,23,15,22,15,18,17,18,17,17,23,14,18,18,20,21,23,28,17,20,20,23,21,37,4,17,15,24,23,20,21,52,25,28,20,36,17,20,19,17,15,17,17,16,17,17,23,19,18,19,20,19,28,15,22,14,24,16,17,28,21,18,20,16,20,17,17,26,18,20,21,17,19,27,11,17,26,7,18,15,17,25,25,17,17,16,13,18,29,30,26,15,16,21,23,11,18,19,15,20,25,18,16,14,18,15,16,20,14,16,19,11,19,18,15,16,16,17,18,19,11,17,17,18,15,21,12,19,15,17,17,18,18,18,17,18,17,16,18,16,17,17,16,17,17,17,17,17,17,16,18,17,18,16,17,16,17,17,17,16,19,15,27,20,16,17,24,25,15,25,12,16,17,20,22,16,17,44,20,23,19,18,19,14,43,22,26,29,7,38,16,16,18,16,44,4,18,16,18,17,16,17,17,16,17,17,17,17,17,16,17,17,17,17,27,21,18,18,19,18,16,25,25,25,27,17,31,3,18,15,18,17,17,20,13,19,16,17,17,17,16,17,17,16,26,23,8,24,9,19,17,17,17,17,19,28,17,18,18,22,14,30,14,25,16,17,21,19,18,19,17,17,17,16,19,15,17,17,17,17,16,17,17,17,17,17,17,17,16,35,18,17,16,16,17,17,21,21,15,22,17,17,21,35,20,18,16,17,17,17,17,17,17,17,16,17,16,16,17,17,17,17,17,17,17,16,19,15,17,17,16,17,17,43,13,16,17,17,16,17,17,17,16,17,17,16,17,17,18,17,19,15,17,16,17,17,17,16,17,17,17,16,48,4,17,15,18,15,17,17,17,16,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,34,17,48,17,21,14,16,17,17,16,17,17,18,17,12,17,17,18,16,17,16,17,17,17,17,16,17,17,16,17,17,49,18,17,16,17,17,17,16,17,17,17,17,16,17,17,21,17,15,17,16,15,15,15,17,17,17,17,17,21,13,17,17,16,17,17,17,16,18,18,17,17,16,17,17,16,17,18,17,19,15,16,18,17,17,16,17,18,18,17,48,4,17,17,17,16,17,17,17,17,39,16,17,17,17,16,17,17,16,17,18,17,16,18,16,17,17,16,44,3,18,16,17,17,16,17,17,15,17,17,17,17,16,17,16,29,17,17,17,16,17,17,16,17,17,17,20,14,16,17,17,16,17,17,17,16,17,16,17,17,17,16,17,17,16,49,17,16,17,20,17,16,17,17,17,16,18,16,17,17,16,17,18,16,17,17,16,17,17,17,15,17,17,20,25,16,17,16,17,17,34,16,17,16,16,17,17,16,17,16,17,18,16,17,16,17,17,17,17,16,17,17,17,17,44,4,17,17,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,18,17,16,17,17,17,16,16,17,17,16,18,16,17,17,15,17,17,17,17,17,16,19,17,32,20,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,18,16,17,17,17,34,45,3,19,18,16,20,18,28,10,13,15,16,17,17,26,17,31,16,17,39,12,22,12,17,17,19,17,22,14,18,16,21,16,19,18,17,15,18,17,17,16,17,17,23,13,17,17,17,15,17,16,18,19,18,22,16,14,15,17,20,15,29,7,18,16,18,16,17,17,17,15,17,17,17,17,17,16,17,17,15,17,17,17,17,17,17,18,16,43,13,17,17,17,16,17,17,16,18,17,33,18,17,17,17,16,17,17,17,16,16,17,17,19,15,20,14,16,16,17,17,17,17,17,16,17,17,17,17,17,17,17,17,20,33,15,6,17,17,17,19,16,17,16,17,16,17,17,15,17,17,17,17,16,17,17,17,16,17,18,16,16,17,17,16,17,17,18,17,17,17,17,16,17,17,17,16,17,17,35,18,17,17,17,16,17,17,17,17,17,16,16,17,17,17,16,17,16,17,17,33,18,17,16,17,17,17,16,49,17,16,17,17,17,16,17,17,17,17,17,16,17,17,23,20,22,19,24,16,23,39,18,18,19,16,19,22,20,17,16,19,17,17,17,17,18,16,17,17,17,17,16,27,4,17,17,17,27,8,20,14,15,17,14,18,16,15,16,15,12,20,17,17,18,27,17,18,19,23,14,27,14,22,16,22,25,21,20,27,7,17,20,27,16,16,22,18,18,18,19,58,21,17,19,18,19,15,19,26,21,19,9,17,17,26,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,22,15,11,18,13,23,16,17,16,16,17,15,16,19,22,18,17,17,17,22,16,17,19,15,17,16,16,18,16,16,19,15,16,17,17,17,18,19,15,17,16,17,17,17,17,34,19,17,19,31,9,17,17,14,21,15,16,17,17,16,17,17,17,21,14,19,16,18,18,35,18,17,17,16,16,17,17,18,17,17,17,16,17,17,17,16,16,17,17,16,18,18,49,17,17,16,17,17,17,16,17,17,18,18,18,18,17,17,17,17,17,16,17,17,17,17,17,17,17,16,52,17,16,17,17,17,17,16,17,17,17,17,16,16,17,17,16,22,18,15,18,17,17,16,17,15,16,18,17,27,21,17,17,17,17,16,16,19,13,17,28,22,17,18,18,18,19,18,17,52,28,14,15,18,17,30,15,16,31,17,19,23,23,20,23,17,39,53,26,17,18,24,19,20,21,13,23,17,42,17,18,19,23,21,17,30,17,21,19,20,19,24,15,24,15,23,25,20,20,18,20,21,21,34,20,19,79,14,45,25,21,16,12,18,24,15,20,16,18,15,42,19,43,12,25,9,17,21,22,16,26,18,19,14,19,16,46,10,39,17,17,24,22,13,16,16,18,17,15,43,16,22,18,12,23,21,18,15,20,18,13,21,22,21,23,11,18,17,15,17,20,16,18,16,18,29,6,16,25,12,16,26,9,16,17,17,17,17,17,16,20,26,15,17,19,16,20,15,17,48,4,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,49,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,17,17,17,33,18,17,17,16,17,17,17,48,16,17,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,48,14,17,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,18,16,17,16,17,17,17,16,18,17,16,19,20,19,14,21,14,18,16,16,18,16,16,17,17,18,17,16,17,17,17,16,17,17,17,17,17,18,16,17,16,17,17,16,33,17,49,17,16,17,17,18,28,21,3,16,16,17,16,17,16,17,17,16,17,16,17,16,17,16,17,17,16,17,16,47,17,18,16,17,18,16,17,17,16,17,16,17,16,17,17,16,17,16,17,17,16,17,16,17,16,17,18,16,47,17,16,17,18,16,17,17,16,17,16,17,16,17,16,33,19,16,20,15,17,17,17,20,20,23,26,23,20,12,18,18,17,17,17,17,23,27,17,40,19,15,16,16,17,18,17,17,16,17,17,18,16,18,17,17,16,17,22,21,16,18,16,17,17,18,17,17,17,24,15,17,18,20,14,21,16,16,13,16,17,17,20,30,4,26,13,16,18,23,14,16,18,21,17,14,18,15,17,17,15,16,20,11,18,14,20,18,15,17,18,15,20,15,17,18,15,16,17,17,17,16,17,18,17,16,24,17,18,17,16,17,17,16,17,48,4,16,16,17,34,16,16,17,16,17,17,17,16,17,16,17,17,17,16,17,17,16,17,17,17,16,17,17,47,17,17,17,16,17,17,16,17,17,16,17,17,16,17,17,17,17,16,21,26,17,18,17,16,17,17,17,49,17,19,17,16,19,15,16,17,17,16,17,17,17,16,17,17,26,29,18,26,24,18,28,7,17,41,4,18,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,26,22,19,14,37,23,21,28,17,18,19,16,23,18,17,15,16,16,17,17,16,16,17,17,17,17,16,18,16,17,17,16,18,16,16,17,17,16,17,17,17,28,12,32,19,21,26,13,19,14,16,21,25,21,21,17,15,42,26,18,15,16,17,31,10,18,17,17,26,17,17,17,17,17,17,17,18,15,18,21,24,26,17,16,21,21,19,17,18,27,30,15,20,19,16,24,18,16,17,17,18,17,29,25,34,31,24,29,14,22,20,27,37,28,7,20,28,22,21,17,17,19,20,18,18,18,16,16,17,25,17,20,18,17,14,19,16,16,15,16,16,17,18,16,20,19,23,15,22,16,17,20,26,19,15,22,28,16,16,17,17,23,17,16,17,17,19,23,26,16,16,17,17,17,22,18,16,19,21,18,29,13,24,21,10,16,18,16,17,57,19,16,17,17,17,16,17,17,17,17,16,17,17,17,35,18,16,17,17,17,17,17,16,17,17,17,16,51,3,18,16,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,18,18,18,48,18,17,17,16,17,17,17,16,17,16,17,17,17,17,18,27,16,16,20,16,17,16,17,17,17,18,17,27,15,21,15,24,17,20,19,17,16,18,16,17,17,18,16,18,15,22,13,16,17,17,17,17,17,17,17,17,18,34,17,17,17,18,16,19,22,12,16,18,17,16,18,16,17,17,19,50,18,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,18,16,17,47,3,19,16,17,17,17,16,17,17,17,16,17,17,17,17,16,18,16,17,18,17,15,17,17,17,17,17,16,18,47,17,17,17,17,17,16,17,17,16,17,16,17,17,17,16,17,17,17,16,17,16,16,35,17,17,17,16,49,17,16,17,17,16,17,17,16,17,17,18,16,18,16,17,16,17,17,16,17,17,16,17,17,17,16,17,16,49,4,17,17,17,16,17,18,17,16,17,17,16,17,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,48,3,18,17,17,16,16,17,17,17,17,16,16,17,17,16,17,17,16,17,17,17,16,17,17,17,16,17,16,17,32,40,16,17,16,17,34,18,17,17,15,17,17,17,17,17,17,17,17,16,17,17,17,15,17,17,17,48,17,17,16,17,17,17,16,17,17,17,17,15,17,17,17,17,16,17,17,17,17,16,17,17,17,17,15,17,48,5,16,16,17,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,18,17,16,17,17,48,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,31,17,17,17,16,17,17,17,48,4,17,17,17,17,16,17,17,17,16,17,17,16,18,16,17,17,16,17,17,17,17,16,17,17,16,17,17,17,47,17,17,16,17,17,17,16,17,17,16,17,17,28,14,17,17,12,28,27,20,18,20,29,23,13,21,20,20,14,20,21,3,22,16,13,18,15,26,27,15,16,27,27,15,26,26,20,19,14,16,14,18,16,22,17,50,29,28,15,27,27,50,7,24,18,17,16,17,16,17,17,18,18,16,17,17,17,16,17,52,16,17,17,16,17,17,16,17,17,16,17,17,18,16,17,17,18,18,16,17,17,16,17,17,16,17,17,16,17,47,17,17,16,17,17,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,18,17,16,17,18,16,17,16,48,17,16,17,17,16,17,18,17,16,16,17,17,16,17,16,17,16,17,33,4,24,17,30,18,16,22,39,28,16,17,18,16,17,17,16,17,16,17,16,17,18,16,17,17,17,16,17,18,16,17,17,16,17,17,16,49,16,17,16,17,18,16,17,16,17,17,16,17,23,21,26,16,17,18,16,17,16,17,16,16,17,16,17,47,17,18,16,17,16,17,16,17,16,17,16,17,18,16,16,17,17,16,17,16,16,17,16,17,16,17,16,17,48,16,17,16,17,16,16,17,16,17,64,15,26,25,22,22,30,16,21,22,22,24,24,18,19,17,17,17,23,16,19,12,22,18,29,5,20,18,18,20,22,13,21,24,29,29,16,18,20,29,13,18,17,18,17,16,16,16,16,17,16,16,21,16,15,18,17,17,20,17,20,23,8,19,17,15,17,21,12,19,13,22,22,12,17,16,16,17,16,16,29,11,29,18,19,26,12,16,21,16,18,22,21,44,10,22,14,18,15,35,15,17,20,12,17,18,17,16,17,17,17,17,16,17,17,16,18,16,17,17,17,47,18,16,17,17,16,16,17,16,16,17,17,17,16,17,17,17,17,16,17,17,18,17,16,17,17,17,16,17,48,17,17,16,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,15,17,17,17,17,16,17,17,50,4,20,15,33,16,15,18,15,21,14,21,23,20,16,18,18,23,11,17,16,39,17,16,20,16,16,24,16,18,17,17,16,17,18,16,17,17,21,14,16,16,18,15,16,12,21,18,17,25,28,15,15,15,20,17,49,4,18,16,17,17,17,16,17,17,17,17,16,17,17,16,17,18,16,17,16,17,17,17,16,17,17,17,16,17,48,16,17,17,17,17,17,16,17,14,17,27,4,27,28,4,31,29,12,19,17,15,18,17,15,18,15,17,19,15,17,18,18,18,17,37,18,17,18,16,17,17,18,16,44,4,17,18,17,17,18,16,18,17,17,22,20,21,16,16,16,17,17,16,17,17,17,16,17,17,16,17,17,16,18,16,17,16,17,16,16,17,21,14,28,17,18,18,16,18,16,18,18,18,17,19,18,16,17,18,18,18,18,18,17,16,18,25,33,18,16,24,22,19,34,25,25,32,46,31,39,20,17,17,20,15,17,22,15,20,15,15,16,18,18,30,20,16,18,17,17,17,16,17,17,16,17,19,16,17,17,19,16,16,18,16,17,17,16,16,17,17,17,18,17,17,17,16,17,21,18,16,19,15,17,22,15,20,16,15,17,15,15,17,21,17,19,17,16,26,26,5,21,24,11,16,18,19,20,23,12,17,28,7,19,16,16,24,17,21,10,16,17,18,19,12,25,11,18,16,53,14,17,17,17,17,16,20,23,19,13,19,18,16,23,44,24,20,16,18,18,17,20,18,16,17,15,18,18,20,16,14,17,16,19,18,16,17,17,15,17,17,16,17,17,17,16,11,14,18,33,16,15,16,13,21,17,14,17,21,11,18,42,16,17,17,16,17,18,16,16,17,16,16,16,17,19,37,3,14,13,19,14,17,21,15,18,15,17,19,18,27,8,18,17,19,17,22,25,20,21,17,15,25,17,16,16,21,18,18,15,23,14,12,22,29,23,11,17,22,11,17,23,10,18,22,11,17,24,10,17,23,11,16,24,10,19,22,16,20,18,17,20,19,13,15,19,16,16,16,17,17,16,17,17,21,15,16,17,19,16,17,20,17,13,17,19,18,15,17,17,46,3,17,18,18,16,20,17,17,17,19,17,18,15,17,17,18,20,16,20,19,17,22,14,16,22,14,23,22,23,38,14,21,18,22,28,15,17,17,17,19,17,17,16,36,19,16,21,12,16,17,17,17,17,17,17,16,17,17,17,17,14,17,18,17,17,16,17,17,16,18,18,21,14,16,17,15,17,17,18,17,16,17,29,16,7,15,18,16,17,17,17,15,17,17,17,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,17,16,17,20,12,17,16,17,16,17,16,17,18,16,17,16,16,17,16,17,17,17,17,17,18,16,16,33,19,16,17,16,17,16,17,19,18,16,17,17,17,16,18,28,23,17,16,17,17,18,17,15,17,17,18,15,20,14,17,17,16,17,18,16,16,19,16,17,17,16,17,17,17,17,17,16,19,18,15,17,16,17,17,16,17,17,17,18,16,16,17,17,35,10,16,17,17,16,17,17,16,19,18,17,18,16,17,16,17,16,17,17,16,18,17,17,18,37,19,19,16,17,16,17,17,17,18,35,18,18,18,18,17,19,16,16,20,15,16,17,16,24,11,18,17,18,15,17,17,17,17,17,18,17,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,18,17,17,16,18,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,16,16,16,18,16,17,17,17,17,17,17,16,16,18,16,17,17,25,17,22,27,14,18,20,20,16,24,16,17,17,17,16,17,17,27,16,38,16,17,16,16,17,16,16,16,17,23,11,25,18,20,28,19,16,20,19,15,17,17,16,19,15,16,16,17,18,27,14,16,25,17,23,22,21,17,26,23,19,23,17,12,23,21,20,20,26,20,19,23,17,25,20,15,16,16,16,19,19,21,24,12,21,21,18,26,16,17,22,20,21,16,16,14,22,29,11,18,23,20,18,15,22,23,23,18,19,17,83,11,21,18,17,18,13,23,18,55,20,29,14,20,20,14,15,17,19,17,16,17,17,16,17,19,14,19,18,17,13,21,19,17,17,19,17,16,16,17,17,16,17,16,17,16,17,17,17,16,17,17,16,17,16,17,16,17,17,16,17,18,24,19,15,23,18,22,16,15,18,21,12,15,17,16,17,17,16,17,16,17,16,17,17,16,17,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,17,16,17,16,17,17,16,34,17,17,16,17,17,16,17,17,16,17,18,16,17,17,16,17,17,16,17,16,17,16,17,17,16,17,17,16,17,16,17,16,17,15,17,17,16,17,16,17,16,17,17,16,17,18,17,16,17,17,16,17,16,17,16,17,17,16,17,16,17,17,16,17,16,17,17,16,17,16,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,16,17,17,17,16,17,16,17,16,14,17,31,17,17,18,16,17,17,16,17,16,17,17,16,17,17,16,17,18,16,17,17,16,17,24,13,17,16,19,29,18,15,12,17,18,17,19,16,17,16,17,17,17,16,17,17,17,16,16,18,16,16,16,17,16,17,16,17,17,16,17,17,17,16,17,17,16,17,16,17,17,17,16,17,17,16,17,17,17,16,17,16,18,16,17,17,16,17,17,16,17,17,17,17,16,17,17,17,17,16,17,34,17,17,20,16,23,15,18,20,15,16,17,17,17,17,16,17,17,17,16,17,17,17,16,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,15,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,15,17,17,17,17,16,17,17,17,17,15,17,17,17,34,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,19,23,14,15,24,15,22,17,16,17,17,18,22,22,20,19,17,19,23,17,17,17,16,20,17,21,13,15,20,18,16,19,19,24,11,21,22,17,16,17,17,17,18,20,14,16,15,21,16,20,22,13,16,16,17,16,47,17,17,18,18,18,18,17,18,17,17,17,16,17,17,18,18,17,16,17,17,17,33,18,17,17,16,48,17,17,17,18,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,18,17,17,16,49,18,16,17,16,17,18,17,16,17,17,18,18,17,16,17,18,16,17,17,17,16,17,17,17,16,17,17,17,48,5,17,18,18,17,16,17,17,17,16,17,17,18,18,18,18,17,16,17,17,18,18,18,18,18,18,17,17,48,16,17,18,18,17,16,17,31,17,17,17,16,17,17,17,17,16,17,17,18,17,18,18,18,17,17,16,48,17,17,17,17,16,17,17,17,16,17,17,18,18,18,18,17,17,16,18,18,17,18,29,26,7,20,50,22,57,29,17,21,19,18,22,18,47,11,19,22,18,14,19,15,26,25,16,48,25,16,26,24,15,27,25,26,17,6,40,20,6,38,7,21,27,41,18,25,3,22,17,17,17,16,17,16,17,17,16,31,18,16,17,18,16,17,16,17,18,11,17,17,18,16,17,47,18,16,32,17,20,13,26,26,16,26,21,19,14,27,25,15,27,22,31,22,17,12,30,25,16,26,24,94,11,17,17,16,17,17,17,17,29,16,16,15,18,14,15,16,17,16,17,17,16,17,17,17,19,16,20,23,19,31,13,16,22,19,22,20,26,18,16,18,17,17,18,17,17,18,17,19,14,17,16,24,19,22,20,68,11,17,16,24,13,26,10,17,17,20,19,19,22,17,15,16,28,10,26,12,16,18,17,18,19,14,28,9,24,22,17,15,13,12,16,18,17,17,17,25,16,17,17,17,16,18,16,17,20,18,17,21,15,19,19,20,12,16,17,47,4,18,17,16,17,17,16,17,17,16,17,16,16,17,17,16,17,16,17,16,17,17,16,18,16,17,17,16,18,48,16,17,18,16,17,17,16,23,17,44,17,26,17,21,31,14,17,10,23,22,10,21,14,15,15,17,18,17,16,20,15,20,14,21,15,16,16,16,16,16,16,16,16,15,16,16,17,17,17,17,16,17,17,18,17,17,15,25,17,16,15,19,17,48,17,16,17,17,17,17,17,16,17,17,16,17,18,16,17,17,16,17,17,16,17,17,16,18,17,17,16,18,48,4,18,16,17,17,16,18,16,17,16,18,16,17,17,16,18,33,18,17,17,16,17,17,17,16,17,17,48,4,18,16,17,17,16,18,16,17,17,16,17,17,17,17,16,17,17,17,17,17,16,18,17,17,17,16,17,17,49,3,18,17,16,18,16,17,17,17,16,17,17,16,16,17,17,17,16,17,18,16,17,17,16,17,17,17,16,17,49,17,17,16,17,17,18,18,17,17,17,16,17,17,16,17,17,18,17,16,17,17,17,17,16,18,16,17,17,31,49,17,17,16,17,17,16,18,16,17,16,17,17,17,17,17,16,17,17,17,17,17,16,17,17,16,18,16,17,48,17,17,17,16,17,17,17,17,17,16,17,16,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,48,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,16,17,18,17,17,16,17,18,16,17,48,16,17,18,16,18,17,17,17,17,17,17,30,18,16,17,17,17,17,16,18,16,17,17,17,17,16,17,48,17,17,17,16,17,15,17,17,18,16,17,17,17,17,16,18,16,17,17,17,16,17,17,17,16,18,17,16,48,17,17,16,17,17,17,17,17,16,18,16,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,16,18,47,17,17,17,16,17,17,17,17,16,17,17,17,16,24,19,35,14,16,27,24,8,21,18,20,18,34,18,17,18,19,15,17,15,18,16,16,18,16,17,17,16,17,16,17,18,16,20,14,19,16,18,17,17,17,16,49,17,17,17,16,17,17,17,17,17,16,17,16,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,49,4,18,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,48,3,17,16,17,17,17,16,17,17,17,34,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,48,3,18,18,17,17,16,17,17,16,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,48,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,48,3,17,17,16,17,17,17,17,16,17,16,16,17,17,17,17,16,17,17,17,16,17,31,18,16,17,17,17,48,16,17,17,16,16,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,48,4,18,16,17,18,17,19,15,18,17,16,17,18,16,16,16,17,16,17,16,17,17,17,16,18,17,16,18,18,16,17,16,17,17,17,16,17,16,17,17,16,18,17,17,16,17,17,16,18,17,17,16,17,17,16,17,17,16,17,48,3,18,16,17,32,17,17,17,17,16,17,17,16,49,17,17,16,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,16,17,17,48,3,18,16,17,17,16,17,16,17,17,16,17,17,16,17,18,17,16,17,16,17,17,16,17,17,16,19,17,17,49,16,17,18,24,15,20,28,29,15,29,23,16,17,18,26,21,18,14,18,15,26,14,15,19,23,17,16,21,23,18,20,37,28,15,19,19,15,15,15,16,18,17,16,17,17,16,17,16,17,17,16,17,16,17,16,21,15,17,17,16,28,19,15,16,49,14,27,13,21,17,18,21,33,14,25,11,22,25,20,15,24,15,16,14,16,17,18,20,16,23,20,12,23,18,16,17,18,18,18,17,17,16,17,17,23,21,14,24,22,19,22,13,43,8,17,20,14,17,16,17,18,17,16,17,16,17,17,17,16,17,16,34,18,17,17,17,16,17,18,16,18,16,17,16,17,17,17,16,17,16,17,17,16,17,17,17,17,16,17,17,16,17,17,16,17,17,18,16,16,17,18,47,3,17,15,17,16,17,17,17,17,16,17,16,17,16,21,17,14,17,15,16,14,16,16,18,17,16,17,17,16,18,17,16,17,18,17,16,17,17,16,17,17,16,18,17,17,16,17,57,5,21,16,17,17,17,17,17,16,17,16,33,18,17,16,17,17,17,16,17,17,17,17,16,17,17,17,43,4,18,16,17,18,20,16,14,15,15,16,17,17,17,17,16,17,17,17,16,17,21,16,17,16,18,17,17,17,44,3,18,16,17,17,26,17,18,14,16,18,17,17,17,16,17,17,17,17,16,16,21,19,12,16,17,17,17,17,16,17,17,16,17,17,17,17,17,17,16,17,17,18,20,16,17,17,17,18,17,17,17,16,34,18,18,17,17,17,17,17,17,17,17,17,16,17,18,17,19,15,16,17,16,17,17,17,17,16,17,18,17,16,17,17,17,16,17,19,18,17,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,23,14,15,15,15,17,17,17,16,18,26,27,18,16,18,17,17,16,17,18,16,17,17,17,17,16,17,18,17,17,17,16,17,17,17,17,17,17,17,44,3,19,16,17,33,17,17,17,18,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,49,17,17,16,17,17,17,17,16,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,47,17,17,17,17,17,16,17,17,17,18,17,17,17,16,17,17,17,16,17,17,17,17,17,16,17,17,17,17,47,3,19,22,15,21,17,17,17,16,22,23,18,18,29,19,18,19,35,16,16,15,19,15,17,18,20,14,16,17,17,23,14,15,16,16,19,13,13,16,17,17,17,17,17,17,18,22,16,19,24,16,16,17,17,20,17,18,17,16,17,17,17,18,12,18,17,17,17,16,17,17,17,17,20,19,45,9,16,18,17,16,17,17,17,18,18,17,17,16,17,17,18,17,16,17,17,17,18,17,17,16,17,17,21,13,16,16,17,17,17,16,17,17,17,17,16,17,33,17,17,17,17,16,17,17,17,18,17,17,17,16,17,18,16,17,30,21,26,21,10,19,18,15,16,17,15,16,18,26,17,16,14,17,16,17,13,17,17,16,16,18,16,18,14,17,18,17,16,17,16,18,18,20,16,17,18,20,17,18,23,21,25,14,15,29,15,16,22,10,21,19,22,21,22,17,22,18,21,21,21,21,22,21,17,27,3,13,19,19,19,19,18,18,19,19,20,15,37,19,15,17,18,17,16,17,17,17,16,17,17,16,17,17,20,16,18,18,16,23,17,13,20,13,31,12,14,12,16,17,48,4,17,19,15,17,17,17,17,17,16,17,17,17,20,17,18,17,16,18,16,17,17,17,17,17,17,16,17,49,17,20,16,15,17,16,18,17,15,16,17,16,20,18,16,19,20,14,17,19,17,17,17,17,17,16,17,17,17,18,16,17,18,15,19,16,17,17,36,15,23,10,21,14,16,21,13,18,18,21,15,18,25,12,12,16,20,15,15,16,22,23,18,11,21,17,17,29,11,24,10,24,11,20,16,20,20,17,16,23,18,13,27,11,17,25,13,17,32,18,33,19,23,30,25,21,19,14,21,13,19,18,17,15,20,11,20,18,15,18,22,17,15,18,20,19,16,17,16,19,22,9,17,17,17,16,17,17,17,15,20,15,23,11,16,21,12,17,36,24,18,21,21,25,20,28,15,34,18,16,37,18,22,20,19,21,22,18,21,18,17,20,18,29,22,18,23,19,18,20,18,17,20,57,19,21,20,18,43,28,20,19,17,19,16,42,19,16,20,29,13,15,26,18,16,14,13,31,19,20,16,12,21,16,16,17,19,16,16,16,15,17,18,17,21,20,17,17,22,19,25,13,17,19,18,21,11,16,17,16,17,17,17,17,16,17,17,17,43,18,16,17,17,17,16,17,48,17,17,15,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,16,17,18,16,17,17,17,17,17,17,48,17,17,17,17,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,17,14,16,17,16,17,17,17,17,48,17,16,17,17,17,28,19,19,50,17,15,19,12,15,17,17,17,17,16,17,17,16,17,17,17,47,17,17,17,17,17,17,17,34,18,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,16,16,17,49,17,16,17,17,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,17,17,17,17,16,18,16,17,17,48,17,17,16,17,17,17,17,17,17,16,17,17,17,17,16,16,17,18,16,17,17,16,17,17,16,17,16,17,48,17,17,17,16,18,16,17,17,17,17,16,18,16,17,17,17,17,17,16,17,17,31,16,17,17,17,17,48,17,16,17,17,17,17,17,16,17,17,16,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,16,48,17,17,28,5,21,20,21,16,24,26,15,27,25,15,27,25,15,17,13,37,5,18,17,18,18,16,17,17,16,17,17,16,17,18,16,16,17,17,16,17,17,16,17,16,17,17,16,17,51,17,18,16,17,17,16,17,16,17,17,16,17,18,16,17,32,17,17,16,17,16,17,18,16,17,16,17,16,48,16,17,16,17,17,16,17,18,16,17,18,16,17,17,16,17,17,16,17,18,16,35,14,28,24,16,26,25,3,26,61,4,30,27,15,26,27,14,27,27,15,26,27,15,26,27,14,26,27,15,26,25,50,29,17,6,18,18,16,19,29,16,17,17,16,17,17,17,17,16,17,17,18,17,17,16,17,17,17,18,17,18,17,17,16,17,41,11,19,23,13,27,21,17,18,33,25,14,26,24,30,11,18,13,19,17,18,19,12,28,26,23,15,19,14,17,17,17,16,20,14,17,17,17,20,16,16,16,18,17,17,17,49,4,18,16,17,17,17,17,16,17,17,17,17,17,17,17,17,16,17,17,17,16,16,17,17,17,17,16,17,17,48,3,18,17,18,16,17,17,17,17,17,17,17,17,16,18,17,17,17,17,17,17,16,18,34,16,17,17,48,17,16,18,17,16,17,17,17,17,17,17,17,17,17,16,17,17,17,17,16,18,16,17,16,17,17,17,17,47,4,18,16,17,17,17,17,16,17,18,16,17,17,17,17,18,17,16,17,17,17,17,17,19,16,17,17,17,48,17,17,17,18,17,17,16,13,16,17,17,18,17,16,17,16,17,17,18,17,17,16,17,18,16,17,17,17,48,4,18,17,16,17,17,18,16,31,18,17,17,16,18,17,17,17,16,17,17,17,17,17,17,17,17,17,48,17,17,17,18,17,16,17,17,17,17,18,16,17,17,17,17,17,17,16,17,18,17,17,17,25,37,16,14,29,20,4,18,20,21,29,18,14,17,27,5,31,16,15,29,5,30,16,16,29,5,31,16,15,29,6,63,24,11,27,8,24,27,17,15,17,27,5,30,20,30,3,18,18,16,17,17,16,17,16,17,33,17,17,17,17,16,17,18,16,16,17,17,17,16,18,18,17,16,17,18,17,17,16,17,16,17,17,16,17,17,16,17,18,17,17,16,17,17,47,16,17,17,16,17,17,17,16,17,16,17,17,16,17,17,16,17,24,22,16,44,24,30,15,18,19,21,19,18,19,23,20,19,19,15,16,17,17,17,17,17,17,20,21,27,36,21,19,21,19,22,20,17,22,17,16,17,19,15,16,20,30,16,17,17,17,16,17,17,17,16,17,17,17,16,17,22,19,16,19,19,14,18,24,11,16,17,17,49,17,16,17,17,17,17,17,17,16,26,4,18,17,17,17,16,17,17,17,17,17,17,16,16,18,17,16,18,49,16,18,17,16,17,17,16,16,18,16,17,18,17,17,17,17,16,18,17,17,16,18,16,17,17,17,17,17,48,17,17,17,16,18,17,16,18,17,17,16,17,17,17,34,16,17,17,17,17,17,17,16,18,16,17,17,49,3,18,17,17,16,17,17,17,17,16,18,17,16,17,17,17,17,17,16,17,16,17,16,17,17,17,17,17,17,48,17,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,16,18,17,17,17,16,17,17,17,16,18,16,50,3,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,17,17,17,17,31,48,17,16,17,17,18,16,18,17,17,17,17,16,18,17,17,16,17,17,17,17,17,16,18,17,16,17,17,17,48,4,17,17,17,17,17,17,16,16,17,17,18,17,16,18,16,16,17,16,17,17,17,17,17,16,18,16,18,16,48,17,17,16,18,17,16,17,17,16,18,17,16,17,17,17,17,17,16,18,17,17,13,18,17,17,17,16,17,47,3,18,16,17,17,16,17,17,17,17,31,17,16,17,16,18,17,17,16,18,16,18,16,17,17,17,17,16,47,18,17,16,17,18,16,17,17,17,17,17,17,17,16,18,16,18,16,17,17,17,17,17,16,18,16,17,16,48,17,16,18,16,17,17,17,16,16,17,18,17,17,16,17,17,17,17,17,17,17,17,17,16,18,16,16,18,48,4,17,17,18,17,16,18,17,17,16,18,16,17,17,17,17,16,18,17,17,16,18,16,31,17,17,17,17,51,17,17,17,16,18,16,17,17,17,17,17,16,16,17,17,17,17,15,17,17,22,29,11,16,17,19,26,23,20,39,19,17,19,18,15,23,13,16,19,16,16,18,20,16,17,16,18,18,15,17,16,17,17,22,19,14,12,17,17,16,17,20,23,18,19,19,20,17,24,24,4,46,4,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,34,17,17,17,16,17,48,17,17,17,17,16,17,17,16,17,17,18,17,17,16,17,17,17,17,18,17,17,16,17,17,17,17,16,17,48,17,17,16,17,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,16,17,17,17,17,16,48,4,18,16,17,17,17,16,17,17,17,17,16,17,17,17,16,18,16,17,16,17,17,17,17,16,17,17,17,16,48,17,17,16,17,17,31,35,16,17,16,17,17,16,17,16,17,17,35,9,23,16,23,12,23,18,15,24,18,41,29,27,16,27,24,16,26,26,15,26,22,4,17,20,16,18,16,22,26,16,18,23,27,54,17,22,26,16,18,16,17,22,16,17,17,18,18,17,17,16,17,17,17,16,17,17,16,17,17,17,17,17,18,18,18,17,17,16,18,17,17,16,17,17,16,18,16,17,17,17,16,17,17,16,17,17,34,17,17,17,17,17,17,16,17,17,17,17,16,17,18,17,17,17,16,17,17,17,17,17,16,18,18,18,17,17,16,17,17,19,51,17,17,16,18,16,17,17,16,17,18,18,17,17,17,16,17,19,16,17,17,17,16,17,17,17,17,17,16,48,17,16,17,17,18,18,17,17,17,16,17,17,17,17,16,17,17,18,18,17,17,16,17,17,17,18,18,48,18,18,14,17,17,17,16,17,32,17,16,18,16,17,17,16,17,17,17,17,16,17,17,16,17,17,17,48,4,17,18,16,18,19,16,17,17,16,17,17,16,17,17,17,16,17,18,16,17,16,18,16,17,16,17,17,48,17,16,17,18,18,18,17,17,16,17,17,17,17,16,17,17,16,18,16,18,17,16,18,16,18,17,17,16,49,17,16,18,16,17,17,16,17,17,16,17,17,17,16,17,17,17,17,16,17,18,22,46,22,17,17,23,13,15,18,22,16,18,21,32,20,18,22,18,30,14,19,19,18,21,38,12,26,17,19,17,28,22,22,28,18,18,17,35,21,21,18,25,12,18,22,24,23,22,17,17,17,21,19,23,12,17,16,17,17,18,24,17,21,31,18,14,18,20,17,18,17,20,20,17,15,31,20,15,21,19,15,24,22,12,17,27,22,18,17,15,19,17,19,17,19,25,13,23,14,23,15,39,17,15,17,16,17,17,17,17,16,17,18,16,17,17,17,17,17,16,17,17,17,17,17,17,22,15,25,25,12,18,34,21,14,15,18,28,15,18,17,17,16,17,17,17,17,17,17,16,17,17,17,17,17,19,15,18,17,17,16,17,17,17,17,16,16,18,16,17,17,17,17,17,17,17,17,18,17,17,17,17,16,17,17,17,17,17,17,17,19,43,8,17,17,17,17,17,16,17,17,33,18,16,17,17,17,17,17,17,16,16,17,17,17,17,17,15,17,17,44,4,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,19,18,15,16,17,17,17,17,17,17,16,17,17,17,17,17,17,17,16,16,17,17,17,16,17,17,17,17,17,16,17,16,17,17,16,17,17,17,17,17,20,18,30,19,17,18,16,17,17,17,17,17,16,17,17,17,17,16,17,17,17,34,17,17,17,17,17,17,16,17,17,48,20,17,16,15,16,17,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,17,17,43,4,17,17,17,17,17,16,17,17,17,17,17,16,17,18,18,15,16,17,17,17,17,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,17,15,17,17,17,16,17,17,17,17,17,17,16,17,17,44,3,17,17,17,32,17,20,18,11,21,845,18,21,28,20,18,12,19,20,12,18,17,17,29,20,3,45,4,16,18,16,17,17,17,17,15,17,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,17,18,18,16,17,16,15,17,16,15,18,15,39,5,45,19,19,23,28,12,15,17,32,16,18,17,17,19,15,16,18,17,16,17,17,17,16,16,17,17,17,17,16,16,17,17,17,16,16,17,35,23,16,18,17,17,16,17,15,17,17,17,16,17,17,16,17,17,16,17,17,16,17,17,17,16,17,17,16,17,18,15,17,18,19,17,17,17,17,17,17,17,16,18,16,17,17,16,17,17,17,17,17,17,16,17,17,17,17,16,17,17,17,17,16,44,17,9,22,16,22,17,20,17,16,17,16,17,17,17,17,19,14,17,17,17,16,18,16,17,17,17,17,44,3,18,17,17,17,16,34,18,16,17,17,16,17,17,18,16,17,18,16,18,16,17,17,17,17,17,19,27,21,17,17,17,15,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,16,18,17,15,17,17,17,17,48,16,17,20,16,16,18,17,16,17,16,17,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,17,17,47,18,17,16,17,20,16,16,16,18,16,17,17,17,17,17,17,17,17,17,33,18,17,17,17,17,17,17,43,4,18,17,17,17,20,16,17,16,16,17,15,16,15,15,17,17,16,17,17,17,17,16,17,17,17,17,17,16,32,18,14,18,17,16,17,17,17,16,17,17,16,17,18,16,16,17,17,17,17,16,17,16,17,17,16,17,17,17,45,2,18,15,17,16,17,17,17,17,17,16,17,19,19,17,16,16,17,16,17,17,17,16,17,17,16,17,17,16,17,18,34,17,17,17,16,17,17,16,17,17,16,17,17,16,17,17,17,17,16,18,18,19,22,19,38,17,17,17,15,16,17,16,16,17,15,16,14,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,48,4,19,15,17,17,16,17,17,17,17,17,21,23,12,22,16,16,18,17,23,24,17,34,17,17,35,11,17,16,24,15,18,17,23,18,24,12,18,24,18,19,18,17,15,23,11,34,18,17,17,23,21,11,16,17,23,14,15,23,18,24,21,19,25,18,22,19,18,14,18,15,17,18,17,16,18,17,16,18,23,14,14,16,17,17,17,20,12,16,21,16,17,15,16,22,11,18,48,18,16,15,16,17,17,17,16,18,17,17,16,17,17,17,16,18,17,17,17,16,17,17,17,17,17,16,17,48,15,18,16,17,17,17,17,16,18,16,17,17,17,16,17,16,17,17,17,34,17,17,17,16,16,18,16,48,17,18,16,17,16,17,16,18,16,18,17,16,17,18,16,17,17,17,17,17,17,16,18,17,16,17,17,17,48,17,16,17,17,17,17,17,17,17,16,17,17,17,16,18,17,16,18,17,16,18,17,16,18,16,17,18,16,49,16,18,17,17,17,17,16,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,16,18,17,47,17,17,17,17,30,18,17,17,17,16,17,17,17,17,16,18,16,17,17,17,15,18,17,16,17,17,17,48,17,16,17,17,16,17,17,17,16,17,17,16,18,16,17,17,17,15,18,17,16,18,16,17,16,16,18,17,47,17,16,17,16,18,17,21,16,16,17,15,16,14,16,17,17,17,16,17,19,15,17,17,17,17,17,17,16,52,24,16,11,34,13,22,25,17,18,27,15,21,17,18,19,17,18,18,38,17,23,25,11,21,18,10,17,16,18,17,17,16,16,19,14,17,23,21,19,18,30,24,9,25,13,23,16,16,25,16,20,21,20,14,17,13,17,18,16,22,28,77,5,19,19,24,17,18,16,17,17,19,19,32,15,21,19,17,18,31,24,4,15,15,17,18,16,18,15,20,16,16,22,22,16,20,19,17,22,13,16,16,17,17,16,25,18,16,21,15,32,42,9,20,21,23,12,40,14,16,14,49,4,18,16,17,16,17,16,18,17,17,16,17,17,17,17,16,16,17,16,18,17,17,16,17,16,17,17,17,16,49,4,17,17,18,17,16,17,17,17,17,16,18,16,17,17,16,17,18,17,16,17,16,17,16,17,17,17,17,47,17,18,16,17,17,17,17,17,17,17,17,16,17,16,16,17,18,16,18,16,17,17,16,17,17,17,17,16,50,16,16,17,17,16,18,17,17,31,17,16,17,17,17,17,16,18,17,17,16,18,16,17,18,17,16,17,48,17,17,17,17,16,18,16,17,15,18,15,17,16,16,18,16,17,17,17,17,17,17,16,17,17,17,17,16,50,17,16,18,16,17,17,16,17,16,17,18,16,17,16,17,16,17,18,16,15,18,17,16,17,17,17,17,17,17,47,17,17,17,17,17,17,17,16,17,18,16,17,17,17,17,16,17,18,17,16,17,31,18,16,18,16,17,48,17,16,18,16,18,16,17,18,17,17,16,18,17,17,16,17,17,17,17,17,17,16,17,17,17,17,17,17,48,17,17,16,17,17,17,17,17,16,18,17,16,17,17,17,17,17,17,16,18,16,17,16,16,18,16,17,17,49,17,16,17,16,18,16,17,17,17,17,17,16,18,30,12,18,24,20,18,23,15,25,16,16,18,15,14,48,17,17,17,17,16,18,16,35,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,17,17,48,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,16,17,17,17,17,17,17,17,16,17,17,17,48,17,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,16,17,17,17,17,48,17,17,18,20,16,18,14,17,17,20,30,19,19,15,19,21,18,16,13,20,20,30,21,14,14,16,23,15,15,14,16,16,17,17,15,17,17,17,16,17,22,13,16,17,16,17,18,16,20,47,3,17,15,19,16,17,17,16,17,17,23,17,17,17,16,16,17,16,17,17,16,17,16,20,36,7,25,16,16,45,3,18,15,19,16,17,17,18,17,17,16,17,17,16,17,17,17,17,17,17,16,17,17,18,15,17,17,17,17,17,17,17,17,16,17,17,17,16,17,17,18,33,17,17,17,16,18,17,16,17,16,17,16,17,17,17,17,49,17,17,16,18,16,17,17,17,17,21,17,26,12,17,24,20,17,25,23,18,21,37,16,15,16,15,20,13,16,16,19,13,26,3,22,16,18,16,21,20,21,26,19,19,25,16,17,17,15,12,18,17,16,17,17,17,16,17,18,18,18,49,4,16,17,17,16,17,16,17,17,17,17,16,17,16,17,17,17,17,16,17,17,35,17,16,17,17,17,17,47,17,18,16,16,17,17,16,17,17,16,17,17,17,16,17,17,16,16,17,17,17,16,17,17,17,16,17,17,47,4,18,17,17,16,16,17,16,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,17,16,17,48,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,16,17,17,48,3,18,17,17,31,16,17,16,17,16,17,18,18,16,16,17,17,17,16,17,17,17,16,17,17,17,16,17,48,17,17,16,17,17,16,17,17,17,17,16,17,18,18,17,17,16,17,17,18,17,16,17,17,17,16,17,17,47,17,17,18,17,17,17,16,17,17,16,17,16,17,17,16,17,17,17,16,17,17,16,17,17,16,17,17,17,49,17,16,17,18,18,17,16,17,17,17,16,17,17,17,16,16,17,31,17,17,16,17,17,16,17,17,17,48,17,16,17,17,17,16,17,17,17,16,17,18,15,17,17,17,16,17,17,17,16,17,17,17,16,17,17,17,48,17,17,17,16,17,18,17,17,16,17,16,16,17,18,18,17,17,16,17,17,17,16,17,15,17,17,17,17,48,17,18,17,17,16,17,17,16,17,17,18,18,16,17,17,49,6,18,28,19,18,18,19,23,18,17,21,29,12,17,18,40,18,16,19,15,19,16,34,18,16,17,18,17,17,16,17,19,16,17,18,16,18,21,19,13,16,24,21,17,12,16,17,19,48,6,16,17,17,16,17,17,17,16,17,17,16,17,16,17,17,17,17,16,17,16,17,17,17,16,17,17,16,17,48,16,17,17,16,17,17,17,16,17,17,16,17,18,17,16,17,17,17,16,17,18,17,16,17,17,17,16,17,48,16,17,17,16,17,17,17,34,17,16,17,17,17,16,17,17,17,16,17,17,16,17,17,17,17,16,17,48,17,16,17,17,17,17,16,17,17,17,16,17,17,16,17,17,16,18,16,17,17,16,17,17,17,16,17,16,48,18,17,16,17,17,17,17,16,17,16,17,17,16,17,17,16,17,17,17,16,17,17,16,17,17,17,16,17,48,4,17,17,17,18,17,16,18,16,18,16,17,16,17,16,17,17,17,16,17,17,31,16,17,17,16,17,17,48,17,16,16,18,16,17,16,17,18,17,16,18,16,17,17,16,17,17,16,17,16,17,18,18,18,17,17,16,48,17,17,16,17,18,17,16,17,17,17,16,17,18,17,17,16,17,12,18,16,17,17,17,16,17,16,18,17,47,18,17,17,16,17,16,17,16,17,17,16,17,16,17,16,18,32,16,12,18,13,17,16,16,17,18,17,16,49,3,18,17,17,16,32,16,18,16,17,16,17,17,16,17,17,17,16,17,17,16,17,17,16,17,17,17,16,48,17,16,18,17,17,16,17,16,17,17,16,17,17,17,16,17,16,17,17,17,16,17,17,16,18,17,17,16,48,4,18,17,16,17,16,17,17,16,17,16,17,17,17,16,17,17,49,5,37,7,19,17,19,17,29,17,11,17,20,20,26,22,18,21,15,23,17,18,19,16,12,20,19,12,17,25,30,17,16,20,15,15,16,17,18,16,17,35,17,17,17,17,16,17,16,17,17,16,17,18,17,17,17,16,17,16,17,17,16,17,17,16,17,17,16,17,16,48,17,17,16,18,17,16,17,17,16,18,17,17,16,17,16,17,17,16,17,17,16,18,16,17,17,16,17,17,48,17,17,18,15,16,16,17,17,17,16,16,18,16,17,18,17,16,17,17,16,17,17,16,17,16,19,16,19,21,58,29,17,20,18,19,18,22,17,17,17,17,17,17,17,26,15,17,30,20,23,26,41,27,9,17,19,19,15,18,16,17,21,18,19,19,22,30,20,19,18,25,19,18,18,17,17,18,16,17,18,20,15,17,17,16,17,18,17,17,17,16,16,17,17,18,17,17,17,18,17,17,16,17,17,17,17,17,16,16,16,18,17,48,4,23,16,15,16,15,13,17,17,18,16,18,16,18,17,26,34,16,17,16,17,17,16,17,17,16,17,44,3,18,17,16,18,17,16,18,17,17,16,17,17,26,4,21,17,17,17,23,32,3,23,12,24,23,23,13,18,27,26,17,14,23,17,11,17,17,16,17,17,17,16,17,18,17,16,17,18,17,16,17,17,18,23,17,16,17,18,17,17,16,17,18,18,17,16,17,17,17,17,17,17,16,17,17,16,17,17,17,16,17,17,17,58,17,16,17,34,17,17,17,16,17,17,17,17,16,17,16,18,16,17,17,17,16,17,17,16,17,18,17,43,4,17,17,17,17,16,17,15,17,17,21,18,14,17,17,16,18,17,17,16,17,16,17,17,16,17,17,17,16,17,18,17,16,17,17,17,16,17,17,17,16,14,17,16,17,17,16,32,16,3,17,15,17,18,17,16,18,16,18,17,17,16,18,16,17,17,16,17,16,17,17,17,17,16,18,31,16,44,12,17,17,17,17,16,17,17,24,21,17,25,17,17,18,19,15,21,25,12,18,40,19,19,19,17,24,12,17,17,16,18,18,13,21,18,15,16,17,15,15,17,17,17,16,17,17,17,22,10,17,16,17,17,17,16,19,15,24,23,14,23,21,18,22,16,16,44,4,17,17,17,17,17,16,17,17,16,17,17,16,17,17,16,17,17,17,16,17,17,18,18,18,18,17,16,17,36,44,3,18,26,26,23,13,20,20,33,25,13,16,17,15,17,21,22,16,23,24,22,19,20,22,26,10,22,21,20,21,32,15,29,12,27,33,13,23,14,13,20,18,30,17,18,16,16,18,22,37,9,22,18,20,22,20,27,13,22,19,19,20,24,24,14,23,28,14,23,15,17,37,19,25,19,17,16,21,21,13,20,13,20,19,15,18,18,15,17,16,18,15,17,16,17,24,17,19,38,30,11,23,22,29,20,13,16,28,14,18,27,21,28,21,17,17,23,18,22,10,19,15,11,16,20,21,22,21,15,26,15,21,20,23,21,18,28,18,22,14,27,6,24,20,22,14,21,16,17,16,18,49,10,18,16,17,16,17,17,17,16,17,15,18,16,17,17,17,16,17,17,17,16,17,17,17,17,16,17,17,43,4,20,14,19,15,18,17,17,15,17,17,17,17,17,16,17,17,35,16,17,17,17,17,16,17,17,18,16,17,16,17,17,47,19,37,18,15,15,17,17,16,17,17,17,16,17,17,17,17,16,17,17,17,17,17,16,17,17,17,17,16,17,17,43,5,17,17,17,17,17,16,17,17,16,16,17,17,17,17,17,17,16,17,17,17,17,16,16,17,17,17,17,17,51,16,15,16,17,17,16,16,17,17,17,17,17,16,17,17,17,15,18,16,20,15,19,16,36,17,16,16,48,15,23,18,17,16,17,17,17,16,17,17,16,17,17,20,13,17,16,17,17,17,17,16,17,17,17,17,17,17,16,17,17,17,16,16,17,17,17,17,16,19,46,7,20,45,3,21,14,14,17,16,17,18,17,16,17,17,17,17,16,17,17,17,17,17,17,16,18,17,16,17,17,17,12,53,16,17,17,18,20,16,17,17,17,17,17,17,17,17,17,21,19,21,28,17,30,19,30,14,55,13,26,12,14,16,25,18,19,26,13,22,16,15,18,18,20,18,13,16,18,17,16,17,17,17,17,16,17,17,19,21,12,14,17,17,18,18,17,18,23,18,21,25,16,16,16,16,15,23,15,16,17,16,16,20,14,22,43,8,20,11,17,16,21,13,17,17,17,17,17,16,17,19,16,18,17,17,16,17,17,16,17,18,17,16,18,43,3,17,17,16,17,17,17,16,34,18,16,17,18,22,14,15,16,18,17,17,17,17,17,16,17,17,17,16,50,16,15,17,17,17,16,17,17,17,16,18,17,16,17,17,17,17,17,17,31,16,17,20,24,19,22,80,20,20,28,20,20,39,19,18,29,15,18,16,16,26,8,15,16,16,17,16,17,17,16,23,16,21,25,17,22,26,19,14,26,39,4,10,15,21,33,5,15,36,17,16,15,23,17,20,17,12,23,17,54,15,28,14,15,17,25,15,19,25,19,12,18,26,30,9,25,13,52,4,13,14,17],"scripts":[{"scriptId":"10","url":"internal/bootstrap/node.js","source":"// Hello, and welcome to hacking node.js!\n//\n// This file is invoked by node::LoadEnvironment in src/node.cc, and is\n// responsible for bootstrapping the node.js core. As special caution is given\n// to the performance of the startup process, many dependencies are invoked\n// lazily.\n//\n// Before this file is run, lib/internal/bootstrap/loaders.js gets run first\n// to bootstrap the internal binding and module loaders, including\n// process.binding(), process._linkedBinding(), internalBinding() and\n// NativeModule. And then { internalBinding, NativeModule } will be passed\n// into this bootstrapper to bootstrap Node.js core.\n'use strict';\n\n(function bootstrapNodeJSCore(process,\n                              // bootstrapper properties... destructured to\n                              // avoid retaining a reference to the bootstrap\n                              // object.\n                              { _setupProcessObject, _setupNextTick,\n                                _setupPromises, _chdir, _cpuUsage,\n                                _hrtime, _hrtimeBigInt,\n                                _memoryUsage, _rawDebug,\n                                _umask, _initgroups, _setegid, _seteuid,\n                                _setgid, _setuid, _setgroups,\n                                _shouldAbortOnUncaughtToggle },\n                              { internalBinding, NativeModule }) {\n  const exceptionHandlerState = { captureFn: null };\n  const isMainThread = internalBinding('worker').threadId === 0;\n\n  function startup() {\n    setupProcessObject();\n\n    // Do this good and early, since it handles errors.\n    setupProcessFatal();\n\n    setupProcessICUVersions();\n\n    setupGlobalVariables();\n\n    // Bootstrappers for all threads, including worker threads and main thread\n    const perThreadSetup = NativeModule.require('internal/process/per_thread');\n    // Bootstrappers for the main thread only\n    let mainThreadSetup;\n    // Bootstrappers for the worker threads only\n    let workerThreadSetup;\n    if (isMainThread) {\n      mainThreadSetup = NativeModule.require(\n        'internal/process/main_thread_only'\n      );\n    } else {\n      workerThreadSetup = NativeModule.require(\n        'internal/process/worker_thread_only'\n      );\n    }\n\n    perThreadSetup.setupAssert();\n    perThreadSetup.setupConfig(NativeModule._source);\n\n    if (isMainThread) {\n      mainThreadSetup.setupSignalHandlers();\n    }\n\n    perThreadSetup.setupUncaughtExceptionCapture(exceptionHandlerState,\n                                                 _shouldAbortOnUncaughtToggle);\n\n    NativeModule.require('internal/process/warning').setup();\n    NativeModule.require('internal/process/next_tick').setup(_setupNextTick,\n                                                             _setupPromises);\n\n    if (isMainThread) {\n      mainThreadSetup.setupStdio();\n      mainThreadSetup.setupProcessMethods(\n        _chdir, _umask, _initgroups, _setegid, _seteuid,\n        _setgid, _setuid, _setgroups\n      );\n    } else {\n      workerThreadSetup.setupStdio();\n    }\n\n    const perf = process.binding('performance');\n    const {\n      NODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE,\n    } = perf.constants;\n\n    perThreadSetup.setupRawDebug(_rawDebug);\n    perThreadSetup.setupHrtime(_hrtime, _hrtimeBigInt);\n    perThreadSetup.setupCpuUsage(_cpuUsage);\n    perThreadSetup.setupMemoryUsage(_memoryUsage);\n    perThreadSetup.setupKillAndExit();\n\n    if (global.__coverage__)\n      NativeModule.require('internal/process/write-coverage').setup();\n\n    if (process.env.NODE_V8_COVERAGE) {\n      const { resolve } = NativeModule.require('path');\n      process.env.NODE_V8_COVERAGE = resolve(process.env.NODE_V8_COVERAGE);\n      NativeModule.require('internal/process/coverage').setup();\n    }\n\n\n    {\n      const traceEvents = process.binding('trace_events');\n      const traceEventCategory = 'node,node.async_hooks';\n\n      if (traceEvents.categoryGroupEnabled(traceEventCategory)) {\n        NativeModule.require('internal/trace_events_async_hooks')\n          .setup(traceEvents, traceEventCategory);\n      }\n    }\n\n\n    if (process.config.variables.v8_enable_inspector) {\n      NativeModule.require('internal/inspector_async_hook').setup();\n    }\n\n    const { getOptionValue } = NativeModule.require('internal/options');\n    const helpOption = getOptionValue('--help');\n    const completionBashOption = getOptionValue('--completion-bash');\n    const experimentalModulesOption = getOptionValue('--experimental-modules');\n    const experimentalVMModulesOption =\n      getOptionValue('--experimental-vm-modules');\n    const experimentalWorkerOption = getOptionValue('--experimental-worker');\n    if (helpOption) {\n      NativeModule.require('internal/print_help').print(process.stdout);\n      return;\n    }\n\n    if (completionBashOption) {\n      NativeModule.require('internal/bash_completion').print(process.stdout);\n      return;\n    }\n\n    if (isMainThread) {\n      mainThreadSetup.setupChildProcessIpcChannel();\n    }\n\n    const browserGlobals = !process._noBrowserGlobals;\n    if (browserGlobals) {\n      // we are setting this here to forward it to the inspector later\n      perThreadSetup.originalConsole = global.console;\n      setupGlobalTimeouts();\n      setupGlobalConsole();\n      setupGlobalURL();\n    }\n\n    if (experimentalWorkerOption) {\n      setupDOMException();\n    }\n\n    // On OpenBSD process.execPath will be relative unless we\n    // get the full path before process.execPath is used.\n    if (process.platform === 'openbsd') {\n      const { realpathSync } = NativeModule.require('fs');\n      process.execPath = realpathSync.native(process.execPath);\n    }\n\n    Object.defineProperty(process, 'argv0', {\n      enumerable: true,\n      configurable: false,\n      value: process.argv[0]\n    });\n    process.argv[0] = process.execPath;\n\n    // Handle `--debug*` deprecation and invalidation.\n    if (process._invalidDebug) {\n      process.emitWarning(\n        '`node --debug` and `node --debug-brk` are invalid. ' +\n        'Please use `node --inspect` or `node --inspect-brk` instead.',\n        'DeprecationWarning', 'DEP0062', startup, true);\n      process.exit(9);\n    } else if (process._deprecatedDebugBrk) {\n      process.emitWarning(\n        '`node --inspect --debug-brk` is deprecated. ' +\n        'Please use `node --inspect-brk` instead.',\n        'DeprecationWarning', 'DEP0062', startup, true);\n    }\n\n    if (experimentalModulesOption || experimentalVMModulesOption) {\n      if (experimentalModulesOption) {\n        process.emitWarning(\n          'The ESM module loader is experimental.',\n          'ExperimentalWarning', undefined);\n      }\n      NativeModule.require('internal/process/esm_loader').setup();\n    }\n\n    {\n      // Install legacy getters on the `util` binding for typechecking.\n      // TODO(addaleax): Turn into a full runtime deprecation.\n      const { pendingDeprecation } = process.binding('config');\n      const { deprecate } = NativeModule.require('internal/util');\n      const utilBinding = process.binding('util');\n      const types = internalBinding('types');\n      for (const name of [\n        'isArrayBuffer', 'isArrayBufferView', 'isAsyncFunction',\n        'isDataView', 'isDate', 'isExternal', 'isMap', 'isMapIterator',\n        'isNativeError', 'isPromise', 'isRegExp', 'isSet', 'isSetIterator',\n        'isTypedArray', 'isUint8Array', 'isAnyArrayBuffer'\n      ]) {\n        utilBinding[name] = pendingDeprecation ?\n          deprecate(types[name],\n                    'Accessing native typechecking bindings of Node ' +\n                    'directly is deprecated. ' +\n                    `Please use \\`util.types.${name}\\` instead.`,\n                    'DEP0103') :\n          types[name];\n      }\n    }\n\n    perf.markMilestone(NODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE);\n\n    setupAllowedFlags();\n\n    // There are various modes that Node can run in. The most common two\n    // are running from a script and running the REPL - but there are a few\n    // others like the debugger or running --eval arguments. Here we decide\n    // which mode we run in.\n    if (internalBinding('worker').getEnvMessagePort() !== undefined) {\n      // This means we are in a Worker context, and any script execution\n      // will be directed by the worker module.\n      NativeModule.require('internal/worker').setupChild(evalScript);\n    } else if (NativeModule.exists('_third_party_main')) {\n      // To allow people to extend Node in different ways, this hook allows\n      // one to drop a file lib/_third_party_main.js into the build\n      // directory which will be executed instead of Node's normal loading.\n      process.nextTick(function() {\n        NativeModule.require('_third_party_main');\n      });\n    } else if (process.argv[1] === 'inspect' || process.argv[1] === 'debug') {\n      if (process.argv[1] === 'debug') {\n        process.emitWarning(\n          '`node debug` is deprecated. Please use `node inspect` instead.',\n          'DeprecationWarning', 'DEP0068');\n      }\n\n      // Start the debugger agent.\n      process.nextTick(function() {\n        NativeModule.require('internal/deps/node-inspect/lib/_inspect').start();\n      });\n\n    } else if (process.profProcess) {\n      NativeModule.require('internal/v8_prof_processor');\n    } else {\n      // There is user code to be run.\n\n      // If this is a worker in cluster mode, start up the communication\n      // channel. This needs to be done before any user code gets executed\n      // (including preload modules).\n      if (process.argv[1] && process.env.NODE_UNIQUE_ID) {\n        const cluster = NativeModule.require('cluster');\n        cluster._setupWorker();\n        // Make sure it's not accidentally inherited by child processes.\n        delete process.env.NODE_UNIQUE_ID;\n      }\n\n      if (process._eval != null && !process._forceRepl) {\n        // User passed '-e' or '--eval' arguments to Node without '-i' or\n        // '--interactive'.\n        preloadModules();\n\n        const {\n          addBuiltinLibsToObject\n        } = NativeModule.require('internal/modules/cjs/helpers');\n        addBuiltinLibsToObject(global);\n        evalScript('[eval]');\n      } else if (process.argv[1] && process.argv[1] !== '-') {\n        // Make process.argv[1] into a full path.\n        const path = NativeModule.require('path');\n        process.argv[1] = path.resolve(process.argv[1]);\n\n        const CJSModule = NativeModule.require('internal/modules/cjs/loader');\n\n        preloadModules();\n        // Check if user passed `-c` or `--check` arguments to Node.\n        if (process._syntax_check_only != null) {\n          const fs = NativeModule.require('fs');\n          // Read the source.\n          const filename = CJSModule._resolveFilename(process.argv[1]);\n          const source = fs.readFileSync(filename, 'utf-8');\n          checkScriptSyntax(source, filename);\n          process.exit(0);\n        }\n        CJSModule.runMain();\n      } else {\n        preloadModules();\n        // If -i or --interactive were passed, or stdin is a TTY.\n        if (process._forceRepl || NativeModule.require('tty').isatty(0)) {\n          // REPL\n          const cliRepl = NativeModule.require('internal/repl');\n          cliRepl.createInternalRepl(process.env, function(err, repl) {\n            if (err) {\n              throw err;\n            }\n            repl.on('exit', function() {\n              if (repl._flushing) {\n                repl.pause();\n                return repl.once('flushHistory', function() {\n                  process.exit();\n                });\n              }\n              process.exit();\n            });\n          });\n\n          if (process._eval != null) {\n            // User passed '-e' or '--eval'\n            evalScript('[eval]');\n          }\n        } else {\n          // Read all of stdin - execute it.\n          process.stdin.setEncoding('utf8');\n\n          let code = '';\n          process.stdin.on('data', function(d) {\n            code += d;\n          });\n\n          process.stdin.on('end', function() {\n            if (process._syntax_check_only != null) {\n              checkScriptSyntax(code, '[stdin]');\n            } else {\n              process._eval = code;\n              evalScript('[stdin]');\n            }\n          });\n        }\n      }\n    }\n  }\n\n  function setupProcessObject() {\n    const EventEmitter = NativeModule.require('events');\n    const origProcProto = Object.getPrototypeOf(process);\n    Object.setPrototypeOf(origProcProto, EventEmitter.prototype);\n    EventEmitter.call(process);\n\n    _setupProcessObject(pushValueToArray);\n\n    function pushValueToArray() {\n      for (var i = 0; i < arguments.length; i++)\n        this.push(arguments[i]);\n    }\n  }\n\n  function setupGlobalVariables() {\n    Object.defineProperty(global, Symbol.toStringTag, {\n      value: 'global',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    global.process = process;\n    const util = NativeModule.require('util');\n\n    function makeGetter(name) {\n      return util.deprecate(function() {\n        return this;\n      }, `'${name}' is deprecated, use 'global'`, 'DEP0016');\n    }\n\n    function makeSetter(name) {\n      return util.deprecate(function(value) {\n        Object.defineProperty(this, name, {\n          configurable: true,\n          writable: true,\n          enumerable: true,\n          value: value\n        });\n      }, `'${name}' is deprecated, use 'global'`, 'DEP0016');\n    }\n\n    Object.defineProperties(global, {\n      GLOBAL: {\n        configurable: true,\n        get: makeGetter('GLOBAL'),\n        set: makeSetter('GLOBAL')\n      },\n      root: {\n        configurable: true,\n        get: makeGetter('root'),\n        set: makeSetter('root')\n      }\n    });\n\n    // This, as side effect, removes `setupBufferJS` from the buffer binding,\n    // and exposes it on `internal/buffer`.\n    NativeModule.require('internal/buffer');\n\n    global.Buffer = NativeModule.require('buffer').Buffer;\n    process.domain = null;\n    process._exiting = false;\n  }\n\n  function setupGlobalTimeouts() {\n    const timers = NativeModule.require('timers');\n    global.clearImmediate = timers.clearImmediate;\n    global.clearInterval = timers.clearInterval;\n    global.clearTimeout = timers.clearTimeout;\n    global.setImmediate = timers.setImmediate;\n    global.setInterval = timers.setInterval;\n    global.setTimeout = timers.setTimeout;\n  }\n\n  function setupGlobalConsole() {\n    const originalConsole = global.console;\n    // Setup Node.js global.console.\n    const wrappedConsole = NativeModule.require('console');\n    Object.defineProperty(global, 'console', {\n      configurable: true,\n      enumerable: false,\n      value: wrappedConsole,\n      writable: true\n    });\n    setupInspector(originalConsole, wrappedConsole);\n  }\n\n  function setupGlobalURL() {\n    const { URL, URLSearchParams } = NativeModule.require('internal/url');\n    Object.defineProperties(global, {\n      URL: {\n        value: URL,\n        writable: true,\n        configurable: true,\n        enumerable: false\n      },\n      URLSearchParams: {\n        value: URLSearchParams,\n        writable: true,\n        configurable: true,\n        enumerable: false\n      }\n    });\n  }\n\n  function setupDOMException() {\n    // Registers the constructor with C++.\n    NativeModule.require('internal/domexception');\n  }\n\n  function setupInspector(originalConsole, wrappedConsole) {\n    if (!process.config.variables.v8_enable_inspector) {\n      return;\n    }\n    const CJSModule = NativeModule.require('internal/modules/cjs/loader');\n    const { addCommandLineAPI, consoleCall } = process.binding('inspector');\n    // Setup inspector command line API.\n    const { makeRequireFunction } =\n      NativeModule.require('internal/modules/cjs/helpers');\n    const path = NativeModule.require('path');\n    const cwd = tryGetCwd(path);\n\n    const consoleAPIModule = new CJSModule('<inspector console>');\n    consoleAPIModule.paths =\n        CJSModule._nodeModulePaths(cwd).concat(CJSModule.globalPaths);\n    addCommandLineAPI('require', makeRequireFunction(consoleAPIModule));\n    const config = {};\n    for (const key of Object.keys(wrappedConsole)) {\n      if (!originalConsole.hasOwnProperty(key))\n        continue;\n      // If global console has the same method as inspector console,\n      // then wrap these two methods into one. Native wrapper will preserve\n      // the original stack.\n      wrappedConsole[key] = consoleCall.bind(wrappedConsole,\n                                             originalConsole[key],\n                                             wrappedConsole[key],\n                                             config);\n    }\n    for (const key of Object.keys(originalConsole)) {\n      if (wrappedConsole.hasOwnProperty(key))\n        continue;\n      wrappedConsole[key] = originalConsole[key];\n    }\n  }\n\n  function noop() {}\n\n  function setupProcessFatal() {\n    const {\n      executionAsyncId,\n      clearDefaultTriggerAsyncId,\n      clearAsyncIdStack,\n      hasAsyncIdStack,\n      afterHooksExist,\n      emitAfter\n    } = NativeModule.require('internal/async_hooks');\n\n    process._fatalException = function(er) {\n      // It's possible that defaultTriggerAsyncId was set for a constructor\n      // call that threw and was never cleared. So clear it now.\n      clearDefaultTriggerAsyncId();\n\n      if (exceptionHandlerState.captureFn !== null) {\n        exceptionHandlerState.captureFn(er);\n      } else if (!process.emit('uncaughtException', er)) {\n        // If someone handled it, then great.  otherwise, die in C++ land\n        // since that means that we'll exit the process, emit the 'exit' event.\n        try {\n          if (!process._exiting) {\n            process._exiting = true;\n            process.exitCode = 1;\n            process.emit('exit', 1);\n          }\n        } catch {\n          // Nothing to be done about it at this point.\n        }\n        try {\n          const { kExpandStackSymbol } = NativeModule.require('internal/util');\n          if (typeof er[kExpandStackSymbol] === 'function')\n            er[kExpandStackSymbol]();\n        } catch {\n          // Nothing to be done about it at this point.\n        }\n        return false;\n      }\n\n      // If we handled an error, then make sure any ticks get processed\n      // by ensuring that the next Immediate cycle isn't empty.\n      NativeModule.require('timers').setImmediate(noop);\n\n      // Emit the after() hooks now that the exception has been handled.\n      if (afterHooksExist()) {\n        do {\n          emitAfter(executionAsyncId());\n        } while (hasAsyncIdStack());\n      // Or completely empty the id stack.\n      } else {\n        clearAsyncIdStack();\n      }\n\n      return true;\n    };\n  }\n\n  function setupProcessICUVersions() {\n    const icu = process.binding('config').hasIntl ?\n      process.binding('icu') : undefined;\n    if (!icu) return;  // no Intl/ICU: nothing to add here.\n    // With no argument, getVersion() returns a comma separated list\n    // of possible types.\n    const versionTypes = icu.getVersion().split(',');\n\n    for (var n = 0; n < versionTypes.length; n++) {\n      const name = versionTypes[n];\n      const version = icu.getVersion(name);\n      Object.defineProperty(process.versions, name, {\n        writable: false,\n        enumerable: true,\n        value: version\n      });\n    }\n  }\n\n  function tryGetCwd(path) {\n    try {\n      return process.cwd();\n    } catch {\n      // getcwd(3) can fail if the current working directory has been deleted.\n      // Fall back to the directory name of the (absolute) executable path.\n      // It's not really correct but what are the alternatives?\n      return path.dirname(process.execPath);\n    }\n  }\n\n  function wrapForBreakOnFirstLine(source) {\n    if (!process._breakFirstLine)\n      return source;\n    const fn = `function() {\\n\\n${source};\\n\\n}`;\n    return `process.binding('inspector').callAndPauseOnStart(${fn}, {})`;\n  }\n\n  function evalScript(name, body = wrapForBreakOnFirstLine(process._eval)) {\n    const CJSModule = NativeModule.require('internal/modules/cjs/loader');\n    const path = NativeModule.require('path');\n    const cwd = tryGetCwd(path);\n\n    const module = new CJSModule(name);\n    module.filename = path.join(cwd, name);\n    module.paths = CJSModule._nodeModulePaths(cwd);\n    const script = `global.__filename = ${JSON.stringify(name)};\\n` +\n                   'global.exports = exports;\\n' +\n                   'global.module = module;\\n' +\n                   'global.__dirname = __dirname;\\n' +\n                   'global.require = require;\\n' +\n                   'return require(\"vm\").runInThisContext(' +\n                   `${JSON.stringify(body)}, { filename: ` +\n                   `${JSON.stringify(name)}, displayErrors: true });\\n`;\n    const result = module._compile(script, `${name}-wrapper`);\n    if (process._print_eval) console.log(result);\n    // Handle any nextTicks added in the first tick of the program.\n    process._tickCallback();\n  }\n\n  // Load preload modules.\n  function preloadModules() {\n    if (process._preload_modules) {\n      const {\n        _preloadModules\n      } = NativeModule.require('internal/modules/cjs/loader');\n      _preloadModules(process._preload_modules);\n    }\n  }\n\n  function checkScriptSyntax(source, filename) {\n    const CJSModule = NativeModule.require('internal/modules/cjs/loader');\n    const vm = NativeModule.require('vm');\n    const {\n      stripShebang, stripBOM\n    } = NativeModule.require('internal/modules/cjs/helpers');\n\n    // Remove Shebang.\n    source = stripShebang(source);\n    // Remove BOM.\n    source = stripBOM(source);\n    // Wrap it.\n    source = CJSModule.wrap(source);\n    // Compile the script, this will throw if it fails.\n    new vm.Script(source, { displayErrors: true, filename });\n  }\n\n  function setupAllowedFlags() {\n    // This builds process.allowedNodeEnvironmentFlags\n    // from data in the config binding\n\n    const replaceUnderscoresRegex = /_/g;\n    const leadingDashesRegex = /^--?/;\n    const trailingValuesRegex = /=.*$/;\n\n    // Save references so user code does not interfere\n    const replace = Function.call.bind(String.prototype.replace);\n    const has = Function.call.bind(Set.prototype.has);\n    const test = Function.call.bind(RegExp.prototype.test);\n\n    const get = () => {\n      const {\n        envSettings: { kAllowedInEnvironment }\n      } = internalBinding('options');\n      const { options, aliases } = NativeModule.require('internal/options');\n\n      const allowedNodeEnvironmentFlags = [];\n      for (const [name, info] of options) {\n        if (info.envVarSettings === kAllowedInEnvironment) {\n          allowedNodeEnvironmentFlags.push(name);\n        }\n      }\n\n      for (const [ from, expansion ] of aliases) {\n        let isAccepted = true;\n        for (const to of expansion) {\n          if (!to.startsWith('-') || to === '--') continue;\n          const recursiveExpansion = aliases.get(to);\n          if (recursiveExpansion) {\n            if (recursiveExpansion[0] === to)\n              recursiveExpansion.splice(0, 1);\n            expansion.push(...recursiveExpansion);\n            continue;\n          }\n          isAccepted = options.get(to).envVarSettings === kAllowedInEnvironment;\n          if (!isAccepted) break;\n        }\n        if (isAccepted) {\n          let canonical = from;\n          if (canonical.endsWith('='))\n            canonical = canonical.substr(0, canonical.length - 1);\n          if (canonical.endsWith(' <arg>'))\n            canonical = canonical.substr(0, canonical.length - 4);\n          allowedNodeEnvironmentFlags.push(canonical);\n        }\n      }\n\n      const trimLeadingDashes = (flag) => replace(flag, leadingDashesRegex, '');\n\n      // Save these for comparison against flags provided to\n      // process.allowedNodeEnvironmentFlags.has() which lack leading dashes.\n      // Avoid interference w/ user code by flattening `Set.prototype` into\n      // each object.\n      const nodeFlags = Object.defineProperties(\n        new Set(allowedNodeEnvironmentFlags.map(trimLeadingDashes)),\n        Object.getOwnPropertyDescriptors(Set.prototype)\n      );\n\n      class NodeEnvironmentFlagsSet extends Set {\n        constructor(...args) {\n          super(...args);\n\n          // the super constructor consumes `add`, but\n          // disallow any future adds.\n          this.add = () => this;\n        }\n\n        delete() {\n          // noop, `Set` API compatible\n          return false;\n        }\n\n        clear() {\n          // noop\n        }\n\n        has(key) {\n          // This will return `true` based on various possible\n          // permutations of a flag, including present/missing leading\n          // dash(es) and/or underscores-for-dashes.\n          // Strips any values after `=`, inclusive.\n          // TODO(addaleax): It might be more flexible to run the option parser\n          // on a dummy option set and see whether it rejects the argument or\n          // not.\n          if (typeof key === 'string') {\n            key = replace(key, replaceUnderscoresRegex, '-');\n            if (test(leadingDashesRegex, key)) {\n              key = replace(key, trailingValuesRegex, '');\n              return has(this, key);\n            }\n            return has(nodeFlags, key);\n          }\n          return false;\n        }\n      }\n\n      Object.freeze(NodeEnvironmentFlagsSet.prototype.constructor);\n      Object.freeze(NodeEnvironmentFlagsSet.prototype);\n\n      return process.allowedNodeEnvironmentFlags = Object.freeze(\n        new NodeEnvironmentFlagsSet(\n          allowedNodeEnvironmentFlags\n        ));\n    };\n\n    Object.defineProperty(process, 'allowedNodeEnvironmentFlags', {\n      get,\n      set(value) {\n        Object.defineProperty(this, 'allowedNodeEnvironmentFlags', {\n          value,\n          configurable: true,\n          enumerable: true,\n          writable: true\n        });\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n\n  startup();\n});\n"},{"scriptId":"59","url":"internal/modules/cjs/loader.js","source":"(function (exports, require, module, process, internalBinding) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nconst { NativeModule } = require('internal/bootstrap/loaders');\nconst util = require('util');\nconst { pathToFileURL } = require('internal/url');\nconst vm = require('vm');\nconst assert = require('assert').ok;\nconst fs = require('fs');\nconst internalFS = require('internal/fs/utils');\nconst path = require('path');\nconst {\n  internalModuleReadJSON,\n  internalModuleStat\n} = process.binding('fs');\nconst { safeGetenv } = process.binding('util');\nconst {\n  makeRequireFunction,\n  requireDepth,\n  stripBOM,\n  stripShebang\n} = require('internal/modules/cjs/helpers');\nconst { getOptionValue } = require('internal/options');\nconst preserveSymlinks = getOptionValue('--preserve-symlinks');\nconst preserveSymlinksMain = getOptionValue('--preserve-symlinks-main');\nconst experimentalModules = getOptionValue('--experimental-modules');\n\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_ARG_VALUE,\n  ERR_REQUIRE_ESM\n} = require('internal/errors').codes;\n\nmodule.exports = Module;\n\nlet asyncESM;\nlet ModuleJob;\nlet createDynamicModule;\nlet decorateErrorStack;\n\nfunction lazyLoadESM() {\n  asyncESM = require('internal/process/esm_loader');\n  ModuleJob = require('internal/modules/esm/module_job');\n  createDynamicModule = require(\n    'internal/modules/esm/create_dynamic_module');\n  decorateErrorStack = require('internal/util').decorateErrorStack;\n}\n\nconst {\n  CHAR_UPPERCASE_A,\n  CHAR_LOWERCASE_A,\n  CHAR_UPPERCASE_Z,\n  CHAR_LOWERCASE_Z,\n  CHAR_FORWARD_SLASH,\n  CHAR_BACKWARD_SLASH,\n  CHAR_COLON,\n  CHAR_DOT,\n  CHAR_UNDERSCORE,\n  CHAR_0,\n  CHAR_9,\n} = require('internal/constants');\n\nfunction stat(filename) {\n  filename = path.toNamespacedPath(filename);\n  const cache = stat.cache;\n  if (cache !== null) {\n    const result = cache.get(filename);\n    if (result !== undefined) return result;\n  }\n  const result = internalModuleStat(filename);\n  if (cache !== null) cache.set(filename, result);\n  return result;\n}\nstat.cache = null;\n\nfunction updateChildren(parent, child, scan) {\n  var children = parent && parent.children;\n  if (children && !(scan && children.includes(child)))\n    children.push(child);\n}\n\nfunction Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  updateChildren(parent, this, false);\n  this.filename = null;\n  this.loaded = false;\n  this.children = [];\n}\n\nconst builtinModules = Object.keys(NativeModule._source)\n  .filter(NativeModule.nonInternalExists);\n\nObject.freeze(builtinModules);\nModule.builtinModules = builtinModules;\n\nModule._cache = Object.create(null);\nModule._pathCache = Object.create(null);\nModule._extensions = Object.create(null);\nvar modulePaths = [];\nModule.globalPaths = [];\n\nModule.wrap = function(script) {\n  return Module.wrapper[0] + script + Module.wrapper[1];\n};\n\nModule.wrapper = [\n  '(function (exports, require, module, __filename, __dirname) { ',\n  '\\n});'\n];\n\nconst debug = util.debuglog('module');\n\nModule._debug = util.deprecate(debug, 'Module._debug is deprecated.',\n                               'DEP0077');\n\n// given a module name, and a list of paths to test, returns the first\n// matching file in the following precedence.\n//\n// require(\"a.<ext>\")\n//   -> a.<ext>\n//\n// require(\"a\")\n//   -> a\n//   -> a.<ext>\n//   -> a/index.<ext>\n\n// check if the directory is a package.json dir\nconst packageMainCache = Object.create(null);\n\nfunction readPackage(requestPath) {\n  const entry = packageMainCache[requestPath];\n  if (entry)\n    return entry;\n\n  const jsonPath = path.resolve(requestPath, 'package.json');\n  const json = internalModuleReadJSON(path.toNamespacedPath(jsonPath));\n\n  if (json === undefined) {\n    return false;\n  }\n\n  try {\n    return packageMainCache[requestPath] = JSON.parse(json).main;\n  } catch (e) {\n    e.path = jsonPath;\n    e.message = 'Error parsing ' + jsonPath + ': ' + e.message;\n    throw e;\n  }\n}\n\nfunction tryPackage(requestPath, exts, isMain) {\n  var pkg = readPackage(requestPath);\n\n  if (!pkg) return false;\n\n  var filename = path.resolve(requestPath, pkg);\n  return tryFile(filename, isMain) ||\n         tryExtensions(filename, exts, isMain) ||\n         tryExtensions(path.resolve(filename, 'index'), exts, isMain);\n}\n\n// In order to minimize unnecessary lstat() calls,\n// this cache is a list of known-real paths.\n// Set to an empty Map to reset.\nconst realpathCache = new Map();\n\n// check if the file exists and is not a directory\n// if using --preserve-symlinks and isMain is false,\n// keep symlinks intact, otherwise resolve to the\n// absolute realpath.\nfunction tryFile(requestPath, isMain) {\n  const rc = stat(requestPath);\n  if (preserveSymlinks && !isMain) {\n    return rc === 0 && path.resolve(requestPath);\n  }\n  return rc === 0 && toRealPath(requestPath);\n}\n\nfunction toRealPath(requestPath) {\n  return fs.realpathSync(requestPath, {\n    [internalFS.realpathCacheKey]: realpathCache\n  });\n}\n\n// given a path, check if the file exists with any of the set extensions\nfunction tryExtensions(p, exts, isMain) {\n  for (var i = 0; i < exts.length; i++) {\n    const filename = tryFile(p + exts[i], isMain);\n\n    if (filename) {\n      return filename;\n    }\n  }\n  return false;\n}\n\nvar warned = false;\nModule._findPath = function(request, paths, isMain) {\n  if (path.isAbsolute(request)) {\n    paths = [''];\n  } else if (!paths || paths.length === 0) {\n    return false;\n  }\n\n  var cacheKey = request + '\\x00' +\n                (paths.length === 1 ? paths[0] : paths.join('\\x00'));\n  var entry = Module._pathCache[cacheKey];\n  if (entry)\n    return entry;\n\n  var exts;\n  var trailingSlash = request.length > 0 &&\n    request.charCodeAt(request.length - 1) === CHAR_FORWARD_SLASH;\n  if (!trailingSlash) {\n    trailingSlash = /(?:^|\\/)\\.?\\.$/.test(request);\n  }\n\n  // For each path\n  for (var i = 0; i < paths.length; i++) {\n    // Don't search further if path doesn't exist\n    const curPath = paths[i];\n    if (curPath && stat(curPath) < 1) continue;\n    var basePath = path.resolve(curPath, request);\n    var filename;\n\n    var rc = stat(basePath);\n    if (!trailingSlash) {\n      if (rc === 0) {  // File.\n        if (!isMain) {\n          if (preserveSymlinks) {\n            filename = path.resolve(basePath);\n          } else {\n            filename = toRealPath(basePath);\n          }\n        } else if (preserveSymlinksMain) {\n          // For the main module, we use the preserveSymlinksMain flag instead\n          // mainly for backward compatibility, as the preserveSymlinks flag\n          // historically has not applied to the main module.  Most likely this\n          // was intended to keep .bin/ binaries working, as following those\n          // symlinks is usually required for the imports in the corresponding\n          // files to resolve; that said, in some use cases following symlinks\n          // causes bigger problems which is why the preserveSymlinksMain option\n          // is needed.\n          filename = path.resolve(basePath);\n        } else {\n          filename = toRealPath(basePath);\n        }\n      }\n\n      if (!filename) {\n        // try it with each of the extensions\n        if (exts === undefined)\n          exts = Object.keys(Module._extensions);\n        filename = tryExtensions(basePath, exts, isMain);\n      }\n    }\n\n    if (!filename && rc === 1) {  // Directory.\n      // try it with each of the extensions at \"index\"\n      if (exts === undefined)\n        exts = Object.keys(Module._extensions);\n      filename = tryPackage(basePath, exts, isMain);\n      if (!filename) {\n        filename = tryExtensions(path.resolve(basePath, 'index'), exts, isMain);\n      }\n    }\n\n    if (filename) {\n      // Warn once if '.' resolved outside the module dir\n      if (request === '.' && i > 0) {\n        if (!warned) {\n          warned = true;\n          process.emitWarning(\n            'warning: require(\\'.\\') resolved outside the package ' +\n            'directory. This functionality is deprecated and will be removed ' +\n            'soon.',\n            'DeprecationWarning', 'DEP0019');\n        }\n      }\n\n      Module._pathCache[cacheKey] = filename;\n      return filename;\n    }\n  }\n  return false;\n};\n\n// 'node_modules' character codes reversed\nvar nmChars = [ 115, 101, 108, 117, 100, 111, 109, 95, 101, 100, 111, 110 ];\nvar nmLen = nmChars.length;\nif (process.platform === 'win32') {\n  // 'from' is the __dirname of the module.\n  Module._nodeModulePaths = function(from) {\n    // guarantee that 'from' is absolute.\n    from = path.resolve(from);\n\n    // note: this approach *only* works when the path is guaranteed\n    // to be absolute.  Doing a fully-edge-case-correct path.split\n    // that works on both Windows and Posix is non-trivial.\n\n    // return root node_modules when path is 'D:\\\\'.\n    // path.resolve will make sure from.length >=3 in Windows.\n    if (from.charCodeAt(from.length - 1) === CHAR_BACKWARD_SLASH &&\n        from.charCodeAt(from.length - 2) === CHAR_COLON)\n      return [from + 'node_modules'];\n\n    const paths = [];\n    var p = 0;\n    var last = from.length;\n    for (var i = from.length - 1; i >= 0; --i) {\n      const code = from.charCodeAt(i);\n      // The path segment separator check ('\\' and '/') was used to get\n      // node_modules path for every path segment.\n      // Use colon as an extra condition since we can get node_modules\n      // path for drive root like 'C:\\node_modules' and don't need to\n      // parse drive name.\n      if (code === CHAR_BACKWARD_SLASH ||\n          code === CHAR_FORWARD_SLASH ||\n          code === CHAR_COLON) {\n        if (p !== nmLen)\n          paths.push(from.slice(0, last) + '\\\\node_modules');\n        last = i;\n        p = 0;\n      } else if (p !== -1) {\n        if (nmChars[p] === code) {\n          ++p;\n        } else {\n          p = -1;\n        }\n      }\n    }\n\n    return paths;\n  };\n} else { // posix\n  // 'from' is the __dirname of the module.\n  Module._nodeModulePaths = function(from) {\n    // guarantee that 'from' is absolute.\n    from = path.resolve(from);\n    // Return early not only to avoid unnecessary work, but to *avoid* returning\n    // an array of two items for a root: [ '//node_modules', '/node_modules' ]\n    if (from === '/')\n      return ['/node_modules'];\n\n    // note: this approach *only* works when the path is guaranteed\n    // to be absolute.  Doing a fully-edge-case-correct path.split\n    // that works on both Windows and Posix is non-trivial.\n    const paths = [];\n    var p = 0;\n    var last = from.length;\n    for (var i = from.length - 1; i >= 0; --i) {\n      const code = from.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        if (p !== nmLen)\n          paths.push(from.slice(0, last) + '/node_modules');\n        last = i;\n        p = 0;\n      } else if (p !== -1) {\n        if (nmChars[p] === code) {\n          ++p;\n        } else {\n          p = -1;\n        }\n      }\n    }\n\n    // Append /node_modules to handle root paths.\n    paths.push('/node_modules');\n\n    return paths;\n  };\n}\n\n\n// 'index.' character codes\nvar indexChars = [ 105, 110, 100, 101, 120, 46 ];\nvar indexLen = indexChars.length;\nModule._resolveLookupPaths = function(request, parent, newReturn) {\n  if (NativeModule.nonInternalExists(request)) {\n    debug('looking for %j in []', request);\n    return (newReturn ? null : [request, []]);\n  }\n\n  // Check for relative path\n  if (request.length < 2 ||\n      request.charCodeAt(0) !== CHAR_DOT ||\n      (request.charCodeAt(1) !== CHAR_DOT &&\n       request.charCodeAt(1) !== CHAR_FORWARD_SLASH)) {\n    var paths = modulePaths;\n    if (parent) {\n      if (!parent.paths)\n        paths = parent.paths = [];\n      else\n        paths = parent.paths.concat(paths);\n    }\n\n    // Maintain backwards compat with certain broken uses of require('.')\n    // by putting the module's directory in front of the lookup paths.\n    if (request === '.') {\n      if (parent && parent.filename) {\n        paths.unshift(path.dirname(parent.filename));\n      } else {\n        paths.unshift(path.resolve(request));\n      }\n    }\n\n    debug('looking for %j in %j', request, paths);\n    return (newReturn ? (paths.length > 0 ? paths : null) : [request, paths]);\n  }\n\n  // with --eval, parent.id is not set and parent.filename is null\n  if (!parent || !parent.id || !parent.filename) {\n    // make require('./path/to/foo') work - normally the path is taken\n    // from realpath(__filename) but with eval there is no filename\n    var mainPaths = ['.'].concat(Module._nodeModulePaths('.'), modulePaths);\n\n    debug('looking for %j in %j', request, mainPaths);\n    return (newReturn ? mainPaths : [request, mainPaths]);\n  }\n\n  // Is the parent an index module?\n  // We can assume the parent has a valid extension,\n  // as it already has been accepted as a module.\n  const base = path.basename(parent.filename);\n  var parentIdPath;\n  if (base.length > indexLen) {\n    var i = 0;\n    for (; i < indexLen; ++i) {\n      if (indexChars[i] !== base.charCodeAt(i))\n        break;\n    }\n    if (i === indexLen) {\n      // We matched 'index.', let's validate the rest\n      for (; i < base.length; ++i) {\n        const code = base.charCodeAt(i);\n        if (code !== CHAR_UNDERSCORE &&\n            (code < CHAR_0 || code > CHAR_9) &&\n            (code < CHAR_UPPERCASE_A || code > CHAR_UPPERCASE_Z) &&\n            (code < CHAR_LOWERCASE_A || code > CHAR_LOWERCASE_Z))\n          break;\n      }\n      if (i === base.length) {\n        // Is an index module\n        parentIdPath = parent.id;\n      } else {\n        // Not an index module\n        parentIdPath = path.dirname(parent.id);\n      }\n    } else {\n      // Not an index module\n      parentIdPath = path.dirname(parent.id);\n    }\n  } else {\n    // Not an index module\n    parentIdPath = path.dirname(parent.id);\n  }\n  var id = path.resolve(parentIdPath, request);\n\n  // make sure require('./path') and require('path') get distinct ids, even\n  // when called from the toplevel js file\n  if (parentIdPath === '.' && id.indexOf('/') === -1) {\n    id = './' + id;\n  }\n\n  debug('RELATIVE: requested: %s set ID to: %s from %s', request, id,\n        parent.id);\n\n  var parentDir = [path.dirname(parent.filename)];\n  debug('looking for %j in %j', id, parentDir);\n  return (newReturn ? parentDir : [id, parentDir]);\n};\n\n// Check the cache for the requested file.\n// 1. If a module already exists in the cache: return its exports object.\n// 2. If the module is native: call `NativeModule.require()` with the\n//    filename and return the result.\n// 3. Otherwise, create a new module for the file and save it to the cache.\n//    Then have it load  the file contents before returning its exports\n//    object.\nModule._load = function(request, parent, isMain) {\n  if (parent) {\n    debug('Module._load REQUEST %s parent: %s', request, parent.id);\n  }\n\n  var filename = Module._resolveFilename(request, parent, isMain);\n\n  var cachedModule = Module._cache[filename];\n  if (cachedModule) {\n    updateChildren(parent, cachedModule, true);\n    return cachedModule.exports;\n  }\n\n  if (NativeModule.nonInternalExists(filename)) {\n    debug('load native module %s', request);\n    return NativeModule.require(filename);\n  }\n\n  // Don't call updateChildren(), Module constructor already does.\n  var module = new Module(filename, parent);\n\n  if (isMain) {\n    process.mainModule = module;\n    module.id = '.';\n  }\n\n  Module._cache[filename] = module;\n\n  tryModuleLoad(module, filename);\n\n  return module.exports;\n};\n\nfunction tryModuleLoad(module, filename) {\n  var threw = true;\n  try {\n    module.load(filename);\n    threw = false;\n  } finally {\n    if (threw) {\n      delete Module._cache[filename];\n    }\n  }\n}\n\nModule._resolveFilename = function(request, parent, isMain, options) {\n  if (NativeModule.nonInternalExists(request)) {\n    return request;\n  }\n\n  var paths;\n\n  if (typeof options === 'object' && options !== null &&\n      Array.isArray(options.paths)) {\n    const fakeParent = new Module('', null);\n\n    paths = [];\n\n    for (var i = 0; i < options.paths.length; i++) {\n      const path = options.paths[i];\n      fakeParent.paths = Module._nodeModulePaths(path);\n      const lookupPaths = Module._resolveLookupPaths(request, fakeParent, true);\n\n      if (!paths.includes(path))\n        paths.push(path);\n\n      for (var j = 0; j < lookupPaths.length; j++) {\n        if (!paths.includes(lookupPaths[j]))\n          paths.push(lookupPaths[j]);\n      }\n    }\n  } else {\n    paths = Module._resolveLookupPaths(request, parent, true);\n  }\n\n  // look up the filename first, since that's the cache key.\n  var filename = Module._findPath(request, paths, isMain);\n  if (!filename) {\n    // eslint-disable-next-line no-restricted-syntax\n    var err = new Error(`Cannot find module '${request}'`);\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  }\n  return filename;\n};\n\n\n// Given a file name, pass it to the proper extension handler.\nModule.prototype.load = function(filename) {\n  debug('load %j for module %j', filename, this.id);\n\n  assert(!this.loaded);\n  this.filename = filename;\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\n\n  var extension = path.extname(filename) || '.js';\n  if (!Module._extensions[extension]) extension = '.js';\n  Module._extensions[extension](this, filename);\n  this.loaded = true;\n\n  if (experimentalModules) {\n    if (asyncESM === undefined) lazyLoadESM();\n    const ESMLoader = asyncESM.ESMLoader;\n    const url = pathToFileURL(filename);\n    const urlString = `${url}`;\n    const exports = this.exports;\n    if (ESMLoader.moduleMap.has(urlString) !== true) {\n      ESMLoader.moduleMap.set(\n        urlString,\n        new ModuleJob(ESMLoader, url, async () => {\n          const ctx = createDynamicModule(\n            ['default'], url);\n          ctx.reflect.exports.default.set(exports);\n          return ctx;\n        })\n      );\n    } else {\n      const job = ESMLoader.moduleMap.get(urlString);\n      if (job.reflect)\n        job.reflect.exports.default.set(exports);\n    }\n  }\n};\n\n\n// Loads a module at the given file path. Returns that module's\n// `exports` property.\nModule.prototype.require = function(id) {\n  if (typeof id !== 'string') {\n    throw new ERR_INVALID_ARG_TYPE('id', 'string', id);\n  }\n  if (id === '') {\n    throw new ERR_INVALID_ARG_VALUE('id', id,\n                                    'must be a non-empty string');\n  }\n  return Module._load(id, this, /* isMain */ false);\n};\n\n\n// Resolved path to process.argv[1] will be lazily placed here\n// (needed for setting breakpoint when called with --inspect-brk)\nvar resolvedArgv;\n\n\n// Run the file contents in the correct scope or sandbox. Expose\n// the correct helper variables (require, module, exports) to\n// the file.\n// Returns exception, if any.\nModule.prototype._compile = function(content, filename) {\n\n  content = stripShebang(content);\n\n  // create wrapper function\n  var wrapper = Module.wrap(content);\n\n  var compiledWrapper = vm.runInThisContext(wrapper, {\n    filename: filename,\n    lineOffset: 0,\n    displayErrors: true\n  });\n\n  var inspectorWrapper = null;\n  if (process._breakFirstLine && process._eval == null) {\n    if (!resolvedArgv) {\n      // we enter the repl if we're not given a filename argument.\n      if (process.argv[1]) {\n        resolvedArgv = Module._resolveFilename(process.argv[1], null, false);\n      } else {\n        resolvedArgv = 'repl';\n      }\n    }\n\n    // Set breakpoint on module start\n    if (filename === resolvedArgv) {\n      delete process._breakFirstLine;\n      inspectorWrapper = process.binding('inspector').callAndPauseOnStart;\n    }\n  }\n  var dirname = path.dirname(filename);\n  var require = makeRequireFunction(this);\n  var depth = requireDepth;\n  if (depth === 0) stat.cache = new Map();\n  var result;\n  if (inspectorWrapper) {\n    result = inspectorWrapper(compiledWrapper, this.exports, this.exports,\n                              require, this, filename, dirname);\n  } else {\n    result = compiledWrapper.call(this.exports, this.exports, require, this,\n                                  filename, dirname);\n  }\n  if (depth === 0) stat.cache = null;\n  return result;\n};\n\n\n// Native extension for .js\nModule._extensions['.js'] = function(module, filename) {\n  var content = fs.readFileSync(filename, 'utf8');\n  module._compile(stripBOM(content), filename);\n};\n\n\n// Native extension for .json\nModule._extensions['.json'] = function(module, filename) {\n  var content = fs.readFileSync(filename, 'utf8');\n  try {\n    module.exports = JSON.parse(stripBOM(content));\n  } catch (err) {\n    err.message = filename + ': ' + err.message;\n    throw err;\n  }\n};\n\n\n// Native extension for .node\nModule._extensions['.node'] = function(module, filename) {\n  return process.dlopen(module, path.toNamespacedPath(filename));\n};\n\nif (experimentalModules) {\n  if (asyncESM === undefined) lazyLoadESM();\n  Module._extensions['.mjs'] = function(module, filename) {\n    throw new ERR_REQUIRE_ESM(filename);\n  };\n}\n\n// bootstrap main module.\nModule.runMain = function() {\n  // Load the main module--the command line argument.\n  if (experimentalModules) {\n    if (asyncESM === undefined) lazyLoadESM();\n    asyncESM.loaderPromise.then((loader) => {\n      return loader.import(pathToFileURL(process.argv[1]).pathname);\n    })\n    .catch((e) => {\n      decorateErrorStack(e);\n      console.error(e);\n      process.exit(1);\n    });\n  } else {\n    Module._load(process.argv[1], null, true);\n  }\n  // Handle any nextTicks added in the first tick of the program\n  process._tickCallback();\n};\n\nModule.createRequireFromPath = (filename) => {\n  const m = new Module(filename);\n  m.filename = filename;\n  m.paths = Module._nodeModulePaths(path.dirname(filename));\n  return makeRequireFunction(m);\n};\n\nModule._initPaths = function() {\n  const isWindows = process.platform === 'win32';\n\n  var homeDir;\n  var nodePath;\n  if (isWindows) {\n    homeDir = process.env.USERPROFILE;\n    nodePath = process.env.NODE_PATH;\n  } else {\n    homeDir = safeGetenv('HOME');\n    nodePath = safeGetenv('NODE_PATH');\n  }\n\n  // $PREFIX/lib/node, where $PREFIX is the root of the Node.js installation.\n  var prefixDir;\n  // process.execPath is $PREFIX/bin/node except on Windows where it is\n  // $PREFIX\\node.exe.\n  if (isWindows) {\n    prefixDir = path.resolve(process.execPath, '..');\n  } else {\n    prefixDir = path.resolve(process.execPath, '..', '..');\n  }\n  var paths = [path.resolve(prefixDir, 'lib', 'node')];\n\n  if (homeDir) {\n    paths.unshift(path.resolve(homeDir, '.node_libraries'));\n    paths.unshift(path.resolve(homeDir, '.node_modules'));\n  }\n\n  if (nodePath) {\n    paths = nodePath.split(path.delimiter).filter(function pathsFilterCB(path) {\n      return !!path;\n    }).concat(paths);\n  }\n\n  modulePaths = paths;\n\n  // clone as a shallow copy, for introspection.\n  Module.globalPaths = modulePaths.slice(0);\n};\n\nModule._preloadModules = function(requests) {\n  if (!Array.isArray(requests))\n    return;\n\n  // Preloaded modules have a dummy parent module which is deemed to exist\n  // in the current working directory. This seeds the search path for\n  // preloaded modules.\n  var parent = new Module('internal/preload', null);\n  try {\n    parent.paths = Module._nodeModulePaths(process.cwd());\n  } catch (e) {\n    if (e.code !== 'ENOENT') {\n      throw e;\n    }\n  }\n  for (var n = 0; n < requests.length; n++)\n    parent.require(requests[n]);\n};\n\nModule._initPaths();\n\n// Backwards compatibility\nModule.Module = Module;\n\n});"},{"scriptId":"47","url":"internal/process/next_tick.js","source":"(function (exports, require, module, process, internalBinding) {'use strict';\n\nexports.setup = setupNextTick;\n\nfunction setupNextTick(_setupNextTick, _setupPromises) {\n  const {\n    getDefaultTriggerAsyncId,\n    newAsyncId,\n    initHooksExist,\n    destroyHooksExist,\n    emitInit,\n    emitBefore,\n    emitAfter,\n    emitDestroy,\n    symbols: { async_id_symbol, trigger_async_id_symbol }\n  } = require('internal/async_hooks');\n  const emitPromiseRejectionWarnings =\n    require('internal/process/promises').setup(_setupPromises);\n  const { ERR_INVALID_CALLBACK } = require('internal/errors').codes;\n  const FixedQueue = require('internal/fixed_queue');\n\n  // tickInfo is used so that the C++ code in src/node.cc can\n  // have easy access to our nextTick state, and avoid unnecessary\n  // calls into JS land.\n  // runMicrotasks is used to run V8's micro task queue.\n  const [\n    tickInfo,\n    runMicrotasks\n  ] = _setupNextTick(_tickCallback);\n\n  // *Must* match Environment::TickInfo::Fields in src/env.h.\n  const kHasScheduled = 0;\n  const kHasPromiseRejections = 1;\n\n  const queue = new FixedQueue();\n\n  process.nextTick = nextTick;\n  // Needs to be accessible from beyond this scope.\n  process._tickCallback = _tickCallback;\n\n  function _tickCallback() {\n    let tock;\n    do {\n      while (tock = queue.shift()) {\n        const asyncId = tock[async_id_symbol];\n        emitBefore(asyncId, tock[trigger_async_id_symbol]);\n        // emitDestroy() places the async_id_symbol into an asynchronous queue\n        // that calls the destroy callback in the future. It's called before\n        // calling tock.callback so destroy will be called even if the callback\n        // throws an exception that is handled by 'uncaughtException' or a\n        // domain.\n        // TODO(trevnorris): This is a bit of a hack. It relies on the fact\n        // that nextTick() doesn't allow the event loop to proceed, but if\n        // any async hooks are enabled during the callback's execution then\n        // this tock's after hook will be called, but not its destroy hook.\n        if (destroyHooksExist())\n          emitDestroy(asyncId);\n\n        const callback = tock.callback;\n        if (tock.args === undefined)\n          callback();\n        else\n          Reflect.apply(callback, undefined, tock.args);\n\n        emitAfter(asyncId);\n      }\n      tickInfo[kHasScheduled] = 0;\n      runMicrotasks();\n    } while (!queue.isEmpty() || emitPromiseRejectionWarnings());\n    tickInfo[kHasPromiseRejections] = 0;\n  }\n\n  class TickObject {\n    constructor(callback, args, triggerAsyncId) {\n      // this must be set to null first to avoid function tracking\n      // on the hidden class, revisit in V8 versions after 6.2\n      this.callback = null;\n      this.callback = callback;\n      this.args = args;\n\n      const asyncId = newAsyncId();\n      this[async_id_symbol] = asyncId;\n      this[trigger_async_id_symbol] = triggerAsyncId;\n\n      if (initHooksExist()) {\n        emitInit(asyncId,\n                 'TickObject',\n                 triggerAsyncId,\n                 this);\n      }\n    }\n  }\n\n  // `nextTick()` will not enqueue any callback when the process is about to\n  // exit since the callback would not have a chance to be executed.\n  function nextTick(callback) {\n    if (typeof callback !== 'function')\n      throw new ERR_INVALID_CALLBACK();\n\n    if (process._exiting)\n      return;\n\n    var args;\n    switch (arguments.length) {\n      case 1: break;\n      case 2: args = [arguments[1]]; break;\n      case 3: args = [arguments[1], arguments[2]]; break;\n      case 4: args = [arguments[1], arguments[2], arguments[3]]; break;\n      default:\n        args = new Array(arguments.length - 1);\n        for (var i = 1; i < arguments.length; i++)\n          args[i - 1] = arguments[i];\n    }\n\n    if (queue.isEmpty())\n      tickInfo[kHasScheduled] = 1;\n    queue.push(new TickObject(callback, args, getDefaultTriggerAsyncId()));\n  }\n}\n\n});"},{"scriptId":"65","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/runtime.js","source":"(function (exports, require, module, __filename, __dirname) { 'use strict'\n\nconst fs = require('fs')\nconst util = require('util')\n\nconst fsWriteFile = util.promisify(fs.writeFile)\n\nmodule.exports = {\n  version: require('./package.json').version,\n  startProfiling\n}\n\nconst createSession = require('./lib/session')\nconst getScripts = require('./lib/scripts')\nconst getMeta = require('./lib/meta-data')\nconst startMetrics = require('./lib/metrics')\n\nconst debug = require('./lib/debug')(__filename)\n\nconst DefaultOptions = {\n  writeProfile: null,\n  scripts: false,\n  metaData: true,\n  metrics: true,\n  samplingInterval: 10 // microseconds; 1000 milliseconds = 1 microsecond\n}\n\nlet CurrentlyProfiling = false\n\n// Start profiling, resolving to a function which stops the profile and resolves\n// the profiling results.\nasync function startProfiling (options = {}) {\n  options = Object.assign({}, DefaultOptions, options)\n\n  if (options.writeProfile != null) {\n    switch (typeof options.writeProfile) {\n      case 'string': break\n      case 'function': break\n      default:\n        throw new Error(`invalid value for writeProfile option: ${options.writeProfile}`)\n    }\n  }\n\n  if (CurrentlyProfiling) {\n    throw new Error(`already profiling`)\n  }\n\n  const session = await createSession()\n  const stopMetrics = await startMetrics()\n\n  const interval = options.samplingInterval\n\n  debug('starting profile')\n\n  await session.post('Runtime.runIfWaitingForDebugger')\n  await session.post('Runtime.enable')\n  await session.post('Profiler.enable')\n  await session.post('Profiler.setSamplingInterval', { interval })\n  await session.post('Profiler.start')\n\n  let alreadyStopped = false\n  return stopProfiling\n\n  async function stopProfiling () {\n    if (alreadyStopped) throw new Error('profile already stopped')\n    alreadyStopped = true\n\n    const { profile } = await session.post('Profiler.stop')\n\n    debug('stopping profile')\n\n    let metaData, metrics, scripts\n\n    if (options.metaData) metaData = await getMeta()\n    if (options.metrics) metrics = await stopMetrics()\n    if (options.scripts) scripts = await getScripts(session, profile)\n\n    await session.destroy()\n\n    // build result\n    let result = {}\n    if (metaData) result.metaData = metaData\n    if (metrics) result.metrics = metrics\n\n    Object.assign(result, profile)\n    if (scripts) result.scripts = scripts\n\n    if (options.writeProfile) {\n      await invokeFileWriter(options.writeProfile, result)\n    }\n\n    return result\n  }\n}\n\nasync function invokeFileWriter (fileNameOrFn, profile) {\n  let fn = fileNameOrFn\n  let fileName = fileNameOrFn\n\n  if (typeof fileName === 'string') {\n    fn = writeFile\n  }\n\n  if (typeof fn !== 'function') {\n    throw new Error(`invalid value for writeProfile option: ${fileNameOrFn}`)\n  }\n\n  try {\n    await fn(profile)\n  } catch (err) {\n    debug(`error writing profile: ${err.message}`)\n  }\n\n  // write the profile to a file\n  async function writeFile (profile) {\n    debug(`writing profile to ${fileName}`)\n\n    try {\n      await fsWriteFile(fileName, JSON.stringify(profile))\n    } catch (err) {\n      debug(`error writing profile to ${fileName}: ${err.message}`)\n    }\n  }\n}\n\n});"},{"scriptId":"66","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/lib/session.js","source":"(function (exports, require, module, __filename, __dirname) { 'use strict'\n\nmodule.exports = create\n\nconst debug = require('./debug')(__filename)\n\nlet inspector = null\ntry {\n  inspector = require('inspector')\n} catch (err) {\n  // inspector will be null :-(\n  debug('inspector module not available')\n}\n\nconst createDeferred = require('./deferred')\n\nasync function create () {\n  debug('creating session')\n\n  if (inspector == null) {\n    throw new Error('the inspector module is not available for this version of node')\n  }\n\n  let session = null\n  try {\n    session = new inspector.Session()\n  } catch (err) {\n    debug(`error creating session: ${err.message}`)\n    throw new Error(`error creating inspector session: ${err.message}`)\n  }\n\n  try {\n    session.connect()\n  } catch (err) {\n    debug(`error connecting to session: ${err.message}`)\n    throw new Error(`error connecting inspector session: ${err.message}`)\n  }\n\n  return new Session(session)\n}\n\nclass Session {\n  constructor (session) {\n    this._session = session\n  }\n\n  async destroy () {\n    debug(`destroying session`)\n    this._session.disconnect()\n    this._session = null\n  }\n\n  async post (method, args) {\n    debug(`posting method ${method} ${JSON.stringify(args)}`)\n    if (this._session == null) {\n      throw new Error('session disconnected')\n    }\n\n    const deferred = createDeferred()\n\n    this._session.post(method, args, (err, response) => {\n      if (err) {\n        debug(`error from method ${method}: ${err.message}`)\n        return deferred.reject(err)\n      }\n      deferred.resolve(response)\n    })\n\n    return deferred.promise\n  }\n}\n\n});"},{"scriptId":"77","url":"inspector.js","source":"(function (exports, require, module, process, internalBinding) {'use strict';\n\nconst EventEmitter = require('events');\nconst {\n  ERR_INSPECTOR_ALREADY_CONNECTED,\n  ERR_INSPECTOR_CLOSED,\n  ERR_INSPECTOR_NOT_AVAILABLE,\n  ERR_INSPECTOR_NOT_CONNECTED,\n  ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_CALLBACK\n} = require('internal/errors').codes;\nconst { validateString } = require('internal/validators');\nconst util = require('util');\nconst { Connection, open, url } = process.binding('inspector');\nconst { originalConsole } = require('internal/process/per_thread');\n\nif (!Connection)\n  throw new ERR_INSPECTOR_NOT_AVAILABLE();\n\nconst connectionSymbol = Symbol('connectionProperty');\nconst messageCallbacksSymbol = Symbol('messageCallbacks');\nconst nextIdSymbol = Symbol('nextId');\nconst onMessageSymbol = Symbol('onMessage');\n\nclass Session extends EventEmitter {\n  constructor() {\n    super();\n    this[connectionSymbol] = null;\n    this[nextIdSymbol] = 1;\n    this[messageCallbacksSymbol] = new Map();\n  }\n\n  connect() {\n    if (this[connectionSymbol])\n      throw new ERR_INSPECTOR_ALREADY_CONNECTED('The inspector session');\n    const connection =\n      new Connection((message) => this[onMessageSymbol](message));\n    if (connection.sessionAttached) {\n      throw new ERR_INSPECTOR_ALREADY_CONNECTED('Another inspector session');\n    }\n    this[connectionSymbol] = connection;\n  }\n\n  [onMessageSymbol](message) {\n    const parsed = JSON.parse(message);\n    try {\n      if (parsed.id) {\n        const callback = this[messageCallbacksSymbol].get(parsed.id);\n        this[messageCallbacksSymbol].delete(parsed.id);\n        if (callback)\n          callback(parsed.error || null, parsed.result || null);\n      } else {\n        this.emit(parsed.method, parsed);\n        this.emit('inspectorNotification', parsed);\n      }\n    } catch (error) {\n      process.emitWarning(error);\n    }\n  }\n\n  post(method, params, callback) {\n    validateString(method, 'method');\n    if (!callback && util.isFunction(params)) {\n      callback = params;\n      params = null;\n    }\n    if (params && typeof params !== 'object') {\n      throw new ERR_INVALID_ARG_TYPE('params', 'Object', params);\n    }\n    if (callback && typeof callback !== 'function') {\n      throw new ERR_INVALID_CALLBACK();\n    }\n\n    if (!this[connectionSymbol]) {\n      throw new ERR_INSPECTOR_NOT_CONNECTED();\n    }\n    const id = this[nextIdSymbol]++;\n    const message = { id, method };\n    if (params) {\n      message.params = params;\n    }\n    if (callback) {\n      this[messageCallbacksSymbol].set(id, callback);\n    }\n    this[connectionSymbol].dispatch(JSON.stringify(message));\n  }\n\n  disconnect() {\n    if (!this[connectionSymbol])\n      return;\n    this[connectionSymbol].disconnect();\n    this[connectionSymbol] = null;\n    const remainingCallbacks = this[messageCallbacksSymbol].values();\n    for (const callback of remainingCallbacks) {\n      process.nextTick(callback, new ERR_INSPECTOR_CLOSED());\n    }\n    this[messageCallbacksSymbol].clear();\n    this[nextIdSymbol] = 1;\n  }\n}\n\nmodule.exports = {\n  open: (port, host, wait) => open(port, host, !!wait),\n  close: process._debugEnd,\n  url: url,\n  console: originalConsole,\n  Session\n};\n\n});"},{"scriptId":"62","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/run-profile-extras-verbose.js","source":"(function (exports, require, module, __filename, __dirname) { 'use strict'\n\nconst codeToProfile = require('./code-to-profile')\n\nmodule.exports = {\n  main,\n  run\n}\n\nconst noProRuntime = require('../runtime')\n\nif (require.main === module) main()\n\nasync function main () {\n  const profileFile = process.argv[2]\n  const profile = await run(profileFile)\n  if (profileFile == null) {\n    console.log(JSON.stringify(profile, null, 4))\n  } else {\n    console.log(`generated ${profileFile}`)\n  }\n}\n\nasync function run (profileFile) {\n  const appOpts = {\n    count: 3,\n    delay: 100,\n    verbose: true\n  }\n\n  const profilingOpts = {\n    metaData: true,\n    metrics: true,\n    scripts: true,\n    writeProfile: profileFile\n  }\n\n  return runProfile(profilingOpts, appOpts)\n}\n\nasync function runProfile (profilingOpts, appOpts) {\n  const stopProfiling = await noProRuntime.startProfiling(profilingOpts)\n\n  await codeToProfile(appOpts)\n\n  return stopProfiling()\n}\n\n});"},{"scriptId":"63","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/test/code-to-profile.js","source":"(function (exports, require, module, __filename, __dirname) { 'use strict'\n\n// exposes an async function suitable for profiling\n\nmodule.exports = codeToProfile\n\nconst createDeferred = require('../lib/deferred')\n\nconst OptVerbose = !!process.env.NO_PRO_CTP_VERBOSE\nconst OptCount = parseInt(process.env.NO_PRO_CTP_COUNT, 10) || 5\nconst OptDelay = parseInt(process.env.NO_PRO_CTP_DELAY, 10) || 10\n\nasync function main () {\n  await codeToProfile()\n}\n\nasync function codeToProfile (options = {}) {\n  const {\n    verbose = OptVerbose,\n    count = OptCount,\n    delay = OptDelay\n  } = options\n\n  if (verbose) process.env.DEBUG = '*'\n\n  const debug = require('../lib/debug')(__filename)\n\n  debug('running with delaySync')\n  for (let i = 0; i < count; i++) {\n    const value = factorialSync(i, delay)\n    debug(`${i}!: ${value}`)\n  }\n\n  debug('')\n  debug('running with delayAsync')\n  for (let i = 0; i < count; i++) {\n    const value = await factorialAsync(i, delay)\n    debug(`${i}!: ${value}`)\n  }\n}\n\nfunction factorialSync (n, delay) {\n  delaySync(delay)\n\n  if (n <= 0) return 1\n  return n * factorialSync(n - 1, delay)\n}\n\nasync function factorialAsync (n, delay) {\n  await delayAsync(delay)\n\n  if (n <= 0) return 1\n  return n * await factorialAsync(n - 1, delay)\n}\n\nfunction delaySync (ms) {\n  const end = ms + Date.now()\n  while (Date.now() < end) {}\n  return ms\n}\n\nasync function delayAsync (ms) {\n  const deferred = createDeferred()\n  setTimeout(() => deferred.resolve(ms), ms)\n  return deferred.promise\n}\n\nif (require.main === module) main()\n\n});"},{"scriptId":"61","url":"internal/modules/cjs/helpers.js","source":"(function (exports, require, module, process, internalBinding) {'use strict';\n\nconst { ERR_INVALID_ARG_TYPE } = require('internal/errors').codes;\n\nconst {\n  CHAR_LINE_FEED,\n  CHAR_CARRIAGE_RETURN,\n  CHAR_EXCLAMATION_MARK,\n  CHAR_HASH,\n} = require('internal/constants');\n\nconst { getOptionValue } = require('internal/options');\n\n// Invoke with makeRequireFunction(module) where |module| is the Module object\n// to use as the context for the require() function.\nfunction makeRequireFunction(mod) {\n  const Module = mod.constructor;\n\n  function require(path) {\n    try {\n      exports.requireDepth += 1;\n      return mod.require(path);\n    } finally {\n      exports.requireDepth -= 1;\n    }\n  }\n\n  function resolve(request, options) {\n    if (typeof request !== 'string') {\n      throw new ERR_INVALID_ARG_TYPE('request', 'string', request);\n    }\n    return Module._resolveFilename(request, mod, false, options);\n  }\n\n  require.resolve = resolve;\n\n  function paths(request) {\n    if (typeof request !== 'string') {\n      throw new ERR_INVALID_ARG_TYPE('request', 'string', request);\n    }\n    return Module._resolveLookupPaths(request, mod, true);\n  }\n\n  resolve.paths = paths;\n\n  require.main = process.mainModule;\n\n  // Enable support to add extra extension types.\n  require.extensions = Module._extensions;\n\n  require.cache = Module._cache;\n\n  return require;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n * because the buffer-to-string conversion in `fs.readFileSync()`\n * translates it to FEFF, the UTF-16 BOM.\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Find end of shebang line and slice it off\n */\nfunction stripShebang(content) {\n  // Remove shebang\n  var contLen = content.length;\n  if (contLen >= 2) {\n    if (content.charCodeAt(0) === CHAR_HASH &&\n        content.charCodeAt(1) === CHAR_EXCLAMATION_MARK) {\n      if (contLen === 2) {\n        // Exact match\n        content = '';\n      } else {\n        // Find end of shebang line and slice it off\n        var i = 2;\n        for (; i < contLen; ++i) {\n          var code = content.charCodeAt(i);\n          if (code === CHAR_LINE_FEED || code === CHAR_CARRIAGE_RETURN)\n            break;\n        }\n        if (i === contLen)\n          content = '';\n        else {\n          // Note that this actually includes the newline character(s) in the\n          // new output. This duplicates the behavior of the regular expression\n          // that was previously used to replace the shebang line\n          content = content.slice(i);\n        }\n      }\n    }\n  }\n  return content;\n}\n\nconst builtinLibs = [\n  'assert', 'async_hooks', 'buffer', 'child_process', 'cluster', 'crypto',\n  'dgram', 'dns', 'domain', 'events', 'fs', 'http', 'http2', 'https', 'net',\n  'os', 'path', 'perf_hooks', 'punycode', 'querystring', 'readline', 'repl',\n  'stream', 'string_decoder', 'tls', 'trace_events', 'tty', 'url', 'util',\n  'v8', 'vm', 'zlib'\n];\n\nif (getOptionValue('--experimental-worker')) {\n  builtinLibs.push('worker_threads');\n  builtinLibs.sort();\n}\n\nif (typeof process.binding('inspector').open === 'function') {\n  builtinLibs.push('inspector');\n  builtinLibs.sort();\n}\n\nfunction addBuiltinLibsToObject(object) {\n  // Make built-in modules available directly (loaded lazily).\n  builtinLibs.forEach((name) => {\n    // Goals of this mechanism are:\n    // - Lazy loading of built-in modules\n    // - Having all built-in modules available as non-enumerable properties\n    // - Allowing the user to re-assign these variables as if there were no\n    //   pre-existing globals with the same name.\n\n    const setReal = (val) => {\n      // Deleting the property before re-assigning it disables the\n      // getter/setter mechanism.\n      delete object[name];\n      object[name] = val;\n    };\n\n    Object.defineProperty(object, name, {\n      get: () => {\n        const lib = require(name);\n\n        // Disable the current getter/setter and set up a new\n        // non-enumerable property.\n        delete object[name];\n        Object.defineProperty(object, name, {\n          get: () => lib,\n          set: setReal,\n          configurable: true,\n          enumerable: false\n        });\n\n        return lib;\n      },\n      set: setReal,\n      configurable: true,\n      enumerable: false\n    });\n  });\n}\n\nmodule.exports = exports = {\n  addBuiltinLibsToObject,\n  builtinLibs,\n  makeRequireFunction,\n  requireDepth: 0,\n  stripBOM,\n  stripShebang\n};\n\n});"},{"scriptId":"28","url":"path.js","source":"(function (exports, require, module, process, internalBinding) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nconst { ERR_INVALID_ARG_TYPE } = require('internal/errors').codes;\nconst {\n  CHAR_UPPERCASE_A,\n  CHAR_LOWERCASE_A,\n  CHAR_UPPERCASE_Z,\n  CHAR_LOWERCASE_Z,\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH,\n  CHAR_BACKWARD_SLASH,\n  CHAR_COLON,\n  CHAR_QUESTION_MARK,\n} = require('internal/constants');\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new ERR_INVALID_ARG_TYPE('path', 'string', path);\n  }\n}\n\nfunction isPathSeparator(code) {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\n\nfunction isPosixPathSeparator(code) {\n  return code === CHAR_FORWARD_SLASH;\n}\n\nfunction isWindowsDeviceRoot(code) {\n  return code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z ||\n         code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (isPathSeparator(code))\n      break;\n    else\n      code = CHAR_FORWARD_SLASH;\n\n    if (isPathSeparator(code)) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 ||\n            res.charCodeAt(res.length - 1) !== CHAR_DOT ||\n            res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator);\n            if (lastSlashIndex === -1) {\n              res = '';\n              lastSegmentLength = 0;\n            } else {\n              res = res.slice(0, lastSlashIndex);\n              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n            }\n            lastSlash = i;\n            dots = 0;\n            continue;\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += `${separator}..`;\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += separator + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  const dir = pathObject.dir || pathObject.root;\n  const base = pathObject.base ||\n    ((pathObject.name || '') + (pathObject.ext || ''));\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nconst win32 = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedDevice = '';\n    var resolvedTail = '';\n    var resolvedAbsolute = false;\n\n    for (var i = arguments.length - 1; i >= -1; i--) {\n      var path;\n      if (i >= 0) {\n        path = arguments[i];\n      } else if (!resolvedDevice) {\n        path = process.cwd();\n      } else {\n        // Windows has the concept of drive-specific current working\n        // directories. If we've resolved a drive letter but not yet an\n        // absolute path, get cwd for that drive, or the process cwd if\n        // the drive cwd is not available. We're sure the device is not\n        // a UNC path at this points, because UNC paths are always absolute.\n        path = process.env['=' + resolvedDevice] || process.cwd();\n\n        // Verify that a cwd was found and that it actually points\n        // to our drive. If not, default to the drive's root.\n        if (path === undefined ||\n            path.slice(0, 3).toLowerCase() !==\n              resolvedDevice.toLowerCase() + '\\\\') {\n          path = resolvedDevice + '\\\\';\n        }\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      var len = path.length;\n      var rootEnd = 0;\n      var device = '';\n      var isAbsolute = false;\n      const code = path.charCodeAt(0);\n\n      // Try to match a root\n      if (len > 1) {\n        if (isPathSeparator(code)) {\n          // Possible UNC root\n\n          // If we started with a separator, we know we at least have an\n          // absolute path of some kind (UNC or otherwise)\n          isAbsolute = true;\n\n          if (isPathSeparator(path.charCodeAt(1))) {\n            // Matched double path separator at beginning\n            var j = 2;\n            var last = j;\n            // Match 1 or more non-path separators\n            for (; j < len; ++j) {\n              if (isPathSeparator(path.charCodeAt(j)))\n                break;\n            }\n            if (j < len && j !== last) {\n              const firstPart = path.slice(last, j);\n              // Matched!\n              last = j;\n              // Match 1 or more path separators\n              for (; j < len; ++j) {\n                if (!isPathSeparator(path.charCodeAt(j)))\n                  break;\n              }\n              if (j < len && j !== last) {\n                // Matched!\n                last = j;\n                // Match 1 or more non-path separators\n                for (; j < len; ++j) {\n                  if (isPathSeparator(path.charCodeAt(j)))\n                    break;\n                }\n                if (j === len) {\n                  // We matched a UNC root only\n\n                  device = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last);\n                  rootEnd = j;\n                } else if (j !== last) {\n                  // We matched a UNC root with leftovers\n\n                  device = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last, j);\n                  rootEnd = j;\n                }\n              }\n            }\n          } else {\n            rootEnd = 1;\n          }\n        } else if (isWindowsDeviceRoot(code)) {\n          // Possible device root\n\n          if (path.charCodeAt(1) === CHAR_COLON) {\n            device = path.slice(0, 2);\n            rootEnd = 2;\n            if (len > 2) {\n              if (isPathSeparator(path.charCodeAt(2))) {\n                // Treat separator following drive name as an absolute path\n                // indicator\n                isAbsolute = true;\n                rootEnd = 3;\n              }\n            }\n          }\n        }\n      } else if (isPathSeparator(code)) {\n        // `path` contains just a path separator\n        rootEnd = 1;\n        isAbsolute = true;\n      }\n\n      if (device.length > 0 &&\n          resolvedDevice.length > 0 &&\n          device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n        // This path points to another device so it is not applicable\n        continue;\n      }\n\n      if (resolvedDevice.length === 0 && device.length > 0) {\n        resolvedDevice = device;\n      }\n      if (!resolvedAbsolute) {\n        resolvedTail = path.slice(rootEnd) + '\\\\' + resolvedTail;\n        resolvedAbsolute = isAbsolute;\n      }\n\n      if (resolvedDevice.length > 0 && resolvedAbsolute) {\n        break;\n      }\n    }\n\n    // At this point the path should be resolved to a full absolute path,\n    // but handle relative paths to be safe (might happen when process.cwd()\n    // fails)\n\n    // Normalize the tail path\n    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\',\n                                   isPathSeparator);\n\n    return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\n           '.';\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n    const len = path.length;\n    if (len === 0)\n      return '.';\n    var rootEnd = 0;\n    var device;\n    var isAbsolute = false;\n    const code = path.charCodeAt(0);\n\n    // Try to match a root\n    if (len > 1) {\n      if (isPathSeparator(code)) {\n        // Possible UNC root\n\n        // If we started with a separator, we know we at least have an absolute\n        // path of some kind (UNC or otherwise)\n        isAbsolute = true;\n\n        if (isPathSeparator(path.charCodeAt(1))) {\n          // Matched double path separator at beginning\n          var j = 2;\n          var last = j;\n          // Match 1 or more non-path separators\n          for (; j < len; ++j) {\n            if (isPathSeparator(path.charCodeAt(j)))\n              break;\n          }\n          if (j < len && j !== last) {\n            const firstPart = path.slice(last, j);\n            // Matched!\n            last = j;\n            // Match 1 or more path separators\n            for (; j < len; ++j) {\n              if (!isPathSeparator(path.charCodeAt(j)))\n                break;\n            }\n            if (j < len && j !== last) {\n              // Matched!\n              last = j;\n              // Match 1 or more non-path separators\n              for (; j < len; ++j) {\n                if (isPathSeparator(path.charCodeAt(j)))\n                  break;\n              }\n              if (j === len) {\n                // We matched a UNC root only\n                // Return the normalized version of the UNC root since there\n                // is nothing left to process\n\n                return '\\\\\\\\' + firstPart + '\\\\' + path.slice(last) + '\\\\';\n              } else if (j !== last) {\n                // We matched a UNC root with leftovers\n\n                device = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last, j);\n                rootEnd = j;\n              }\n            }\n          }\n        } else {\n          rootEnd = 1;\n        }\n      } else if (isWindowsDeviceRoot(code)) {\n        // Possible device root\n\n        if (path.charCodeAt(1) === CHAR_COLON) {\n          device = path.slice(0, 2);\n          rootEnd = 2;\n          if (len > 2) {\n            if (isPathSeparator(path.charCodeAt(2))) {\n              // Treat separator following drive name as an absolute path\n              // indicator\n              isAbsolute = true;\n              rootEnd = 3;\n            }\n          }\n        }\n      }\n    } else if (isPathSeparator(code)) {\n      // `path` contains just a path separator, exit early to avoid unnecessary\n      // work\n      return '\\\\';\n    }\n\n    var tail;\n    if (rootEnd < len) {\n      tail = normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\',\n                             isPathSeparator);\n    } else {\n      tail = '';\n    }\n    if (tail.length === 0 && !isAbsolute)\n      tail = '.';\n    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1)))\n      tail += '\\\\';\n    if (device === undefined) {\n      if (isAbsolute) {\n        if (tail.length > 0)\n          return '\\\\' + tail;\n        else\n          return '\\\\';\n      } else if (tail.length > 0) {\n        return tail;\n      } else {\n        return '';\n      }\n    } else if (isAbsolute) {\n      if (tail.length > 0)\n        return device + '\\\\' + tail;\n      else\n        return device + '\\\\';\n    } else if (tail.length > 0) {\n      return device + tail;\n    } else {\n      return device;\n    }\n  },\n\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    const len = path.length;\n    if (len === 0)\n      return false;\n\n    const code = path.charCodeAt(0);\n    if (isPathSeparator(code)) {\n      return true;\n    } else if (isWindowsDeviceRoot(code)) {\n      // Possible device root\n\n      if (len > 2 && path.charCodeAt(1) === CHAR_COLON) {\n        if (isPathSeparator(path.charCodeAt(2)))\n          return true;\n      }\n    }\n    return false;\n  },\n\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n\n    var joined;\n    var firstPart;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = firstPart = arg;\n        else\n          joined += '\\\\' + arg;\n      }\n    }\n\n    if (joined === undefined)\n      return '.';\n\n    // Make sure that the joined path doesn't start with two slashes, because\n    // normalize() will mistake it for an UNC path then.\n    //\n    // This step is skipped when it is very clear that the user actually\n    // intended to point at an UNC path. This is assumed when the first\n    // non-empty string arguments starts with exactly two slashes followed by\n    // at least one more non-slash character.\n    //\n    // Note that for normalize() to treat a path as an UNC path it needs to\n    // have at least 2 components, so we don't filter for that here.\n    // This means that the user can use join to construct UNC paths from\n    // a server name and a share name; for example:\n    //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n    var needsReplace = true;\n    var slashCount = 0;\n    if (isPathSeparator(firstPart.charCodeAt(0))) {\n      ++slashCount;\n      const firstLen = firstPart.length;\n      if (firstLen > 1) {\n        if (isPathSeparator(firstPart.charCodeAt(1))) {\n          ++slashCount;\n          if (firstLen > 2) {\n            if (isPathSeparator(firstPart.charCodeAt(2)))\n              ++slashCount;\n            else {\n              // We matched a UNC path in the first part\n              needsReplace = false;\n            }\n          }\n        }\n      }\n    }\n    if (needsReplace) {\n      // Find any more consecutive slashes we need to replace\n      for (; slashCount < joined.length; ++slashCount) {\n        if (!isPathSeparator(joined.charCodeAt(slashCount)))\n          break;\n      }\n\n      // Replace the slashes if needed\n      if (slashCount >= 2)\n        joined = '\\\\' + joined.slice(slashCount);\n    }\n\n    return win32.normalize(joined);\n  },\n\n\n  // It will solve the relative path from `from` to `to`, for instance:\n  //  from = 'C:\\\\orandea\\\\test\\\\aaa'\n  //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n  // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to)\n      return '';\n\n    var fromOrig = win32.resolve(from);\n    var toOrig = win32.resolve(to);\n\n    if (fromOrig === toOrig)\n      return '';\n\n    from = fromOrig.toLowerCase();\n    to = toOrig.toLowerCase();\n\n    if (from === to)\n      return '';\n\n    // Trim any leading backslashes\n    var fromStart = 0;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH)\n        break;\n    }\n    // Trim trailing backslashes (applicable to UNC paths only)\n    var fromEnd = from.length;\n    for (; fromEnd - 1 > fromStart; --fromEnd) {\n      if (from.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH)\n        break;\n    }\n    var fromLen = (fromEnd - fromStart);\n\n    // Trim any leading backslashes\n    var toStart = 0;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH)\n        break;\n    }\n    // Trim trailing backslashes (applicable to UNC paths only)\n    var toEnd = to.length;\n    for (; toEnd - 1 > toStart; --toEnd) {\n      if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH)\n        break;\n    }\n    var toLen = (toEnd - toStart);\n\n    // Compare paths to find the longest common path from root\n    var length = (fromLen < toLen ? fromLen : toLen);\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n            return toOrig.slice(toStart + i + 1);\n          } else if (i === 2) {\n            // We get here if `from` is the device root.\n            // For example: from='C:\\\\'; to='C:\\\\foo'\n            return toOrig.slice(toStart + i);\n          }\n        }\n        if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n            lastCommonSep = i;\n          } else if (i === 2) {\n            // We get here if `to` is the device root.\n            // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n            lastCommonSep = 3;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === CHAR_BACKWARD_SLASH)\n        lastCommonSep = i;\n    }\n\n    // We found a mismatch before the first common path separator was seen, so\n    // return the original `to`.\n    if (i !== length && lastCommonSep === -1) {\n      return toOrig;\n    }\n\n    var out = '';\n    if (lastCommonSep === -1)\n      lastCommonSep = 0;\n    // Generate the relative path based on the path difference between `to` and\n    // `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '\\\\..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + toOrig.slice(toStart + lastCommonSep, toEnd);\n    else {\n      toStart += lastCommonSep;\n      if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH)\n        ++toStart;\n      return toOrig.slice(toStart, toEnd);\n    }\n  },\n\n\n  toNamespacedPath: function toNamespacedPath(path) {\n    // Note: this will *probably* throw somewhere.\n    if (typeof path !== 'string')\n      return path;\n\n    if (path.length === 0) {\n      return '';\n    }\n\n    const resolvedPath = win32.resolve(path);\n\n    if (resolvedPath.length >= 3) {\n      if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n        // Possible UNC root\n\n        if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n          const code = resolvedPath.charCodeAt(2);\n          if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n            // Matched non-long UNC root, convert the path to a long UNC path\n            return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.slice(2);\n          }\n        }\n      } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {\n        // Possible device root\n\n        if (resolvedPath.charCodeAt(1) === CHAR_COLON &&\n            resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n          // Matched device root, convert the path to a long UNC path\n          return '\\\\\\\\?\\\\' + resolvedPath;\n        }\n      }\n    }\n\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    const len = path.length;\n    if (len === 0)\n      return '.';\n    var rootEnd = -1;\n    var end = -1;\n    var matchedSlash = true;\n    var offset = 0;\n    const code = path.charCodeAt(0);\n\n    // Try to match a root\n    if (len > 1) {\n      if (isPathSeparator(code)) {\n        // Possible UNC root\n\n        rootEnd = offset = 1;\n\n        if (isPathSeparator(path.charCodeAt(1))) {\n          // Matched double path separator at beginning\n          var j = 2;\n          var last = j;\n          // Match 1 or more non-path separators\n          for (; j < len; ++j) {\n            if (isPathSeparator(path.charCodeAt(j)))\n              break;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more path separators\n            for (; j < len; ++j) {\n              if (!isPathSeparator(path.charCodeAt(j)))\n                break;\n            }\n            if (j < len && j !== last) {\n              // Matched!\n              last = j;\n              // Match 1 or more non-path separators\n              for (; j < len; ++j) {\n                if (isPathSeparator(path.charCodeAt(j)))\n                  break;\n              }\n              if (j === len) {\n                // We matched a UNC root only\n                return path;\n              }\n              if (j !== last) {\n                // We matched a UNC root with leftovers\n\n                // Offset by 1 to include the separator after the UNC root to\n                // treat it as a \"normal root\" on top of a (UNC) root\n                rootEnd = offset = j + 1;\n              }\n            }\n          }\n        }\n      } else if (isWindowsDeviceRoot(code)) {\n        // Possible device root\n\n        if (path.charCodeAt(1) === CHAR_COLON) {\n          rootEnd = offset = 2;\n          if (len > 2) {\n            if (isPathSeparator(path.charCodeAt(2)))\n              rootEnd = offset = 3;\n          }\n        }\n      }\n    } else if (isPathSeparator(code)) {\n      // `path` contains just a path separator, exit early to avoid\n      // unnecessary work\n      return path;\n    }\n\n    for (var i = len - 1; i >= offset; --i) {\n      if (isPathSeparator(path.charCodeAt(i))) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) {\n      if (rootEnd === -1)\n        return '.';\n      else\n        end = rootEnd;\n    }\n    return path.slice(0, end);\n  },\n\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string')\n      throw new ERR_INVALID_ARG_TYPE('ext', 'string', ext);\n    assertPath(path);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    // Check for a drive letter prefix so as not to mistake the following\n    // path separator as an extra separator at the end of the path that can be\n    // disregarded\n    if (path.length >= 2) {\n      const drive = path.charCodeAt(0);\n      if (isWindowsDeviceRoot(drive)) {\n        if (path.charCodeAt(1) === CHAR_COLON)\n          start = 2;\n      }\n    }\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path)\n        return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= start; --i) {\n        const code = path.charCodeAt(i);\n        if (isPathSeparator(code)) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end)\n        end = firstNonSlashEnd;\n      else if (end === -1)\n        end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= start; --i) {\n        if (isPathSeparator(path.charCodeAt(i))) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1)\n        return '';\n      return path.slice(start, end);\n    }\n  },\n\n\n  extname: function extname(path) {\n    assertPath(path);\n    var start = 0;\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Check for a drive letter prefix so as not to mistake the following\n    // path separator as an extra separator at the end of the path that can be\n    // disregarded\n\n    if (path.length >= 2 &&\n        path.charCodeAt(1) === CHAR_COLON &&\n        isWindowsDeviceRoot(path.charCodeAt(0))) {\n      start = startPart = 2;\n    }\n\n    for (var i = path.length - 1; i >= start; --i) {\n      const code = path.charCodeAt(i);\n      if (isPathSeparator(code)) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 &&\n         startDot === end - 1 &&\n         startDot === startPart + 1)) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new ERR_INVALID_ARG_TYPE('pathObject', 'Object', pathObject);\n    }\n    return _format('\\\\', pathObject);\n  },\n\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0)\n      return ret;\n\n    var len = path.length;\n    var rootEnd = 0;\n    let code = path.charCodeAt(0);\n\n    // Try to match a root\n    if (len > 1) {\n      if (isPathSeparator(code)) {\n        // Possible UNC root\n\n        rootEnd = 1;\n        if (isPathSeparator(path.charCodeAt(1))) {\n          // Matched double path separator at beginning\n          var j = 2;\n          var last = j;\n          // Match 1 or more non-path separators\n          for (; j < len; ++j) {\n            if (isPathSeparator(path.charCodeAt(j)))\n              break;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more path separators\n            for (; j < len; ++j) {\n              if (!isPathSeparator(path.charCodeAt(j)))\n                break;\n            }\n            if (j < len && j !== last) {\n              // Matched!\n              last = j;\n              // Match 1 or more non-path separators\n              for (; j < len; ++j) {\n                if (isPathSeparator(path.charCodeAt(j)))\n                  break;\n              }\n              if (j === len) {\n                // We matched a UNC root only\n\n                rootEnd = j;\n              } else if (j !== last) {\n                // We matched a UNC root with leftovers\n\n                rootEnd = j + 1;\n              }\n            }\n          }\n        }\n      } else if (isWindowsDeviceRoot(code)) {\n        // Possible device root\n\n        if (path.charCodeAt(1) === CHAR_COLON) {\n          rootEnd = 2;\n          if (len > 2) {\n            if (isPathSeparator(path.charCodeAt(2))) {\n              if (len === 3) {\n                // `path` contains just a drive root, exit early to avoid\n                // unnecessary work\n                ret.root = ret.dir = path;\n                return ret;\n              }\n              rootEnd = 3;\n            }\n          } else {\n            // `path` contains just a drive root, exit early to avoid\n            // unnecessary work\n            ret.root = ret.dir = path;\n            return ret;\n          }\n        }\n      }\n    } else if (isPathSeparator(code)) {\n      // `path` contains just a path separator, exit early to avoid\n      // unnecessary work\n      ret.root = ret.dir = path;\n      return ret;\n    }\n\n    if (rootEnd > 0)\n      ret.root = path.slice(0, rootEnd);\n\n    var startDot = -1;\n    var startPart = rootEnd;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= rootEnd; --i) {\n      code = path.charCodeAt(i);\n      if (isPathSeparator(code)) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 &&\n         startDot === end - 1 &&\n         startDot === startPart + 1)) {\n      if (end !== -1) {\n        ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      ret.name = path.slice(startPart, startDot);\n      ret.base = path.slice(startPart, end);\n      ret.ext = path.slice(startDot, end);\n    }\n\n    // If the directory is the root, use the entire root as the `dir` including\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n    if (startPart > 0 && startPart !== rootEnd)\n      ret.dir = path.slice(0, startPart - 1);\n    else\n      ret.dir = ret.root;\n\n    return ret;\n  },\n\n\n  sep: '\\\\',\n  delimiter: ';',\n  win32: null,\n  posix: null\n};\n\n\nconst posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        path = process.cwd();\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/',\n                                   isPosixPathSeparator);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0)\n      return '.';\n\n    const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    const trailingSeparator =\n      path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n\n    // Normalize the path\n    path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n\n    if (path.length === 0 && !isAbsolute)\n      path = '.';\n    if (path.length > 0 && trailingSeparator)\n      path += '/';\n\n    if (isAbsolute)\n      return '/' + path;\n    return path;\n  },\n\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  },\n\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to)\n      return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to)\n      return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = (fromEnd - fromStart);\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = (toEnd - toStart);\n\n    // Compare paths to find the longest common path from root\n    var length = (fromLen < toLen ? fromLen : toLen);\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === CHAR_FORWARD_SLASH)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n\n  toNamespacedPath: function toNamespacedPath(path) {\n    // Non-op on posix systems\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0)\n      return '.';\n    const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1)\n      return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1)\n      return '//';\n    return path.slice(0, end);\n  },\n\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string')\n      throw new ERR_INVALID_ARG_TYPE('ext', 'string', ext);\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path)\n        return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        const code = path.charCodeAt(i);\n        if (code === CHAR_FORWARD_SLASH) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end)\n        end = firstNonSlashEnd;\n      else if (end === -1)\n        end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1)\n        return '';\n      return path.slice(start, end);\n    }\n  },\n\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 &&\n         startDot === end - 1 &&\n         startDot === startPart + 1)) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new ERR_INVALID_ARG_TYPE('pathObject', 'Object', pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0)\n      return ret;\n    var isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      const code = path.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 &&\n         startDot === end - 1 &&\n         startDot === startPart + 1)) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute)\n          ret.base = ret.name = path.slice(1, end);\n        else\n          ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0)\n      ret.dir = path.slice(0, startPart - 1);\n    else if (isAbsolute)\n      ret.dir = '/';\n\n    return ret;\n  },\n\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\n\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\n\n// Legacy internal API, docs-only deprecated: DEP0080\nwin32._makeLong = win32.toNamespacedPath;\nposix._makeLong = posix.toNamespacedPath;\n\nif (process.platform === 'win32')\n  module.exports = win32;\nelse\n  module.exports = posix;\n\n});"},{"scriptId":"27","url":"fs.js","source":"(function (exports, require, module, process, internalBinding) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Maintainers, keep in mind that ES1-style octal literals (`0666`) are not\n// allowed in strict mode. Use ES6-style octal literals instead (`0o666`).\n\n'use strict';\n\nconst { fs: constants } = process.binding('constants');\nconst {\n  S_IFIFO,\n  S_IFLNK,\n  S_IFMT,\n  S_IFREG,\n  S_IFSOCK,\n  F_OK,\n  R_OK,\n  W_OK,\n  X_OK,\n  O_WRONLY,\n  O_SYMLINK\n} = constants;\n\nconst { _extend } = require('util');\nconst pathModule = require('path');\nconst { isArrayBufferView } = require('internal/util/types');\nconst binding = process.binding('fs');\nconst { Buffer, kMaxLength } = require('buffer');\nconst errors = require('internal/errors');\nconst {\n  ERR_FS_FILE_TOO_LARGE,\n  ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_CALLBACK\n} = errors.codes;\n\nconst { FSReqWrap, statValues } = binding;\nconst { ReadStream, WriteStream } = require('internal/fs/streams');\nconst internalFS = require('internal/fs/utils');\nconst { toPathIfFileURL } = require('internal/url');\nconst internalUtil = require('internal/util');\nconst {\n  copyObject,\n  Dirent,\n  getDirents,\n  getOptions,\n  nullCheck,\n  preprocessSymlinkDestination,\n  Stats,\n  getStatsFromBinding,\n  realpathCacheKey,\n  stringToFlags,\n  stringToSymlinkType,\n  toUnixTimestamp,\n  validateBuffer,\n  validateOffsetLengthRead,\n  validateOffsetLengthWrite,\n  validatePath\n} = internalFS;\nconst {\n  CHAR_FORWARD_SLASH,\n  CHAR_BACKWARD_SLASH,\n} = require('internal/constants');\nconst {\n  isUint32,\n  validateMode,\n  validateInteger,\n  validateInt32,\n  validateUint32\n} = require('internal/validators');\n\nlet promisesWarn = true;\nlet truncateWarn = true;\nlet fs;\n\n// Lazy loaded\nlet promises;\nlet watchers;\nlet ReadFileContext;\n\nconst isWindows = process.platform === 'win32';\n\n\nfunction showTruncateDeprecation() {\n  if (truncateWarn) {\n    process.emitWarning(\n      'Using fs.truncate with a file descriptor is deprecated. Please use ' +\n      'fs.ftruncate with a file descriptor instead.',\n      'DeprecationWarning', 'DEP0081');\n    truncateWarn = false;\n  }\n}\n\nfunction handleErrorFromBinding(ctx) {\n  if (ctx.errno !== undefined) {  // libuv error numbers\n    const err = errors.uvException(ctx);\n    Error.captureStackTrace(err, handleErrorFromBinding);\n    throw err;\n  } else if (ctx.error !== undefined) {  // errors created in C++ land.\n    // TODO(joyeecheung): currently, ctx.error are encoding errors\n    // usually caused by memory problems. We need to figure out proper error\n    // code(s) for this.\n    Error.captureStackTrace(ctx.error, handleErrorFromBinding);\n    throw ctx.error;\n  }\n}\n\nfunction maybeCallback(cb) {\n  if (typeof cb === 'function')\n    return cb;\n\n  throw new ERR_INVALID_CALLBACK();\n}\n\n// Ensure that callbacks run in the global context. Only use this function\n// for callbacks that are passed to the binding layer, callbacks that are\n// invoked from JS already run in the proper scope.\nfunction makeCallback(cb) {\n  if (typeof cb !== 'function') {\n    throw new ERR_INVALID_CALLBACK();\n  }\n\n  return function(...args) {\n    return Reflect.apply(cb, undefined, args);\n  };\n}\n\n// Special case of `makeCallback()` that is specific to async `*stat()` calls as\n// an optimization, since the data passed back to the callback needs to be\n// transformed anyway.\nfunction makeStatsCallback(cb) {\n  if (typeof cb !== 'function') {\n    throw new ERR_INVALID_CALLBACK();\n  }\n\n  return function(err, stats) {\n    if (err) return cb(err);\n    cb(err, getStatsFromBinding(stats));\n  };\n}\n\nconst isFd = isUint32;\n\nfunction isFileType(stats, fileType) {\n  // Use stats array directly to avoid creating an fs.Stats instance just for\n  // our internal use.\n  return (stats[1/* mode */] & S_IFMT) === fileType;\n}\n\nfunction access(path, mode, callback) {\n  if (typeof mode === 'function') {\n    callback = mode;\n    mode = F_OK;\n  }\n\n  path = toPathIfFileURL(path);\n  validatePath(path);\n\n  mode = mode | 0;\n  const req = new FSReqWrap();\n  req.oncomplete = makeCallback(callback);\n  binding.access(pathModule.toNamespacedPath(path), mode, req);\n}\n\nfunction accessSync(path, mode) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n\n  if (mode === undefined)\n    mode = F_OK;\n  else\n    mode = mode | 0;\n\n  const ctx = { path };\n  binding.access(pathModule.toNamespacedPath(path), mode, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction exists(path, callback) {\n  maybeCallback(callback);\n\n  function suppressedCallback(err) {\n    callback(err ? false : true);\n  }\n\n  try {\n    fs.access(path, F_OK, suppressedCallback);\n  } catch {\n    return callback(false);\n  }\n}\n\nObject.defineProperty(exists, internalUtil.promisify.custom, {\n  value: (path) => {\n    return new Promise((resolve) => fs.exists(path, resolve));\n  }\n});\n\n// fs.existsSync never throws, it only returns true or false.\n// Since fs.existsSync never throws, users have established\n// the expectation that passing invalid arguments to it, even like\n// fs.existsSync(), would only get a false in return, so we cannot signal\n// validation errors to users properly out of compatibility concerns.\n// TODO(joyeecheung): deprecate the never-throw-on-invalid-arguments behavior\nfunction existsSync(path) {\n  try {\n    path = toPathIfFileURL(path);\n    validatePath(path);\n  } catch {\n    return false;\n  }\n  const ctx = { path };\n  binding.access(pathModule.toNamespacedPath(path), F_OK, undefined, ctx);\n  return ctx.errno === undefined;\n}\n\nfunction readFileAfterOpen(err, fd) {\n  const context = this.context;\n\n  if (err) {\n    context.callback(err);\n    return;\n  }\n\n  context.fd = fd;\n\n  const req = new FSReqWrap();\n  req.oncomplete = readFileAfterStat;\n  req.context = context;\n  binding.fstat(fd, false, req);\n}\n\nfunction readFileAfterStat(err, stats) {\n  const context = this.context;\n\n  if (err)\n    return context.close(err);\n\n  const size = context.size = isFileType(stats, S_IFREG) ? stats[8] : 0;\n\n  if (size === 0) {\n    context.buffers = [];\n    context.read();\n    return;\n  }\n\n  if (size > kMaxLength) {\n    err = new ERR_FS_FILE_TOO_LARGE(size);\n    return context.close(err);\n  }\n\n  try {\n    context.buffer = Buffer.allocUnsafeSlow(size);\n  } catch (err) {\n    return context.close(err);\n  }\n  context.read();\n}\n\nfunction readFile(path, options, callback) {\n  callback = maybeCallback(callback || options);\n  options = getOptions(options, { flag: 'r' });\n  if (!ReadFileContext)\n    ReadFileContext = require('internal/fs/read_file_context');\n  const context = new ReadFileContext(callback, options.encoding);\n  context.isUserFd = isFd(path); // file descriptor ownership\n\n  const req = new FSReqWrap();\n  req.context = context;\n  req.oncomplete = readFileAfterOpen;\n\n  if (context.isUserFd) {\n    process.nextTick(function tick() {\n      req.oncomplete(null, path);\n    });\n    return;\n  }\n\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  binding.open(pathModule.toNamespacedPath(path),\n               stringToFlags(options.flag || 'r'),\n               0o666,\n               req);\n}\n\nfunction tryStatSync(fd, isUserFd) {\n  const ctx = {};\n  const stats = binding.fstat(fd, false, undefined, ctx);\n  if (ctx.errno !== undefined && !isUserFd) {\n    fs.closeSync(fd);\n    throw errors.uvException(ctx);\n  }\n  return stats;\n}\n\nfunction tryCreateBuffer(size, fd, isUserFd) {\n  let threw = true;\n  let buffer;\n  try {\n    if (size > kMaxLength) {\n      throw new ERR_FS_FILE_TOO_LARGE(size);\n    }\n    buffer = Buffer.allocUnsafe(size);\n    threw = false;\n  } finally {\n    if (threw && !isUserFd) fs.closeSync(fd);\n  }\n  return buffer;\n}\n\nfunction tryReadSync(fd, isUserFd, buffer, pos, len) {\n  let threw = true;\n  let bytesRead;\n  try {\n    bytesRead = fs.readSync(fd, buffer, pos, len);\n    threw = false;\n  } finally {\n    if (threw && !isUserFd) fs.closeSync(fd);\n  }\n  return bytesRead;\n}\n\nfunction readFileSync(path, options) {\n  options = getOptions(options, { flag: 'r' });\n  const isUserFd = isFd(path); // file descriptor ownership\n  const fd = isUserFd ? path : fs.openSync(path, options.flag || 'r', 0o666);\n\n  const stats = tryStatSync(fd, isUserFd);\n  const size = isFileType(stats, S_IFREG) ? stats[8] : 0;\n  let pos = 0;\n  let buffer; // single buffer with file data\n  let buffers; // list for when size is unknown\n\n  if (size === 0) {\n    buffers = [];\n  } else {\n    buffer = tryCreateBuffer(size, fd, isUserFd);\n  }\n\n  let bytesRead;\n\n  if (size !== 0) {\n    do {\n      bytesRead = tryReadSync(fd, isUserFd, buffer, pos, size - pos);\n      pos += bytesRead;\n    } while (bytesRead !== 0 && pos < size);\n  } else {\n    do {\n      // the kernel lies about many files.\n      // Go ahead and try to read some bytes.\n      buffer = Buffer.allocUnsafe(8192);\n      bytesRead = tryReadSync(fd, isUserFd, buffer, 0, 8192);\n      if (bytesRead !== 0) {\n        buffers.push(buffer.slice(0, bytesRead));\n      }\n      pos += bytesRead;\n    } while (bytesRead !== 0);\n  }\n\n  if (!isUserFd)\n    fs.closeSync(fd);\n\n  if (size === 0) {\n    // data was collected into the buffers list.\n    buffer = Buffer.concat(buffers, pos);\n  } else if (pos < size) {\n    buffer = buffer.slice(0, pos);\n  }\n\n  if (options.encoding) buffer = buffer.toString(options.encoding);\n  return buffer;\n}\n\nfunction close(fd, callback) {\n  validateUint32(fd, 'fd');\n  const req = new FSReqWrap();\n  req.oncomplete = makeCallback(callback);\n  binding.close(fd, req);\n}\n\nfunction closeSync(fd) {\n  validateUint32(fd, 'fd');\n\n  const ctx = {};\n  binding.close(fd, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction open(path, flags, mode, callback) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const flagsNumber = stringToFlags(flags);\n  if (typeof mode === 'function') {\n    callback = makeCallback(mode);\n    mode = 0o666;\n  } else {\n    mode = validateMode(mode, 'mode', 0o666);\n    callback = makeCallback(callback);\n  }\n\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n\n  binding.open(pathModule.toNamespacedPath(path),\n               flagsNumber,\n               mode,\n               req);\n}\n\n\nfunction openSync(path, flags, mode) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const flagsNumber = stringToFlags(flags);\n  mode = validateMode(mode, 'mode', 0o666);\n\n  const ctx = { path };\n  const result = binding.open(pathModule.toNamespacedPath(path),\n                              flagsNumber, mode,\n                              undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return result;\n}\n\nfunction read(fd, buffer, offset, length, position, callback) {\n  validateUint32(fd, 'fd');\n  validateBuffer(buffer);\n\n  offset |= 0;\n  length |= 0;\n\n  if (length === 0) {\n    return process.nextTick(function tick() {\n      callback && callback(null, 0, buffer);\n    });\n  }\n\n  validateOffsetLengthRead(offset, length, buffer.byteLength);\n\n  if (!Number.isSafeInteger(position))\n    position = -1;\n\n  function wrapper(err, bytesRead) {\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\n    callback && callback(err, bytesRead || 0, buffer);\n  }\n\n  const req = new FSReqWrap();\n  req.oncomplete = wrapper;\n\n  binding.read(fd, buffer, offset, length, position, req);\n}\n\nObject.defineProperty(read, internalUtil.customPromisifyArgs,\n                      { value: ['bytesRead', 'buffer'], enumerable: false });\n\nfunction readSync(fd, buffer, offset, length, position) {\n  validateUint32(fd, 'fd');\n  validateBuffer(buffer);\n\n  offset |= 0;\n  length |= 0;\n\n  if (length === 0) {\n    return 0;\n  }\n\n  validateOffsetLengthRead(offset, length, buffer.byteLength);\n\n  if (!Number.isSafeInteger(position))\n    position = -1;\n\n  const ctx = {};\n  const result = binding.read(fd, buffer, offset, length, position,\n                              undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return result;\n}\n\n// usage:\n//  fs.write(fd, buffer[, offset[, length[, position]]], callback);\n// OR\n//  fs.write(fd, string[, position[, encoding]], callback);\nfunction write(fd, buffer, offset, length, position, callback) {\n  function wrapper(err, written) {\n    // Retain a reference to buffer so that it can't be GC'ed too soon.\n    callback(err, written || 0, buffer);\n  }\n\n  validateUint32(fd, 'fd');\n\n  const req = new FSReqWrap();\n  req.oncomplete = wrapper;\n\n  if (isArrayBufferView(buffer)) {\n    callback = maybeCallback(callback || position || length || offset);\n    if (typeof offset !== 'number')\n      offset = 0;\n    if (typeof length !== 'number')\n      length = buffer.length - offset;\n    if (typeof position !== 'number')\n      position = null;\n    validateOffsetLengthWrite(offset, length, buffer.byteLength);\n    return binding.writeBuffer(fd, buffer, offset, length, position, req);\n  }\n\n  if (typeof buffer !== 'string')\n    buffer += '';\n  if (typeof position !== 'function') {\n    if (typeof offset === 'function') {\n      position = offset;\n      offset = null;\n    } else {\n      position = length;\n    }\n    length = 'utf8';\n  }\n  callback = maybeCallback(position);\n  return binding.writeString(fd, buffer, offset, length, req);\n}\n\nObject.defineProperty(write, internalUtil.customPromisifyArgs,\n                      { value: ['bytesWritten', 'buffer'], enumerable: false });\n\n// usage:\n//  fs.writeSync(fd, buffer[, offset[, length[, position]]]);\n// OR\n//  fs.writeSync(fd, string[, position[, encoding]]);\nfunction writeSync(fd, buffer, offset, length, position) {\n  validateUint32(fd, 'fd');\n  const ctx = {};\n  let result;\n  if (isArrayBufferView(buffer)) {\n    if (position === undefined)\n      position = null;\n    if (typeof offset !== 'number')\n      offset = 0;\n    if (typeof length !== 'number')\n      length = buffer.byteLength - offset;\n    validateOffsetLengthWrite(offset, length, buffer.byteLength);\n    result = binding.writeBuffer(fd, buffer, offset, length, position,\n                                 undefined, ctx);\n  } else {\n    if (typeof buffer !== 'string')\n      buffer += '';\n    if (offset === undefined)\n      offset = null;\n    result = binding.writeString(fd, buffer, offset, length,\n                                 undefined, ctx);\n  }\n  handleErrorFromBinding(ctx);\n  return result;\n}\n\nfunction rename(oldPath, newPath, callback) {\n  callback = makeCallback(callback);\n  oldPath = toPathIfFileURL(oldPath);\n  validatePath(oldPath, 'oldPath');\n  newPath = toPathIfFileURL(newPath);\n  validatePath(newPath, 'newPath');\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.rename(pathModule.toNamespacedPath(oldPath),\n                 pathModule.toNamespacedPath(newPath),\n                 req);\n}\n\nfunction renameSync(oldPath, newPath) {\n  oldPath = toPathIfFileURL(oldPath);\n  validatePath(oldPath, 'oldPath');\n  newPath = toPathIfFileURL(newPath);\n  validatePath(newPath, 'newPath');\n  const ctx = { path: oldPath, dest: newPath };\n  binding.rename(pathModule.toNamespacedPath(oldPath),\n                 pathModule.toNamespacedPath(newPath), undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction truncate(path, len, callback) {\n  if (typeof path === 'number') {\n    showTruncateDeprecation();\n    return fs.ftruncate(path, len, callback);\n  }\n  if (typeof len === 'function') {\n    callback = len;\n    len = 0;\n  } else if (len === undefined) {\n    len = 0;\n  }\n\n  validateInteger(len, 'len');\n  callback = maybeCallback(callback);\n  fs.open(path, 'r+', function(er, fd) {\n    if (er) return callback(er);\n    const req = new FSReqWrap();\n    req.oncomplete = function oncomplete(er) {\n      fs.close(fd, function(er2) {\n        callback(er || er2);\n      });\n    };\n    binding.ftruncate(fd, len, req);\n  });\n}\n\nfunction truncateSync(path, len) {\n  if (typeof path === 'number') {\n    // legacy\n    showTruncateDeprecation();\n    return fs.ftruncateSync(path, len);\n  }\n  if (len === undefined) {\n    len = 0;\n  }\n  // allow error to be thrown, but still close fd.\n  const fd = fs.openSync(path, 'r+');\n  let ret;\n\n  try {\n    ret = fs.ftruncateSync(fd, len);\n  } finally {\n    fs.closeSync(fd);\n  }\n  return ret;\n}\n\nfunction ftruncate(fd, len = 0, callback) {\n  if (typeof len === 'function') {\n    callback = len;\n    len = 0;\n  }\n  validateUint32(fd, 'fd');\n  validateInteger(len, 'len');\n  len = Math.max(0, len);\n  const req = new FSReqWrap();\n  req.oncomplete = makeCallback(callback);\n  binding.ftruncate(fd, len, req);\n}\n\nfunction ftruncateSync(fd, len = 0) {\n  validateUint32(fd, 'fd');\n  validateInteger(len, 'len');\n  len = Math.max(0, len);\n  const ctx = {};\n  binding.ftruncate(fd, len, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction rmdir(path, callback) {\n  callback = makeCallback(callback);\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.rmdir(pathModule.toNamespacedPath(path), req);\n}\n\nfunction rmdirSync(path) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const ctx = { path };\n  binding.rmdir(pathModule.toNamespacedPath(path), undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction fdatasync(fd, callback) {\n  validateUint32(fd, 'fd');\n  const req = new FSReqWrap();\n  req.oncomplete = makeCallback(callback);\n  binding.fdatasync(fd, req);\n}\n\nfunction fdatasyncSync(fd) {\n  validateUint32(fd, 'fd');\n  const ctx = {};\n  binding.fdatasync(fd, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction fsync(fd, callback) {\n  validateUint32(fd, 'fd');\n  const req = new FSReqWrap();\n  req.oncomplete = makeCallback(callback);\n  binding.fsync(fd, req);\n}\n\nfunction fsyncSync(fd) {\n  validateUint32(fd, 'fd');\n  const ctx = {};\n  binding.fsync(fd, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction mkdir(path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else if (typeof options === 'number' || typeof options === 'string') {\n    options = { mode: options };\n  }\n  const {\n    recursive = false,\n    mode = 0o777\n  } = options || {};\n  callback = makeCallback(callback);\n  path = toPathIfFileURL(path);\n\n  validatePath(path);\n  if (typeof recursive !== 'boolean')\n    throw new ERR_INVALID_ARG_TYPE('recursive', 'boolean', recursive);\n\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.mkdir(pathModule.toNamespacedPath(path),\n                validateMode(mode, 'mode', 0o777), recursive, req);\n}\n\nfunction mkdirSync(path, options) {\n  if (typeof options === 'number' || typeof options === 'string') {\n    options = { mode: options };\n  }\n  path = toPathIfFileURL(path);\n  const {\n    recursive = false,\n    mode = 0o777\n  } = options || {};\n\n  validatePath(path);\n  if (typeof recursive !== 'boolean')\n    throw new ERR_INVALID_ARG_TYPE('recursive', 'boolean', recursive);\n\n  const ctx = { path };\n  binding.mkdir(pathModule.toNamespacedPath(path),\n                validateMode(mode, 'mode', 0o777), recursive, undefined,\n                ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction readdir(path, options, callback) {\n  callback = makeCallback(typeof options === 'function' ? options : callback);\n  options = getOptions(options, {});\n  path = toPathIfFileURL(path);\n  validatePath(path);\n\n  const req = new FSReqWrap();\n  if (!options.withFileTypes) {\n    req.oncomplete = callback;\n  } else {\n    req.oncomplete = (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      getDirents(path, result, callback);\n    };\n  }\n  binding.readdir(pathModule.toNamespacedPath(path), options.encoding,\n                  !!options.withFileTypes, req);\n}\n\nfunction readdirSync(path, options) {\n  options = getOptions(options, {});\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const ctx = { path };\n  const result = binding.readdir(pathModule.toNamespacedPath(path),\n                                 options.encoding, !!options.withFileTypes,\n                                 undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return options.withFileTypes ? getDirents(path, result) : result;\n}\n\nfunction fstat(fd, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  validateUint32(fd, 'fd');\n  const req = new FSReqWrap(options.bigint);\n  req.oncomplete = makeStatsCallback(callback);\n  binding.fstat(fd, options.bigint, req);\n}\n\nfunction lstat(path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  callback = makeStatsCallback(callback);\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const req = new FSReqWrap(options.bigint);\n  req.oncomplete = callback;\n  binding.lstat(pathModule.toNamespacedPath(path), options.bigint, req);\n}\n\nfunction stat(path, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  callback = makeStatsCallback(callback);\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const req = new FSReqWrap(options.bigint);\n  req.oncomplete = callback;\n  binding.stat(pathModule.toNamespacedPath(path), options.bigint, req);\n}\n\nfunction fstatSync(fd, options = {}) {\n  validateUint32(fd, 'fd');\n  const ctx = { fd };\n  const stats = binding.fstat(fd, options.bigint, undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return getStatsFromBinding(stats);\n}\n\nfunction lstatSync(path, options = {}) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const ctx = { path };\n  const stats = binding.lstat(pathModule.toNamespacedPath(path),\n                              options.bigint, undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return getStatsFromBinding(stats);\n}\n\nfunction statSync(path, options = {}) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const ctx = { path };\n  const stats = binding.stat(pathModule.toNamespacedPath(path),\n                             options.bigint, undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return getStatsFromBinding(stats);\n}\n\nfunction readlink(path, options, callback) {\n  callback = makeCallback(typeof options === 'function' ? options : callback);\n  options = getOptions(options, {});\n  path = toPathIfFileURL(path);\n  validatePath(path, 'oldPath');\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.readlink(pathModule.toNamespacedPath(path), options.encoding, req);\n}\n\nfunction readlinkSync(path, options) {\n  options = getOptions(options, {});\n  path = toPathIfFileURL(path);\n  validatePath(path, 'oldPath');\n  const ctx = { path };\n  const result = binding.readlink(pathModule.toNamespacedPath(path),\n                                  options.encoding, undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return result;\n}\n\nfunction symlink(target, path, type_, callback_) {\n  const type = (typeof type_ === 'string' ? type_ : null);\n  const callback = makeCallback(arguments[arguments.length - 1]);\n\n  target = toPathIfFileURL(target);\n  path = toPathIfFileURL(path);\n  validatePath(target, 'target');\n  validatePath(path);\n\n  const flags = stringToSymlinkType(type);\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n\n  binding.symlink(preprocessSymlinkDestination(target, type, path),\n                  pathModule.toNamespacedPath(path), flags, req);\n}\n\nfunction symlinkSync(target, path, type) {\n  type = (typeof type === 'string' ? type : null);\n  target = toPathIfFileURL(target);\n  path = toPathIfFileURL(path);\n  validatePath(target, 'target');\n  validatePath(path);\n  const flags = stringToSymlinkType(type);\n\n  const ctx = { path: target, dest: path };\n  binding.symlink(preprocessSymlinkDestination(target, type, path),\n                  pathModule.toNamespacedPath(path), flags, undefined, ctx);\n\n  handleErrorFromBinding(ctx);\n}\n\nfunction link(existingPath, newPath, callback) {\n  callback = makeCallback(callback);\n\n  existingPath = toPathIfFileURL(existingPath);\n  newPath = toPathIfFileURL(newPath);\n  validatePath(existingPath, 'existingPath');\n  validatePath(newPath, 'newPath');\n\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n\n  binding.link(pathModule.toNamespacedPath(existingPath),\n               pathModule.toNamespacedPath(newPath),\n               req);\n}\n\nfunction linkSync(existingPath, newPath) {\n  existingPath = toPathIfFileURL(existingPath);\n  newPath = toPathIfFileURL(newPath);\n  validatePath(existingPath, 'existingPath');\n  validatePath(newPath, 'newPath');\n\n  const ctx = { path: existingPath, dest: newPath };\n  const result = binding.link(pathModule.toNamespacedPath(existingPath),\n                              pathModule.toNamespacedPath(newPath),\n                              undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return result;\n}\n\nfunction unlink(path, callback) {\n  callback = makeCallback(callback);\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.unlink(pathModule.toNamespacedPath(path), req);\n}\n\nfunction unlinkSync(path) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const ctx = { path };\n  binding.unlink(pathModule.toNamespacedPath(path), undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction fchmod(fd, mode, callback) {\n  validateInt32(fd, 'fd', 0);\n  mode = validateMode(mode, 'mode');\n  callback = makeCallback(callback);\n\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.fchmod(fd, mode, req);\n}\n\nfunction fchmodSync(fd, mode) {\n  validateInt32(fd, 'fd', 0);\n  mode = validateMode(mode, 'mode');\n  const ctx = {};\n  binding.fchmod(fd, mode, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction lchmod(path, mode, callback) {\n  callback = maybeCallback(callback);\n  fs.open(path, O_WRONLY | O_SYMLINK, function(err, fd) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    // Prefer to return the chmod error, if one occurs,\n    // but still try to close, and report closing errors if they occur.\n    fs.fchmod(fd, mode, function(err) {\n      fs.close(fd, function(err2) {\n        callback(err || err2);\n      });\n    });\n  });\n}\n\nfunction lchmodSync(path, mode) {\n  const fd = fs.openSync(path, O_WRONLY | O_SYMLINK);\n\n  // Prefer to return the chmod error, if one occurs,\n  // but still try to close, and report closing errors if they occur.\n  let ret;\n  try {\n    ret = fs.fchmodSync(fd, mode);\n  } finally {\n    fs.closeSync(fd);\n  }\n  return ret;\n}\n\n\nfunction chmod(path, mode, callback) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  mode = validateMode(mode, 'mode');\n  callback = makeCallback(callback);\n\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.chmod(pathModule.toNamespacedPath(path), mode, req);\n}\n\nfunction chmodSync(path, mode) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  mode = validateMode(mode, 'mode');\n\n  const ctx = { path };\n  binding.chmod(pathModule.toNamespacedPath(path), mode, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction lchown(path, uid, gid, callback) {\n  callback = makeCallback(callback);\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  validateUint32(uid, 'uid');\n  validateUint32(gid, 'gid');\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.lchown(pathModule.toNamespacedPath(path), uid, gid, req);\n}\n\nfunction lchownSync(path, uid, gid) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  validateUint32(uid, 'uid');\n  validateUint32(gid, 'gid');\n  const ctx = { path };\n  binding.lchown(pathModule.toNamespacedPath(path), uid, gid, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction fchown(fd, uid, gid, callback) {\n  validateUint32(fd, 'fd');\n  validateUint32(uid, 'uid');\n  validateUint32(gid, 'gid');\n\n  const req = new FSReqWrap();\n  req.oncomplete = makeCallback(callback);\n  binding.fchown(fd, uid, gid, req);\n}\n\nfunction fchownSync(fd, uid, gid) {\n  validateUint32(fd, 'fd');\n  validateUint32(uid, 'uid');\n  validateUint32(gid, 'gid');\n\n  const ctx = {};\n  binding.fchown(fd, uid, gid, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction chown(path, uid, gid, callback) {\n  callback = makeCallback(callback);\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  validateUint32(uid, 'uid');\n  validateUint32(gid, 'gid');\n\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.chown(pathModule.toNamespacedPath(path), uid, gid, req);\n}\n\nfunction chownSync(path, uid, gid) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  validateUint32(uid, 'uid');\n  validateUint32(gid, 'gid');\n  const ctx = { path };\n  binding.chown(pathModule.toNamespacedPath(path), uid, gid, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction utimes(path, atime, mtime, callback) {\n  callback = makeCallback(callback);\n  path = toPathIfFileURL(path);\n  validatePath(path);\n\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.utimes(pathModule.toNamespacedPath(path),\n                 toUnixTimestamp(atime),\n                 toUnixTimestamp(mtime),\n                 req);\n}\n\nfunction utimesSync(path, atime, mtime) {\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const ctx = { path };\n  binding.utimes(pathModule.toNamespacedPath(path),\n                 toUnixTimestamp(atime), toUnixTimestamp(mtime),\n                 undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction futimes(fd, atime, mtime, callback) {\n  validateUint32(fd, 'fd');\n  atime = toUnixTimestamp(atime, 'atime');\n  mtime = toUnixTimestamp(mtime, 'mtime');\n  const req = new FSReqWrap();\n  req.oncomplete = makeCallback(callback);\n  binding.futimes(fd, atime, mtime, req);\n}\n\nfunction futimesSync(fd, atime, mtime) {\n  validateUint32(fd, 'fd');\n  atime = toUnixTimestamp(atime, 'atime');\n  mtime = toUnixTimestamp(mtime, 'mtime');\n  const ctx = {};\n  binding.futimes(fd, atime, mtime, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction writeAll(fd, isUserFd, buffer, offset, length, position, callback) {\n  // write(fd, buffer, offset, length, position, callback)\n  fs.write(fd, buffer, offset, length, position, function(writeErr, written) {\n    if (writeErr) {\n      if (isUserFd) {\n        callback(writeErr);\n      } else {\n        fs.close(fd, function close() {\n          callback(writeErr);\n        });\n      }\n    } else if (written === length) {\n      if (isUserFd) {\n        callback(null);\n      } else {\n        fs.close(fd, callback);\n      }\n    } else {\n      offset += written;\n      length -= written;\n      if (position !== null) {\n        position += written;\n      }\n      writeAll(fd, isUserFd, buffer, offset, length, position, callback);\n    }\n  });\n}\n\nfunction writeFile(path, data, options, callback) {\n  callback = maybeCallback(callback || options);\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'w' });\n  const flag = options.flag || 'w';\n\n  if (isFd(path)) {\n    writeFd(path, true);\n    return;\n  }\n\n  fs.open(path, flag, options.mode, function(openErr, fd) {\n    if (openErr) {\n      callback(openErr);\n    } else {\n      writeFd(fd, false);\n    }\n  });\n\n  function writeFd(fd, isUserFd) {\n    const buffer = isArrayBufferView(data) ?\n      data : Buffer.from('' + data, options.encoding || 'utf8');\n    const position = /a/.test(flag) ? null : 0;\n\n    writeAll(fd, isUserFd, buffer, 0, buffer.byteLength, position, callback);\n  }\n}\n\nfunction writeFileSync(path, data, options) {\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'w' });\n  const flag = options.flag || 'w';\n\n  const isUserFd = isFd(path); // file descriptor ownership\n  const fd = isUserFd ? path : fs.openSync(path, flag, options.mode);\n\n  if (!isArrayBufferView(data)) {\n    data = Buffer.from('' + data, options.encoding || 'utf8');\n  }\n  let offset = 0;\n  let length = data.byteLength;\n  let position = /a/.test(flag) ? null : 0;\n  try {\n    while (length > 0) {\n      const written = fs.writeSync(fd, data, offset, length, position);\n      offset += written;\n      length -= written;\n      if (position !== null) {\n        position += written;\n      }\n    }\n  } finally {\n    if (!isUserFd) fs.closeSync(fd);\n  }\n}\n\nfunction appendFile(path, data, options, callback) {\n  callback = maybeCallback(callback || options);\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });\n\n  // Don't make changes directly on options object\n  options = copyObject(options);\n\n  // force append behavior when using a supplied file descriptor\n  if (!options.flag || isFd(path))\n    options.flag = 'a';\n\n  fs.writeFile(path, data, options, callback);\n}\n\nfunction appendFileSync(path, data, options) {\n  options = getOptions(options, { encoding: 'utf8', mode: 0o666, flag: 'a' });\n\n  // Don't make changes directly on options object\n  options = copyObject(options);\n\n  // force append behavior when using a supplied file descriptor\n  if (!options.flag || isFd(path))\n    options.flag = 'a';\n\n  fs.writeFileSync(path, data, options);\n}\n\nfunction watch(filename, options, listener) {\n  if (typeof options === 'function') {\n    listener = options;\n  }\n  options = getOptions(options, {});\n\n  // Don't make changes directly on options object\n  options = copyObject(options);\n\n  if (options.persistent === undefined) options.persistent = true;\n  if (options.recursive === undefined) options.recursive = false;\n\n  if (!watchers)\n    watchers = require('internal/fs/watchers');\n  const watcher = new watchers.FSWatcher();\n  watcher.start(filename,\n                options.persistent,\n                options.recursive,\n                options.encoding);\n\n  if (listener) {\n    watcher.addListener('change', listener);\n  }\n\n  return watcher;\n}\n\n\nconst statWatchers = new Map();\n\nfunction watchFile(filename, options, listener) {\n  filename = toPathIfFileURL(filename);\n  validatePath(filename);\n  filename = pathModule.resolve(filename);\n  let stat;\n\n  const defaults = {\n    // Poll interval in milliseconds. 5007 is what libev used to use. It's\n    // a little on the slow side but let's stick with it for now to keep\n    // behavioral changes to a minimum.\n    interval: 5007,\n    persistent: true\n  };\n\n  if (options !== null && typeof options === 'object') {\n    options = _extend(defaults, options);\n  } else {\n    listener = options;\n    options = defaults;\n  }\n\n  if (typeof listener !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('listener', 'Function', listener);\n  }\n\n  stat = statWatchers.get(filename);\n\n  if (stat === undefined) {\n    if (!watchers)\n      watchers = require('internal/fs/watchers');\n    stat = new watchers.StatWatcher(options.bigint);\n    stat.start(filename, options.persistent, options.interval);\n    statWatchers.set(filename, stat);\n  }\n\n  stat.addListener('change', listener);\n  return stat;\n}\n\nfunction unwatchFile(filename, listener) {\n  filename = toPathIfFileURL(filename);\n  validatePath(filename);\n  filename = pathModule.resolve(filename);\n  const stat = statWatchers.get(filename);\n\n  if (stat === undefined) return;\n\n  if (typeof listener === 'function') {\n    stat.removeListener('change', listener);\n  } else {\n    stat.removeAllListeners('change');\n  }\n\n  if (stat.listenerCount('change') === 0) {\n    stat.stop();\n    statWatchers.delete(filename);\n  }\n}\n\n\nlet splitRoot;\nif (isWindows) {\n  // Regex to find the device root on Windows (e.g. 'c:\\\\'), including trailing\n  // slash.\n  const splitRootRe = /^(?:[a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/][^\\\\/]+)?[\\\\/]*/;\n  splitRoot = function splitRoot(str) {\n    return splitRootRe.exec(str)[0];\n  };\n} else {\n  splitRoot = function splitRoot(str) {\n    for (var i = 0; i < str.length; ++i) {\n      if (str.charCodeAt(i) !== CHAR_FORWARD_SLASH)\n        return str.slice(0, i);\n    }\n    return str;\n  };\n}\n\nfunction encodeRealpathResult(result, options) {\n  if (!options || !options.encoding || options.encoding === 'utf8')\n    return result;\n  const asBuffer = Buffer.from(result);\n  if (options.encoding === 'buffer') {\n    return asBuffer;\n  } else {\n    return asBuffer.toString(options.encoding);\n  }\n}\n\n// Finds the next portion of a (partial) path, up to the next path delimiter\nlet nextPart;\nif (isWindows) {\n  nextPart = function nextPart(p, i) {\n    for (; i < p.length; ++i) {\n      const ch = p.charCodeAt(i);\n\n      // Check for a separator character\n      if (ch === CHAR_BACKWARD_SLASH || ch === CHAR_FORWARD_SLASH)\n        return i;\n    }\n    return -1;\n  };\n} else {\n  nextPart = function nextPart(p, i) { return p.indexOf('/', i); };\n}\n\nconst emptyObj = Object.create(null);\nfunction realpathSync(p, options) {\n  if (!options)\n    options = emptyObj;\n  else\n    options = getOptions(options, emptyObj);\n  p = toPathIfFileURL(p);\n  if (typeof p !== 'string') {\n    p += '';\n  }\n  validatePath(p);\n  p = pathModule.resolve(p);\n\n  const cache = options[realpathCacheKey];\n  const maybeCachedResult = cache && cache.get(p);\n  if (maybeCachedResult) {\n    return maybeCachedResult;\n  }\n\n  const seenLinks = Object.create(null);\n  const knownHard = Object.create(null);\n  const original = p;\n\n  // current character position in p\n  let pos;\n  // the partial path so far, including a trailing slash if any\n  let current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  let base;\n  // the partial path scanned in the previous round, with slash\n  let previous;\n\n  // Skip over roots\n  current = base = splitRoot(p);\n  pos = current.length;\n\n  // On windows, check that the root exists. On unix there is no need.\n  if (isWindows && !knownHard[base]) {\n    const ctx = { path: base };\n    binding.lstat(pathModule.toNamespacedPath(base), false, undefined, ctx);\n    handleErrorFromBinding(ctx);\n    knownHard[base] = true;\n  }\n\n  // walk down the path, swapping out linked path parts for their real\n  // values\n  // NB: p.length changes.\n  while (pos < p.length) {\n    // find the next part\n    const result = nextPart(p, pos);\n    previous = current;\n    if (result === -1) {\n      const last = p.slice(pos);\n      current += last;\n      base = previous + last;\n      pos = p.length;\n    } else {\n      current += p.slice(pos, result + 1);\n      base = previous + p.slice(pos, result);\n      pos = result + 1;\n    }\n\n    // continue if not a symlink, break if a pipe/socket\n    if (knownHard[base] || (cache && cache.get(base) === base)) {\n      if (isFileType(statValues, S_IFIFO) ||\n          isFileType(statValues, S_IFSOCK)) {\n        break;\n      }\n      continue;\n    }\n\n    let resolvedLink;\n    const maybeCachedResolved = cache && cache.get(base);\n    if (maybeCachedResolved) {\n      resolvedLink = maybeCachedResolved;\n    } else {\n      // Use stats array directly to avoid creating an fs.Stats instance just\n      // for our internal use.\n\n      const baseLong = pathModule.toNamespacedPath(base);\n      const ctx = { path: base };\n      const stats = binding.lstat(baseLong, false, undefined, ctx);\n      handleErrorFromBinding(ctx);\n\n      if (!isFileType(stats, S_IFLNK)) {\n        knownHard[base] = true;\n        if (cache) cache.set(base, base);\n        continue;\n      }\n\n      // read the link if it wasn't read before\n      // dev/ino always return 0 on windows, so skip the check.\n      let linkTarget = null;\n      let id;\n      if (!isWindows) {\n        const dev = stats[0].toString(32);\n        const ino = stats[7].toString(32);\n        id = `${dev}:${ino}`;\n        if (seenLinks[id]) {\n          linkTarget = seenLinks[id];\n        }\n      }\n      if (linkTarget === null) {\n        const ctx = { path: base };\n        binding.stat(baseLong, false, undefined, ctx);\n        handleErrorFromBinding(ctx);\n        linkTarget = binding.readlink(baseLong, undefined, undefined, ctx);\n        handleErrorFromBinding(ctx);\n      }\n      resolvedLink = pathModule.resolve(previous, linkTarget);\n\n      if (cache) cache.set(base, resolvedLink);\n      if (!isWindows) seenLinks[id] = linkTarget;\n    }\n\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n\n    // Skip over roots\n    current = base = splitRoot(p);\n    pos = current.length;\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      const ctx = { path: base };\n      binding.lstat(pathModule.toNamespacedPath(base), false, undefined, ctx);\n      handleErrorFromBinding(ctx);\n      knownHard[base] = true;\n    }\n  }\n\n  if (cache) cache.set(original, p);\n  return encodeRealpathResult(p, options);\n}\n\n\nrealpathSync.native = function(path, options) {\n  options = getOptions(options, {});\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const ctx = { path };\n  const result = binding.realpath(path, options.encoding, undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return result;\n};\n\n\nfunction realpath(p, options, callback) {\n  callback = maybeCallback(typeof options === 'function' ? options : callback);\n  if (!options)\n    options = emptyObj;\n  else\n    options = getOptions(options, emptyObj);\n  p = toPathIfFileURL(p);\n  if (typeof p !== 'string') {\n    p += '';\n  }\n  validatePath(p);\n  p = pathModule.resolve(p);\n\n  const seenLinks = Object.create(null);\n  const knownHard = Object.create(null);\n\n  // current character position in p\n  let pos;\n  // the partial path so far, including a trailing slash if any\n  let current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  let base;\n  // the partial path scanned in the previous round, with slash\n  let previous;\n\n  current = base = splitRoot(p);\n  pos = current.length;\n\n  // On windows, check that the root exists. On unix there is no need.\n  if (isWindows && !knownHard[base]) {\n    fs.lstat(base, function(err, stats) {\n      if (err) return callback(err);\n      knownHard[base] = true;\n      LOOP();\n    });\n  } else {\n    process.nextTick(LOOP);\n  }\n\n  // walk down the path, swapping out linked path parts for their real\n  // values\n  function LOOP() {\n    // stop if scanned past end of path\n    if (pos >= p.length) {\n      return callback(null, encodeRealpathResult(p, options));\n    }\n\n    // find the next part\n    const result = nextPart(p, pos);\n    previous = current;\n    if (result === -1) {\n      const last = p.slice(pos);\n      current += last;\n      base = previous + last;\n      pos = p.length;\n    } else {\n      current += p.slice(pos, result + 1);\n      base = previous + p.slice(pos, result);\n      pos = result + 1;\n    }\n\n    // continue if not a symlink, break if a pipe/socket\n    if (knownHard[base]) {\n      if (isFileType(statValues, S_IFIFO) ||\n          isFileType(statValues, S_IFSOCK)) {\n        return callback(null, encodeRealpathResult(p, options));\n      }\n      return process.nextTick(LOOP);\n    }\n\n    return fs.lstat(base, gotStat);\n  }\n\n  function gotStat(err, stats) {\n    if (err) return callback(err);\n\n    // if not a symlink, skip to the next path part\n    if (!stats.isSymbolicLink()) {\n      knownHard[base] = true;\n      return process.nextTick(LOOP);\n    }\n\n    // stat & read the link if not read before\n    // call gotTarget as soon as the link target is known\n    // dev/ino always return 0 on windows, so skip the check.\n    let id;\n    if (!isWindows) {\n      const dev = stats.dev.toString(32);\n      const ino = stats.ino.toString(32);\n      id = `${dev}:${ino}`;\n      if (seenLinks[id]) {\n        return gotTarget(null, seenLinks[id], base);\n      }\n    }\n    fs.stat(base, function(err) {\n      if (err) return callback(err);\n\n      fs.readlink(base, function(err, target) {\n        if (!isWindows) seenLinks[id] = target;\n        gotTarget(err, target);\n      });\n    });\n  }\n\n  function gotTarget(err, target, base) {\n    if (err) return callback(err);\n\n    gotResolvedLink(pathModule.resolve(previous, target));\n  }\n\n  function gotResolvedLink(resolvedLink) {\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    current = base = splitRoot(p);\n    pos = current.length;\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstat(base, function(err) {\n        if (err) return callback(err);\n        knownHard[base] = true;\n        LOOP();\n      });\n    } else {\n      process.nextTick(LOOP);\n    }\n  }\n}\n\n\nrealpath.native = function(path, options, callback) {\n  callback = makeCallback(callback || options);\n  options = getOptions(options, {});\n  path = toPathIfFileURL(path);\n  validatePath(path);\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  return binding.realpath(path, options.encoding, req);\n};\n\nfunction mkdtemp(prefix, options, callback) {\n  callback = makeCallback(typeof options === 'function' ? options : callback);\n  options = getOptions(options, {});\n  if (!prefix || typeof prefix !== 'string') {\n    throw new ERR_INVALID_ARG_TYPE('prefix', 'string', prefix);\n  }\n  nullCheck(prefix, 'prefix');\n  const req = new FSReqWrap();\n  req.oncomplete = callback;\n  binding.mkdtemp(`${prefix}XXXXXX`, options.encoding, req);\n}\n\n\nfunction mkdtempSync(prefix, options) {\n  options = getOptions(options, {});\n  if (!prefix || typeof prefix !== 'string') {\n    throw new ERR_INVALID_ARG_TYPE('prefix', 'string', prefix);\n  }\n  nullCheck(prefix, 'prefix');\n  const path = `${prefix}XXXXXX`;\n  const ctx = { path };\n  const result = binding.mkdtemp(path, options.encoding,\n                                 undefined, ctx);\n  handleErrorFromBinding(ctx);\n  return result;\n}\n\n\nfunction copyFile(src, dest, flags, callback) {\n  if (typeof flags === 'function') {\n    callback = flags;\n    flags = 0;\n  } else if (typeof callback !== 'function') {\n    throw new ERR_INVALID_CALLBACK();\n  }\n\n  src = toPathIfFileURL(src);\n  dest = toPathIfFileURL(dest);\n  validatePath(src, 'src');\n  validatePath(dest, 'dest');\n\n  src = pathModule._makeLong(src);\n  dest = pathModule._makeLong(dest);\n  flags = flags | 0;\n  const req = new FSReqWrap();\n  req.oncomplete = makeCallback(callback);\n  binding.copyFile(src, dest, flags, req);\n}\n\n\nfunction copyFileSync(src, dest, flags) {\n  src = toPathIfFileURL(src);\n  dest = toPathIfFileURL(dest);\n  validatePath(src, 'src');\n  validatePath(dest, 'dest');\n\n  const ctx = { path: src, dest };  // non-prefixed\n\n  src = pathModule._makeLong(src);\n  dest = pathModule._makeLong(dest);\n  flags = flags | 0;\n  binding.copyFile(src, dest, flags, undefined, ctx);\n  handleErrorFromBinding(ctx);\n}\n\nfunction createReadStream(path, options) {\n  return new ReadStream(path, options);\n}\n\nfunction createWriteStream(path, options) {\n  return new WriteStream(path, options);\n}\n\n\nmodule.exports = fs = {\n  appendFile,\n  appendFileSync,\n  access,\n  accessSync,\n  chown,\n  chownSync,\n  chmod,\n  chmodSync,\n  close,\n  closeSync,\n  copyFile,\n  copyFileSync,\n  createReadStream,\n  createWriteStream,\n  exists,\n  existsSync,\n  fchown,\n  fchownSync,\n  fchmod,\n  fchmodSync,\n  fdatasync,\n  fdatasyncSync,\n  fstat,\n  fstatSync,\n  fsync,\n  fsyncSync,\n  ftruncate,\n  ftruncateSync,\n  futimes,\n  futimesSync,\n  lchown,\n  lchownSync,\n  lchmod: constants.O_SYMLINK !== undefined ? lchmod : undefined,\n  lchmodSync: constants.O_SYMLINK !== undefined ? lchmodSync : undefined,\n  link,\n  linkSync,\n  lstat,\n  lstatSync,\n  mkdir,\n  mkdirSync,\n  mkdtemp,\n  mkdtempSync,\n  open,\n  openSync,\n  readdir,\n  readdirSync,\n  read,\n  readSync,\n  readFile,\n  readFileSync,\n  readlink,\n  readlinkSync,\n  realpath,\n  realpathSync,\n  rename,\n  renameSync,\n  rmdir,\n  rmdirSync,\n  stat,\n  statSync,\n  symlink,\n  symlinkSync,\n  truncate,\n  truncateSync,\n  unwatchFile,\n  unlink,\n  unlinkSync,\n  utimes,\n  utimesSync,\n  watch,\n  watchFile,\n  writeFile,\n  writeFileSync,\n  write,\n  writeSync,\n  Dirent,\n  Stats,\n\n  // Stream constructors\n  ReadStream,\n  WriteStream,\n  // Legacy names...\n  FileReadStream: ReadStream,\n  FileWriteStream: WriteStream,\n\n  // For tests\n  _toUnixTimestamp: toUnixTimestamp\n};\n\nObject.defineProperties(fs, {\n  F_OK: { enumerable: true, value: F_OK || 0 },\n  R_OK: { enumerable: true, value: R_OK || 0 },\n  W_OK: { enumerable: true, value: W_OK || 0 },\n  X_OK: { enumerable: true, value: X_OK || 0 },\n  constants: {\n    configurable: false,\n    enumerable: true,\n    value: constants\n  },\n  promises: {\n    configurable: true,\n    enumerable: false,\n    get() {\n      if (promisesWarn) {\n        promises = require('internal/fs/promises');\n        promisesWarn = false;\n        process.emitWarning('The fs.promises API is experimental',\n                            'ExperimentalWarning');\n      }\n      return promises;\n    }\n  }\n});\n\n// SyncWriteStream is internal. DO NOT USE.\n// This undocumented API was never intended to be made public.\nvar SyncWriteStream = internalFS.SyncWriteStream;\nObject.defineProperty(fs, 'SyncWriteStream', {\n  configurable: true,\n  get: internalUtil.deprecate(() => SyncWriteStream,\n                              'fs.SyncWriteStream is deprecated.', 'DEP0061'),\n  set: internalUtil.deprecate((val) => { SyncWriteStream = val; },\n                              'fs.SyncWriteStream is deprecated.', 'DEP0061')\n});\n\n});"},{"scriptId":"31","url":"internal/fs/utils.js","source":"(function (exports, require, module, process, internalBinding) {'use strict';\n\nconst { Buffer, kMaxLength } = require('buffer');\nconst {\n  ERR_FS_INVALID_SYMLINK_TYPE,\n  ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_ARG_VALUE,\n  ERR_INVALID_OPT_VALUE,\n  ERR_INVALID_OPT_VALUE_ENCODING,\n  ERR_OUT_OF_RANGE\n} = require('internal/errors').codes;\nconst { isUint8Array, isArrayBufferView } = require('internal/util/types');\nconst { once } = require('internal/util');\nconst pathModule = require('path');\nconst util = require('util');\nconst kType = Symbol('type');\nconst kStats = Symbol('stats');\n\nconst {\n  O_APPEND,\n  O_CREAT,\n  O_EXCL,\n  O_RDONLY,\n  O_RDWR,\n  O_SYNC,\n  O_TRUNC,\n  O_WRONLY,\n  S_IFBLK,\n  S_IFCHR,\n  S_IFDIR,\n  S_IFIFO,\n  S_IFLNK,\n  S_IFMT,\n  S_IFREG,\n  S_IFSOCK,\n  UV_FS_SYMLINK_DIR,\n  UV_FS_SYMLINK_JUNCTION,\n  UV_DIRENT_UNKNOWN,\n  UV_DIRENT_FILE,\n  UV_DIRENT_DIR,\n  UV_DIRENT_LINK,\n  UV_DIRENT_FIFO,\n  UV_DIRENT_SOCKET,\n  UV_DIRENT_CHAR,\n  UV_DIRENT_BLOCK\n} = process.binding('constants').fs;\n\nconst isWindows = process.platform === 'win32';\n\nlet fs;\nfunction lazyLoadFs() {\n  if (!fs) {\n    fs = require('fs');\n  }\n  return fs;\n}\n\nfunction assertEncoding(encoding) {\n  if (encoding && !Buffer.isEncoding(encoding)) {\n    throw new ERR_INVALID_OPT_VALUE_ENCODING(encoding);\n  }\n}\n\nclass Dirent {\n  constructor(name, type) {\n    this.name = name;\n    this[kType] = type;\n  }\n\n  isDirectory() {\n    return this[kType] === UV_DIRENT_DIR;\n  }\n\n  isFile() {\n    return this[kType] === UV_DIRENT_FILE;\n  }\n\n  isBlockDevice() {\n    return this[kType] === UV_DIRENT_BLOCK;\n  }\n\n  isCharacterDevice() {\n    return this[kType] === UV_DIRENT_CHAR;\n  }\n\n  isSymbolicLink() {\n    return this[kType] === UV_DIRENT_LINK;\n  }\n\n  isFIFO() {\n    return this[kType] === UV_DIRENT_FIFO;\n  }\n\n  isSocket() {\n    return this[kType] === UV_DIRENT_SOCKET;\n  }\n}\n\nclass DirentFromStats extends Dirent {\n  constructor(name, stats) {\n    super(name, null);\n    this[kStats] = stats;\n  }\n}\n\nfor (const name of Reflect.ownKeys(Dirent.prototype)) {\n  if (name === 'constructor') {\n    continue;\n  }\n  DirentFromStats.prototype[name] = function() {\n    return this[kStats][name]();\n  };\n}\n\nfunction copyObject(source) {\n  const target = {};\n  for (const key in source)\n    target[key] = source[key];\n  return target;\n}\n\nfunction getDirents(path, [names, types], callback) {\n  let i;\n  if (typeof callback === 'function') {\n    const len = names.length;\n    let toFinish = 0;\n    callback = once(callback);\n    for (i = 0; i < len; i++) {\n      const type = types[i];\n      if (type === UV_DIRENT_UNKNOWN) {\n        const name = names[i];\n        const idx = i;\n        toFinish++;\n        lazyLoadFs().lstat(pathModule.join(path, name), (err, stats) => {\n          if (err) {\n            callback(err);\n            return;\n          }\n          names[idx] = new DirentFromStats(name, stats);\n          if (--toFinish === 0) {\n            callback(null, names);\n          }\n        });\n      } else {\n        names[i] = new Dirent(names[i], types[i]);\n      }\n    }\n    if (toFinish === 0) {\n      callback(null, names);\n    }\n  } else {\n    const len = names.length;\n    for (i = 0; i < len; i++) {\n      const type = types[i];\n      if (type === UV_DIRENT_UNKNOWN) {\n        const name = names[i];\n        const stats = lazyLoadFs().lstatSync(pathModule.join(path, name));\n        names[i] = new DirentFromStats(name, stats);\n      } else {\n        names[i] = new Dirent(names[i], types[i]);\n      }\n    }\n    return names;\n  }\n}\n\nfunction getOptions(options, defaultOptions) {\n  if (options === null || options === undefined ||\n      typeof options === 'function') {\n    return defaultOptions;\n  }\n\n  if (typeof options === 'string') {\n    defaultOptions = util._extend({}, defaultOptions);\n    defaultOptions.encoding = options;\n    options = defaultOptions;\n  } else if (typeof options !== 'object') {\n    throw new ERR_INVALID_ARG_TYPE('options', ['string', 'Object'], options);\n  }\n\n  if (options.encoding !== 'buffer')\n    assertEncoding(options.encoding);\n  return options;\n}\n\n// Check if the path contains null types if it is a string nor Uint8Array,\n// otherwise return silently.\nfunction nullCheck(path, propName, throwError = true) {\n  const pathIsString = typeof path === 'string';\n  const pathIsUint8Array = isUint8Array(path);\n\n  // We can only perform meaningful checks on strings and Uint8Arrays.\n  if (!pathIsString && !pathIsUint8Array) {\n    return;\n  }\n\n  if (pathIsString && path.indexOf('\\u0000') === -1) {\n    return;\n  } else if (pathIsUint8Array && path.indexOf(0) === -1) {\n    return;\n  }\n\n  const err = new ERR_INVALID_ARG_VALUE(\n    propName,\n    path,\n    'must be a string or Uint8Array without null bytes'\n  );\n\n  if (throwError) {\n    Error.captureStackTrace(err, nullCheck);\n    throw err;\n  }\n  return err;\n}\n\nfunction preprocessSymlinkDestination(path, type, linkPath) {\n  if (!isWindows) {\n    // No preprocessing is needed on Unix.\n    return path;\n  } else if (type === 'junction') {\n    // Junctions paths need to be absolute and \\\\?\\-prefixed.\n    // A relative target is relative to the link's parent directory.\n    path = pathModule.resolve(linkPath, '..', path);\n    return pathModule.toNamespacedPath(path);\n  } else {\n    // Windows symlinks don't tolerate forward slashes.\n    return ('' + path).replace(/\\//g, '\\\\');\n  }\n}\n\nfunction dateFromNumeric(num) {\n  return new Date(Number(num) + 0.5);\n}\n\n// Constructor for file stats.\nfunction Stats(\n  dev,\n  mode,\n  nlink,\n  uid,\n  gid,\n  rdev,\n  blksize,\n  ino,\n  size,\n  blocks,\n  atim_msec,\n  mtim_msec,\n  ctim_msec,\n  birthtim_msec\n) {\n  this.dev = dev;\n  this.mode = mode;\n  this.nlink = nlink;\n  this.uid = uid;\n  this.gid = gid;\n  this.rdev = rdev;\n  this.blksize = blksize;\n  this.ino = ino;\n  this.size = size;\n  this.blocks = blocks;\n  this.atimeMs = atim_msec;\n  this.mtimeMs = mtim_msec;\n  this.ctimeMs = ctim_msec;\n  this.birthtimeMs = birthtim_msec;\n  this.atime = dateFromNumeric(atim_msec);\n  this.mtime = dateFromNumeric(mtim_msec);\n  this.ctime = dateFromNumeric(ctim_msec);\n  this.birthtime = dateFromNumeric(birthtim_msec);\n}\n\nStats.prototype._checkModeProperty = function(property) {\n  if (isWindows && (property === S_IFIFO || property === S_IFBLK ||\n    property === S_IFSOCK)) {\n    return false;  // Some types are not available on Windows\n  }\n  if (typeof this.mode === 'bigint') {  // eslint-disable-line valid-typeof\n    return (this.mode & BigInt(S_IFMT)) === BigInt(property);\n  }\n  return (this.mode & S_IFMT) === property;\n};\n\nStats.prototype.isDirectory = function() {\n  return this._checkModeProperty(S_IFDIR);\n};\n\nStats.prototype.isFile = function() {\n  return this._checkModeProperty(S_IFREG);\n};\n\nStats.prototype.isBlockDevice = function() {\n  return this._checkModeProperty(S_IFBLK);\n};\n\nStats.prototype.isCharacterDevice = function() {\n  return this._checkModeProperty(S_IFCHR);\n};\n\nStats.prototype.isSymbolicLink = function() {\n  return this._checkModeProperty(S_IFLNK);\n};\n\nStats.prototype.isFIFO = function() {\n  return this._checkModeProperty(S_IFIFO);\n};\n\nStats.prototype.isSocket = function() {\n  return this._checkModeProperty(S_IFSOCK);\n};\n\nfunction getStatsFromBinding(stats, offset = 0) {\n  return new Stats(stats[0 + offset], stats[1 + offset], stats[2 + offset],\n                   stats[3 + offset], stats[4 + offset], stats[5 + offset],\n                   isWindows ? undefined : stats[6 + offset],  // blksize\n                   stats[7 + offset], stats[8 + offset],\n                   isWindows ? undefined : stats[9 + offset],  // blocks\n                   stats[10 + offset], stats[11 + offset],\n                   stats[12 + offset], stats[13 + offset]);\n}\n\nfunction stringToFlags(flags) {\n  if (typeof flags === 'number') {\n    return flags;\n  }\n\n  switch (flags) {\n    case 'r' : return O_RDONLY;\n    case 'rs' : // Fall through.\n    case 'sr' : return O_RDONLY | O_SYNC;\n    case 'r+' : return O_RDWR;\n    case 'rs+' : // Fall through.\n    case 'sr+' : return O_RDWR | O_SYNC;\n\n    case 'w' : return O_TRUNC | O_CREAT | O_WRONLY;\n    case 'wx' : // Fall through.\n    case 'xw' : return O_TRUNC | O_CREAT | O_WRONLY | O_EXCL;\n\n    case 'w+' : return O_TRUNC | O_CREAT | O_RDWR;\n    case 'wx+': // Fall through.\n    case 'xw+': return O_TRUNC | O_CREAT | O_RDWR | O_EXCL;\n\n    case 'a' : return O_APPEND | O_CREAT | O_WRONLY;\n    case 'ax' : // Fall through.\n    case 'xa' : return O_APPEND | O_CREAT | O_WRONLY | O_EXCL;\n    case 'as' : // Fall through.\n    case 'sa' : return O_APPEND | O_CREAT | O_WRONLY | O_SYNC;\n\n    case 'a+' : return O_APPEND | O_CREAT | O_RDWR;\n    case 'ax+': // Fall through.\n    case 'xa+': return O_APPEND | O_CREAT | O_RDWR | O_EXCL;\n    case 'as+': // Fall through.\n    case 'sa+': return O_APPEND | O_CREAT | O_RDWR | O_SYNC;\n  }\n\n  throw new ERR_INVALID_OPT_VALUE('flags', flags);\n}\n\nfunction stringToSymlinkType(type) {\n  let flags = 0;\n  if (typeof type === 'string') {\n    switch (type) {\n      case 'dir':\n        flags |= UV_FS_SYMLINK_DIR;\n        break;\n      case 'junction':\n        flags |= UV_FS_SYMLINK_JUNCTION;\n        break;\n      case 'file':\n        break;\n      default:\n        const err = new ERR_FS_INVALID_SYMLINK_TYPE(type);\n        Error.captureStackTrace(err, stringToSymlinkType);\n        throw err;\n    }\n  }\n  return flags;\n}\n\n// converts Date or number to a fractional UNIX timestamp\nfunction toUnixTimestamp(time, name = 'time') {\n  // eslint-disable-next-line eqeqeq\n  if (typeof time === 'string' && +time == time) {\n    return +time;\n  }\n  if (Number.isFinite(time)) {\n    if (time < 0) {\n      return Date.now() / 1000;\n    }\n    return time;\n  }\n  if (util.isDate(time)) {\n    // convert to 123.456 UNIX timestamp\n    return time.getTime() / 1000;\n  }\n  throw new ERR_INVALID_ARG_TYPE(name, ['Date', 'Time in seconds'], time);\n}\n\nfunction validateBuffer(buffer) {\n  if (!isArrayBufferView(buffer)) {\n    const err = new ERR_INVALID_ARG_TYPE('buffer',\n                                         ['Buffer', 'TypedArray', 'DataView'],\n                                         buffer);\n    Error.captureStackTrace(err, validateBuffer);\n    throw err;\n  }\n}\n\nfunction validateOffsetLengthRead(offset, length, bufferLength) {\n  let err;\n\n  if (offset < 0 || offset >= bufferLength) {\n    err = new ERR_OUT_OF_RANGE('offset', `>= 0 && <= ${bufferLength}`, offset);\n  } else if (length < 0 || offset + length > bufferLength) {\n    err = new ERR_OUT_OF_RANGE('length',\n                               `>= 0 && <= ${bufferLength - offset}`, length);\n  }\n\n  if (err !== undefined) {\n    Error.captureStackTrace(err, validateOffsetLengthRead);\n    throw err;\n  }\n}\n\nfunction validateOffsetLengthWrite(offset, length, byteLength) {\n  let err;\n\n  if (offset > byteLength) {\n    err = new ERR_OUT_OF_RANGE('offset', `<= ${byteLength}`, offset);\n  } else {\n    const max = byteLength > kMaxLength ? kMaxLength : byteLength;\n    if (length > max - offset) {\n      err = new ERR_OUT_OF_RANGE('length', `<= ${max - offset}`, length);\n    }\n  }\n\n  if (err !== undefined) {\n    Error.captureStackTrace(err, validateOffsetLengthWrite);\n    throw err;\n  }\n}\n\nfunction validatePath(path, propName = 'path') {\n  let err;\n\n  if (typeof path !== 'string' && !isUint8Array(path)) {\n    err = new ERR_INVALID_ARG_TYPE(propName, ['string', 'Buffer', 'URL'], path);\n  } else {\n    err = nullCheck(path, propName, false);\n  }\n\n  if (err !== undefined) {\n    Error.captureStackTrace(err, validatePath);\n    throw err;\n  }\n}\n\nmodule.exports = {\n  assertEncoding,\n  copyObject,\n  Dirent,\n  getDirents,\n  getOptions,\n  nullCheck,\n  preprocessSymlinkDestination,\n  realpathCacheKey: Symbol('realpathCacheKey'),\n  getStatsFromBinding,\n  stringToFlags,\n  stringToSymlinkType,\n  Stats,\n  toUnixTimestamp,\n  validateBuffer,\n  validateOffsetLengthRead,\n  validateOffsetLengthWrite,\n  validatePath\n};\n\n});"},{"scriptId":"67","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/lib/debug.js","source":"(function (exports, require, module, __filename, __dirname) { 'use strict'\n\nconst path = require('path')\nconst packageJSON = require('../package.json')\nconst packageName = packageJSON.name\n\nconst debug = require('debug')\n\n// thin wrapper over debug to provide file name\n\nmodule.exports = getDebug\n\nfunction getDebug (fileName) {\n  fileName = getProjectPath(fileName)\n  return debug(`${packageName}:${fileName}`)\n}\n\nfunction getProjectPath (fileName) {\n  return path.relative(`${__dirname}/../..`, fileName)\n}\n\n});"},{"scriptId":"75","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/node_modules/debug/src/common.js","source":"(function (exports, require, module, __filename, __dirname) { \n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* Active `debug` instances.\n\t*/\n\tcreateDebug.instances = [];\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.enabled = createDebug.enabled(namespace);\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = selectColor(namespace);\n\t\tdebug.destroy = destroy;\n\t\tdebug.extend = extend;\n\t\t// Debug.formatArgs = formatArgs;\n\t\t// debug.rawLog = rawLog;\n\n\t\t// env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\tcreateDebug.instances.push(debug);\n\n\t\treturn debug;\n\t}\n\n\tfunction destroy() {\n\t\tconst index = createDebug.instances.indexOf(this);\n\t\tif (index !== -1) {\n\t\t\tcreateDebug.instances.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < createDebug.instances.length; i++) {\n\t\t\tconst instance = createDebug.instances[i];\n\t\t\tinstance.enabled = createDebug.enabled(instance.namespace);\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n});"},{"scriptId":"69","url":"file:///Users/pmuellr/Projects/no-pro/packages/runtime/node_modules/debug/src/node.js","source":"(function (exports, require, module, __filename, __dirname) { /**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.replace(/\\s*\\n\\s*/g, ' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n\n});"},{"scriptId":"70","url":"tty.js","source":"(function (exports, require, module, process, internalBinding) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nconst { inherits, _extend } = require('util');\nconst net = require('net');\nconst { TTY, isTTY } = internalBinding('tty_wrap');\nconst errors = require('internal/errors');\nconst { ERR_INVALID_FD, ERR_TTY_INIT_FAILED } = errors.codes;\nconst { getColorDepth } = require('internal/tty');\n\n// Lazy loaded for startup performance.\nlet readline;\n\nfunction isatty(fd) {\n  return Number.isInteger(fd) && fd >= 0 && isTTY(fd);\n}\n\nfunction ReadStream(fd, options) {\n  if (!(this instanceof ReadStream))\n    return new ReadStream(fd, options);\n  if (fd >> 0 !== fd || fd < 0)\n    throw new ERR_INVALID_FD(fd);\n\n  const ctx = {};\n  const tty = new TTY(fd, true, ctx);\n  if (ctx.code !== undefined) {\n    throw new ERR_TTY_INIT_FAILED(ctx);\n  }\n\n  options = _extend({\n    highWaterMark: 0,\n    readable: true,\n    writable: false,\n    handle: tty\n  }, options);\n\n  net.Socket.call(this, options);\n\n  this.isRaw = false;\n  this.isTTY = true;\n}\ninherits(ReadStream, net.Socket);\n\nReadStream.prototype.setRawMode = function(flag) {\n  flag = !!flag;\n  const err = this._handle.setRawMode(flag);\n  if (err) {\n    this.emit('error', errors.errnoException(err, 'setRawMode'));\n    return this;\n  }\n  this.isRaw = flag;\n  return this;\n};\n\nfunction WriteStream(fd) {\n  if (!(this instanceof WriteStream))\n    return new WriteStream(fd);\n  if (fd >> 0 !== fd || fd < 0)\n    throw new ERR_INVALID_FD(fd);\n\n  const ctx = {};\n  const tty = new TTY(fd, false, ctx);\n  if (ctx.code !== undefined) {\n    throw new ERR_TTY_INIT_FAILED(ctx);\n  }\n\n  net.Socket.call(this, {\n    handle: tty,\n    readable: false,\n    writable: true\n  });\n\n  // Prevents interleaved or dropped stdout/stderr output for terminals.\n  // As noted in the following reference, local TTYs tend to be quite fast and\n  // this behavior has become expected due historical functionality on OS X,\n  // even though it was originally intended to change in v1.0.2 (Libuv 1.2.1).\n  // Ref: https://github.com/nodejs/node/pull/1771#issuecomment-119351671\n  this._handle.setBlocking(true);\n\n  const winSize = new Array(2);\n  const err = this._handle.getWindowSize(winSize);\n  if (!err) {\n    this.columns = winSize[0];\n    this.rows = winSize[1];\n  }\n}\ninherits(WriteStream, net.Socket);\n\nWriteStream.prototype.isTTY = true;\n\nWriteStream.prototype.getColorDepth = getColorDepth;\n\nWriteStream.prototype._refreshSize = function() {\n  const oldCols = this.columns;\n  const oldRows = this.rows;\n  const winSize = new Array(2);\n  const err = this._handle.getWindowSize(winSize);\n  if (err) {\n    this.emit('error', errors.errnoException(err, 'getWindowSize'));\n    return;\n  }\n  const [newCols, newRows] = winSize;\n  if (oldCols !== newCols || oldRows !== newRows) {\n    this.columns = newCols;\n    this.rows = newRows;\n    this.emit('resize');\n  }\n};\n\n// Backwards-compat\nWriteStream.prototype.cursorTo = function(x, y) {\n  if (readline === undefined) readline = require('readline');\n  readline.cursorTo(this, x, y);\n};\nWriteStream.prototype.moveCursor = function(dx, dy) {\n  if (readline === undefined) readline = require('readline');\n  readline.moveCursor(this, dx, dy);\n};\nWriteStream.prototype.clearLine = function(dir) {\n  if (readline === undefined) readline = require('readline');\n  readline.clearLine(this, dir);\n};\nWriteStream.prototype.clearScreenDown = function() {\n  if (readline === undefined) readline = require('readline');\n  readline.clearScreenDown(this);\n};\nWriteStream.prototype.getWindowSize = function() {\n  return [this.columns, this.rows];\n};\n\nmodule.exports = { isatty, ReadStream, WriteStream };\n\n});"},{"scriptId":"52","url":"timers.js","source":"(function (exports, require, module, process, internalBinding) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nconst {\n  Timer: TimerWrap,\n  setupTimers,\n} = process.binding('timer_wrap');\nconst L = require('internal/linkedlist');\nconst {\n  async_id_symbol,\n  trigger_async_id_symbol,\n  Timeout,\n  initAsyncResource,\n  validateTimerDuration\n} = require('internal/timers');\nconst internalUtil = require('internal/util');\nconst assert = require('assert');\nconst util = require('util');\nconst { ERR_INVALID_CALLBACK } = require('internal/errors').codes;\nconst debug = util.debuglog('timer');\nconst {\n  destroyHooksExist,\n  // The needed emit*() functions.\n  emitBefore,\n  emitAfter,\n  emitDestroy,\n  symbols: { owner_symbol }\n} = require('internal/async_hooks');\n\n// *Must* match Environment::ImmediateInfo::Fields in src/env.h.\nconst kCount = 0;\nconst kRefCount = 1;\nconst kHasOutstanding = 2;\n\nconst [immediateInfo, toggleImmediateRef] =\n  setupTimers(processImmediate, processTimers);\n\nconst kRefed = Symbol('refed');\n\n// HOW and WHY the timers implementation works the way it does.\n//\n// Timers are crucial to Node.js. Internally, any TCP I/O connection creates a\n// timer so that we can time out of connections. Additionally, many user\n// libraries and applications also use timers. As such there may be a\n// significantly large amount of timeouts scheduled at any given time.\n// Therefore, it is very important that the timers implementation is performant\n// and efficient.\n//\n// Note: It is suggested you first read through the lib/internal/linkedlist.js\n// linked list implementation, since timers depend on it extensively. It can be\n// somewhat counter-intuitive at first, as it is not actually a class. Instead,\n// it is a set of helpers that operate on an existing object.\n//\n// In order to be as performant as possible, the architecture and data\n// structures are designed so that they are optimized to handle the following\n// use cases as efficiently as possible:\n\n// - Adding a new timer. (insert)\n// - Removing an existing timer. (remove)\n// - Handling a timer timing out. (timeout)\n//\n// Whenever possible, the implementation tries to make the complexity of these\n// operations as close to constant-time as possible.\n// (So that performance is not impacted by the number of scheduled timers.)\n//\n// Object maps are kept which contain linked lists keyed by their duration in\n// milliseconds.\n// The linked lists within also have some meta-properties, one of which is a\n// TimerWrap C++ handle, which makes the call after the duration to process the\n// list it is attached to.\n//\n/* eslint-disable node-core/non-ascii-character */\n//\n// ╔════ > Object Map\n// ║\n// ╠══\n// ║ refedLists: { '40': { }, '320': { etc } } (keys of millisecond duration)\n// ╚══          ┌─────────┘\n//              │\n// ╔══          │\n// ║ TimersList { _idleNext: { }, _idlePrev: (self), _timer: (TimerWrap) }\n// ║         ┌────────────────┘\n// ║    ╔══  │                              ^\n// ║    ║    { _idleNext: { },  _idlePrev: { }, _onTimeout: (callback) }\n// ║    ║      ┌───────────┘\n// ║    ║      │                                  ^\n// ║    ║      { _idleNext: { etc },  _idlePrev: { }, _onTimeout: (callback) }\n// ╠══  ╠══\n// ║    ║\n// ║    ╚════ >  Actual JavaScript timeouts\n// ║\n// ╚════ > Linked List\n//\n/* eslint-enable node-core/non-ascii-character */\n//\n// With this, virtually constant-time insertion (append), removal, and timeout\n// is possible in the JavaScript layer. Any one list of timers is able to be\n// sorted by just appending to it because all timers within share the same\n// duration. Therefore, any timer added later will always have been scheduled to\n// timeout later, thus only needing to be appended.\n// Removal from an object-property linked list is also virtually constant-time\n// as can be seen in the lib/internal/linkedlist.js implementation.\n// Timeouts only need to process any timers currently due to expire, which will\n// always be at the beginning of the list for reasons stated above. Any timers\n// after the first one encountered that does not yet need to timeout will also\n// always be due to timeout at a later time.\n//\n// Less-than constant time operations are thus contained in two places:\n// TimerWrap's backing libuv timers implementation (a performant heap-based\n// queue), and the object map lookup of a specific list by the duration of\n// timers within (or creation of a new list).\n// However, these operations combined have shown to be trivial in comparison to\n// other alternative timers architectures.\n\n\n// Object maps containing linked lists of timers, keyed and sorted by their\n// duration in milliseconds.\n//\n// The difference between these two objects is that the former contains timers\n// that will keep the process open if they are the only thing left, while the\n// latter will not.\n//\n// - key = time in milliseconds\n// - value = linked list\nconst refedLists = Object.create(null);\nconst unrefedLists = Object.create(null);\n\n\n// Schedule or re-schedule a timer.\n// The item must have been enroll()'d first.\nconst active = exports.active = function(item) {\n  insert(item, false);\n};\n\n// Internal APIs that need timeouts should use `_unrefActive()` instead of\n// `active()` so that they do not unnecessarily keep the process open.\nexports._unrefActive = function(item) {\n  insert(item, true);\n};\n\n\n// The underlying logic for scheduling or re-scheduling a timer.\n//\n// Appends a timer onto the end of an existing timers list, or creates a new\n// TimerWrap backed list if one does not already exist for the specified timeout\n// duration.\nfunction insert(item, unrefed, start) {\n  const msecs = item._idleTimeout;\n  if (msecs < 0 || msecs === undefined) return;\n\n  if (typeof start === 'number') {\n    item._idleStart = start;\n  } else {\n    item._idleStart = TimerWrap.now();\n  }\n\n  const lists = unrefed === true ? unrefedLists : refedLists;\n\n  // Use an existing list if there is one, otherwise we need to make a new one.\n  var list = lists[msecs];\n  if (list === undefined) {\n    debug('no %d list was found in insert, creating a new one', msecs);\n    lists[msecs] = list = new TimersList(msecs, unrefed);\n  }\n\n  if (!item[async_id_symbol] || item._destroyed) {\n    item._destroyed = false;\n    initAsyncResource(item, 'Timeout');\n  }\n\n  L.append(list, item);\n  assert(!L.isEmpty(list)); // list is not empty\n}\n\nfunction TimersList(msecs, unrefed) {\n  this._idleNext = this; // Create the list with the linkedlist properties to\n  this._idlePrev = this; // prevent any unnecessary hidden class changes.\n  this._unrefed = unrefed;\n  this.msecs = msecs;\n\n  const timer = this._timer = new TimerWrap();\n  timer._list = this;\n\n  if (unrefed === true)\n    timer.unref();\n  timer.start(msecs);\n}\n\n// Make sure the linked list only shows the minimal necessary information.\nTimersList.prototype[util.inspect.custom] = function(_, options) {\n  return util.inspect(this, {\n    ...options,\n    // Only inspect one level.\n    depth: 0,\n    // It should not recurse.\n    customInspect: false\n  });\n};\n\nfunction processTimers(now) {\n  if (this[owner_symbol])\n    return unrefdHandle(this[owner_symbol], now);\n  return listOnTimeout(this, now);\n}\n\nfunction listOnTimeout(handle, now) {\n  const list = handle._list;\n  const msecs = list.msecs;\n\n  debug('timeout callback %d', msecs);\n  debug('now: %d', now);\n\n  var diff, timer;\n  while (timer = L.peek(list)) {\n    diff = now - timer._idleStart;\n\n    // Check if this loop iteration is too early for the next timer.\n    // This happens if there are more timers scheduled for later in the list.\n    if (diff < msecs) {\n      var timeRemaining = msecs - (TimerWrap.now() - timer._idleStart);\n      if (timeRemaining <= 0) {\n        timeRemaining = 1;\n      }\n      handle.start(timeRemaining);\n      debug('%d list wait because diff is %d', msecs, diff);\n      return true;\n    }\n\n    // The actual logic for when a timeout happens.\n\n    L.remove(timer);\n    assert(timer !== L.peek(list));\n\n    if (!timer._onTimeout) {\n      if (destroyHooksExist() && !timer._destroyed &&\n            typeof timer[async_id_symbol] === 'number') {\n        emitDestroy(timer[async_id_symbol]);\n        timer._destroyed = true;\n      }\n      continue;\n    }\n\n    tryOnTimeout(timer);\n  }\n\n  // If `L.peek(list)` returned nothing, the list was either empty or we have\n  // called all of the timer timeouts.\n  // As such, we can remove the list and clean up the TimerWrap C++ handle.\n  debug('%d list empty', msecs);\n  assert(L.isEmpty(list));\n\n  // Either refedLists[msecs] or unrefedLists[msecs] may have been removed and\n  // recreated since the reference to `list` was created. Make sure they're\n  // the same instance of the list before destroying.\n  if (list._unrefed === true && list === unrefedLists[msecs]) {\n    delete unrefedLists[msecs];\n  } else if (list === refedLists[msecs]) {\n    delete refedLists[msecs];\n  }\n\n  // Do not close the underlying handle if its ownership has changed\n  // (e.g it was unrefed in its callback).\n  if (!handle[owner_symbol])\n    handle.close();\n\n  return true;\n}\n\n\n// An optimization so that the try/finally only de-optimizes (since at least v8\n// 4.7) what is in this smaller function.\nfunction tryOnTimeout(timer, start) {\n  timer._called = true;\n  const timerAsyncId = (typeof timer[async_id_symbol] === 'number') ?\n    timer[async_id_symbol] : null;\n  var threw = true;\n  if (timerAsyncId !== null)\n    emitBefore(timerAsyncId, timer[trigger_async_id_symbol]);\n  try {\n    ontimeout(timer, start);\n    threw = false;\n  } finally {\n    if (timerAsyncId !== null) {\n      if (!threw)\n        emitAfter(timerAsyncId);\n      if ((threw || !timer._repeat) && destroyHooksExist() &&\n          !timer._destroyed) {\n        emitDestroy(timerAsyncId);\n        timer._destroyed = true;\n      }\n    }\n  }\n}\n\n\n// A convenience function for re-using TimerWrap handles more easily.\n//\n// This mostly exists to fix https://github.com/nodejs/node/issues/1264.\n// Handles in libuv take at least one `uv_run` to be registered as unreferenced.\n// Re-using an existing handle allows us to skip that, so that a second `uv_run`\n// will return no active handles, even when running `setTimeout(fn).unref()`.\nfunction reuse(item) {\n  L.remove(item);\n\n  const list = refedLists[item._idleTimeout];\n  // if empty - reuse the watcher\n  if (list !== undefined && L.isEmpty(list)) {\n    debug('reuse hit');\n    list._timer.stop();\n    delete refedLists[item._idleTimeout];\n    return list._timer;\n  }\n\n  return null;\n}\n\n\n// Remove a timer. Cancels the timeout and resets the relevant timer properties.\nfunction unenroll(item) {\n  // Fewer checks may be possible, but these cover everything.\n  if (destroyHooksExist() &&\n      typeof item[async_id_symbol] === 'number' &&\n      !item._destroyed) {\n    emitDestroy(item[async_id_symbol]);\n    item._destroyed = true;\n  }\n\n  const handle = reuse(item);\n  if (handle !== null) {\n    debug('unenroll: list empty');\n    handle.close();\n  }\n  // if active is called later, then we want to make sure not to insert again\n  item._idleTimeout = -1;\n}\n\nexports.unenroll = util.deprecate(unenroll,\n                                  'timers.unenroll() is deprecated. ' +\n                                  'Please use clearTimeout instead.',\n                                  'DEP0096');\n\n\n// Make a regular object able to act as a timer by setting some properties.\n// This function does not start the timer, see `active()`.\n// Using existing objects as timers slightly reduces object overhead.\nfunction enroll(item, msecs) {\n  msecs = validateTimerDuration(msecs);\n\n  // if this item was already in a list somewhere\n  // then we should unenroll it from that\n  if (item._idleNext) unenroll(item);\n\n  L.init(item);\n  item._idleTimeout = msecs;\n}\n\nexports.enroll = util.deprecate(enroll,\n                                'timers.enroll() is deprecated. ' +\n                                'Please use setTimeout instead.',\n                                'DEP0095');\n\n\n/*\n * DOM-style timers\n */\n\n\nfunction setTimeout(callback, after, arg1, arg2, arg3) {\n  if (typeof callback !== 'function') {\n    throw new ERR_INVALID_CALLBACK();\n  }\n\n  var i, args;\n  switch (arguments.length) {\n    // fast cases\n    case 1:\n    case 2:\n      break;\n    case 3:\n      args = [arg1];\n      break;\n    case 4:\n      args = [arg1, arg2];\n      break;\n    default:\n      args = [arg1, arg2, arg3];\n      for (i = 5; i < arguments.length; i++) {\n        // extend array dynamically, makes .apply run much faster in v6.0.0\n        args[i - 2] = arguments[i];\n      }\n      break;\n  }\n\n  const timeout = new Timeout(callback, after, args, false, false);\n  active(timeout);\n\n  return timeout;\n}\n\nsetTimeout[internalUtil.promisify.custom] = function(after, value) {\n  return new Promise((resolve) => {\n    active(new Timeout(resolve, after, [value], false, false));\n  });\n};\n\nexports.setTimeout = setTimeout;\n\n\nfunction ontimeout(timer, start) {\n  const args = timer._timerArgs;\n  if (typeof timer._onTimeout !== 'function')\n    return Promise.resolve(timer._onTimeout, args[0]);\n  if (start === undefined && timer._repeat)\n    start = TimerWrap.now();\n  if (!args)\n    timer._onTimeout();\n  else\n    Reflect.apply(timer._onTimeout, timer, args);\n  if (timer._repeat)\n    rearm(timer, start);\n}\n\nfunction rearm(timer, start = TimerWrap.now()) {\n  // // Do not re-arm unenroll'd or closed timers.\n  if (timer._idleTimeout === -1) return;\n\n  // If timer is unref'd (or was - it's permanently removed from the list.)\n  if (timer._handle && timer instanceof Timeout) {\n    timer._handle.start(timer._repeat);\n  } else {\n    timer._idleTimeout = timer._repeat;\n\n    const duration = TimerWrap.now() - start;\n    if (duration >= timer._repeat) {\n      // If callback duration >= timer._repeat,\n      // add 1 ms to avoid blocking eventloop\n      insert(timer, false, start + duration - timer._repeat + 1);\n    } else {\n      insert(timer, false, start);\n    }\n  }\n}\n\n\nconst clearTimeout = exports.clearTimeout = function clearTimeout(timer) {\n  if (timer && timer._onTimeout) {\n    timer._onTimeout = null;\n    if (timer instanceof Timeout) {\n      timer.close(); // for after === 0\n    } else {\n      unenroll(timer);\n    }\n  }\n};\n\n\nexports.setInterval = function setInterval(callback, repeat, arg1, arg2, arg3) {\n  if (typeof callback !== 'function') {\n    throw new ERR_INVALID_CALLBACK();\n  }\n\n  var i, args;\n  switch (arguments.length) {\n    // fast cases\n    case 1:\n    case 2:\n      break;\n    case 3:\n      args = [arg1];\n      break;\n    case 4:\n      args = [arg1, arg2];\n      break;\n    default:\n      args = [arg1, arg2, arg3];\n      for (i = 5; i < arguments.length; i++) {\n        // extend array dynamically, makes .apply run much faster in v6.0.0\n        args[i - 2] = arguments[i];\n      }\n      break;\n  }\n\n  const timeout = new Timeout(callback, repeat, args, true, false);\n  active(timeout);\n\n  return timeout;\n};\n\nexports.clearInterval = function clearInterval(timer) {\n  // clearTimeout and clearInterval can be used to clear timers created from\n  // both setTimeout and setInterval, as specified by HTML Living Standard:\n  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\n  clearTimeout(timer);\n};\n\nfunction unrefdHandle(timer, now) {\n  try {\n    // Don't attempt to call the callback if it is not a function.\n    if (typeof timer._onTimeout === 'function') {\n      tryOnTimeout(timer, now);\n    }\n  } finally {\n    // Make sure we clean up if the callback is no longer a function\n    // even if the timer is an interval.\n    if (!timer._repeat || typeof timer._onTimeout !== 'function') {\n      timer.close();\n    }\n  }\n\n  return true;\n}\n\n\nTimeout.prototype.unref = function() {\n  if (this._handle) {\n    this._handle.unref();\n  } else if (typeof this._onTimeout === 'function') {\n    const now = TimerWrap.now();\n    if (!this._idleStart) this._idleStart = now;\n    var delay = this._idleStart + this._idleTimeout - now;\n    if (delay < 0) delay = 0;\n\n    // Prevent running cb again when unref() is called during the same cb\n    if (this._called && !this._repeat) {\n      unenroll(this);\n      return;\n    }\n\n    const handle = reuse(this);\n    if (handle !== null) {\n      handle._list = undefined;\n    }\n\n    this._handle = handle || new TimerWrap();\n    this._handle[owner_symbol] = this;\n    this._handle.start(delay);\n    this._handle.unref();\n  }\n  return this;\n};\n\nTimeout.prototype.ref = function() {\n  if (this._handle)\n    this._handle.ref();\n  return this;\n};\n\nTimeout.prototype.close = function() {\n  this._onTimeout = null;\n  if (this._handle) {\n    if (destroyHooksExist() &&\n        typeof this[async_id_symbol] === 'number' &&\n        !this._destroyed) {\n      emitDestroy(this[async_id_symbol]);\n      this._destroyed = true;\n    }\n\n    this._idleTimeout = -1;\n    this._handle.close();\n  } else {\n    unenroll(this);\n  }\n  return this;\n};\n\n\n// A linked list for storing `setImmediate()` requests\nfunction ImmediateList() {\n  this.head = null;\n  this.tail = null;\n}\n\n// Appends an item to the end of the linked list, adjusting the current tail's\n// previous and next pointers where applicable\nImmediateList.prototype.append = function(item) {\n  if (this.tail !== null) {\n    this.tail._idleNext = item;\n    item._idlePrev = this.tail;\n  } else {\n    this.head = item;\n  }\n  this.tail = item;\n};\n\n// Removes an item from the linked list, adjusting the pointers of adjacent\n// items and the linked list's head or tail pointers as necessary\nImmediateList.prototype.remove = function(item) {\n  if (item._idleNext !== null) {\n    item._idleNext._idlePrev = item._idlePrev;\n  }\n\n  if (item._idlePrev !== null) {\n    item._idlePrev._idleNext = item._idleNext;\n  }\n\n  if (item === this.head)\n    this.head = item._idleNext;\n  if (item === this.tail)\n    this.tail = item._idlePrev;\n\n  item._idleNext = null;\n  item._idlePrev = null;\n};\n\n// Create a single linked list instance only once at startup\nconst immediateQueue = new ImmediateList();\n\n// If an uncaught exception was thrown during execution of immediateQueue,\n// this queue will store all remaining Immediates that need to run upon\n// resolution of all error handling (if process is still alive).\nconst outstandingQueue = new ImmediateList();\n\n\nfunction processImmediate() {\n  const queue = outstandingQueue.head !== null ?\n    outstandingQueue : immediateQueue;\n  var immediate = queue.head;\n  const tail = queue.tail;\n\n  // Clear the linked list early in case new `setImmediate()` calls occur while\n  // immediate callbacks are executed\n  queue.head = queue.tail = null;\n\n  let count = 0;\n  let refCount = 0;\n\n  while (immediate !== null) {\n    immediate._destroyed = true;\n\n    const asyncId = immediate[async_id_symbol];\n    emitBefore(asyncId, immediate[trigger_async_id_symbol]);\n\n    count++;\n    if (immediate[kRefed])\n      refCount++;\n    immediate[kRefed] = undefined;\n\n    tryOnImmediate(immediate, tail, count, refCount);\n\n    emitAfter(asyncId);\n\n    immediate = immediate._idleNext;\n  }\n\n  immediateInfo[kCount] -= count;\n  immediateInfo[kRefCount] -= refCount;\n  immediateInfo[kHasOutstanding] = 0;\n}\n\n// An optimization so that the try/finally only de-optimizes (since at least v8\n// 4.7) what is in this smaller function.\nfunction tryOnImmediate(immediate, oldTail, count, refCount) {\n  var threw = true;\n  try {\n    // make the actual call outside the try/finally to allow it to be optimized\n    runCallback(immediate);\n    threw = false;\n  } finally {\n    immediate._onImmediate = null;\n\n    if (destroyHooksExist()) {\n      emitDestroy(immediate[async_id_symbol]);\n    }\n\n    if (threw) {\n      immediateInfo[kCount] -= count;\n      immediateInfo[kRefCount] -= refCount;\n\n      if (immediate._idleNext !== null) {\n        // Handle any remaining Immediates after error handling has resolved,\n        // assuming we're still alive to do so.\n        outstandingQueue.head = immediate._idleNext;\n        outstandingQueue.tail = oldTail;\n        immediateInfo[kHasOutstanding] = 1;\n      }\n    }\n  }\n}\n\nfunction runCallback(timer) {\n  const argv = timer._argv;\n  if (typeof timer._onImmediate !== 'function')\n    return Promise.resolve(timer._onImmediate, argv[0]);\n  if (!argv)\n    return timer._onImmediate();\n  Reflect.apply(timer._onImmediate, timer, argv);\n}\n\n\nconst Immediate = class Immediate {\n  constructor(callback, args) {\n    this._idleNext = null;\n    this._idlePrev = null;\n    // this must be set to null first to avoid function tracking\n    // on the hidden class, revisit in V8 versions after 6.2\n    this._onImmediate = null;\n    this._onImmediate = callback;\n    this._argv = args;\n    this._destroyed = false;\n    this[kRefed] = false;\n\n    initAsyncResource(this, 'Immediate');\n\n    this.ref();\n    immediateInfo[kCount]++;\n\n    immediateQueue.append(this);\n  }\n\n  ref() {\n    if (this[kRefed] === false) {\n      this[kRefed] = true;\n      if (immediateInfo[kRefCount]++ === 0)\n        toggleImmediateRef(true);\n    }\n    return this;\n  }\n\n  unref() {\n    if (this[kRefed] === true) {\n      this[kRefed] = false;\n      if (--immediateInfo[kRefCount] === 0)\n        toggleImmediateRef(false);\n    }\n    return this;\n  }\n};\n\nfunction setImmediate(callback, arg1, arg2, arg3) {\n  if (typeof callback !== 'function') {\n    throw new ERR_INVALID_CALLBACK();\n  }\n\n  var i, args;\n  switch (arguments.length) {\n    // fast cases\n    case 1:\n      break;\n    case 2:\n      args = [arg1];\n      break;\n    case 3:\n      args = [arg1, arg2];\n      break;\n    default:\n      args = [arg1, arg2, arg3];\n      for (i = 4; i < arguments.length; i++) {\n        // extend array dynamically, makes .apply run much faster in v6.0.0\n        args[i - 1] = arguments[i];\n      }\n      break;\n  }\n\n  return new Immediate(callback, args);\n}\n\nsetImmediate[internalUtil.promisify.custom] = function(value) {\n  return new Promise((resolve) => new Immediate(resolve, [value]));\n};\n\nexports.setImmediate = setImmediate;\n\n\nexports.clearImmediate = function clearImmediate(immediate) {\n  if (!immediate || immediate._destroyed)\n    return;\n\n  immediateInfo[kCount]--;\n  immediate._destroyed = true;\n\n  if (immediate[kRefed] && --immediateInfo[kRefCount] === 0)\n    toggleImmediateRef(false);\n  immediate[kRefed] = undefined;\n\n  if (destroyHooksExist()) {\n    emitDestroy(immediate[async_id_symbol]);\n  }\n\n  immediate._onImmediate = null;\n\n  immediateQueue.remove(immediate);\n};\n\n// Legacy alias on the C++ wrapper object. This is not public API, so we may\n// want to runtime-deprecate it at some point. There's no hurry, though.\nObject.defineProperty(TimerWrap.prototype, 'owner', {\n  get() { return this[owner_symbol]; },\n  set(v) { return this[owner_symbol] = v; }\n});\n\n});"},{"scriptId":"54","url":"internal/timers.js","source":"(function (exports, require, module, process, internalBinding) {'use strict';\n\nconst {\n  getDefaultTriggerAsyncId,\n  newAsyncId,\n  initHooksExist,\n  emitInit\n} = require('internal/async_hooks');\n// Symbols for storing async id state.\nconst async_id_symbol = Symbol('asyncId');\nconst trigger_async_id_symbol = Symbol('triggerId');\n\nconst {\n  ERR_INVALID_CALLBACK,\n  ERR_OUT_OF_RANGE\n} = require('internal/errors').codes;\nconst { validateNumber } = require('internal/validators');\n\nconst { inspect } = require('util');\n\n// Timeout values > TIMEOUT_MAX are set to 1.\nconst TIMEOUT_MAX = 2 ** 31 - 1;\n\nconst unrefedSymbol = Symbol('unrefed');\n\nmodule.exports = {\n  TIMEOUT_MAX,\n  kTimeout: Symbol('timeout'), // For hiding Timeouts on other internals.\n  async_id_symbol,\n  trigger_async_id_symbol,\n  Timeout,\n  initAsyncResource,\n  setUnrefTimeout,\n  validateTimerDuration\n};\n\nvar timers;\nfunction getTimers() {\n  if (timers === undefined) {\n    timers = require('timers');\n  }\n  return timers;\n}\n\nfunction initAsyncResource(resource, type) {\n  const asyncId = resource[async_id_symbol] = newAsyncId();\n  const triggerAsyncId =\n    resource[trigger_async_id_symbol] = getDefaultTriggerAsyncId();\n  if (initHooksExist())\n    emitInit(asyncId, type, triggerAsyncId, resource);\n}\n\n// Timer constructor function.\n// The entire prototype is defined in lib/timers.js\nfunction Timeout(callback, after, args, isRepeat, isUnrefed) {\n  after *= 1; // coalesce to number or NaN\n  if (!(after >= 1 && after <= TIMEOUT_MAX)) {\n    if (after > TIMEOUT_MAX) {\n      process.emitWarning(`${after} does not fit into` +\n                          ' a 32-bit signed integer.' +\n                          '\\nTimeout duration was set to 1.',\n                          'TimeoutOverflowWarning');\n    }\n    after = 1; // schedule on next tick, follows browser behavior\n  }\n\n  this._called = false;\n  this._idleTimeout = after;\n  this._idlePrev = this;\n  this._idleNext = this;\n  this._idleStart = null;\n  // this must be set to null first to avoid function tracking\n  // on the hidden class, revisit in V8 versions after 6.2\n  this._onTimeout = null;\n  this._onTimeout = callback;\n  this._timerArgs = args;\n  this._repeat = isRepeat ? after : null;\n  this._destroyed = false;\n\n  this[unrefedSymbol] = isUnrefed;\n\n  initAsyncResource(this, 'Timeout');\n}\n\n// Make sure the linked list only shows the minimal necessary information.\nTimeout.prototype[inspect.custom] = function(_, options) {\n  return inspect(this, {\n    ...options,\n    // Only inspect one level.\n    depth: 0,\n    // It should not recurse.\n    customInspect: false\n  });\n};\n\nTimeout.prototype.refresh = function() {\n  if (this._handle) {\n    // Would be more ideal with uv_timer_again(), however that API does not\n    // cause libuv's sorted timers data structure (a binary heap at the time\n    // of writing) to re-sort itself. This causes ordering inconsistencies.\n    this._handle.start(this._idleTimeout);\n  } else if (this[unrefedSymbol]) {\n    getTimers()._unrefActive(this);\n  } else {\n    getTimers().active(this);\n  }\n\n  return this;\n};\n\nfunction setUnrefTimeout(callback, after, arg1, arg2, arg3) {\n  // Type checking identical to setTimeout()\n  if (typeof callback !== 'function') {\n    throw new ERR_INVALID_CALLBACK();\n  }\n\n  let i, args;\n  switch (arguments.length) {\n    // fast cases\n    case 1:\n    case 2:\n      break;\n    case 3:\n      args = [arg1];\n      break;\n    case 4:\n      args = [arg1, arg2];\n      break;\n    default:\n      args = [arg1, arg2, arg3];\n      for (i = 5; i < arguments.length; i++) {\n        // extend array dynamically, makes .apply run much faster in v6.0.0\n        args[i - 2] = arguments[i];\n      }\n      break;\n  }\n\n  const timer = new Timeout(callback, after, args, false, true);\n  getTimers()._unrefActive(timer);\n\n  return timer;\n}\n\n// Type checking used by timers.enroll() and Socket#setTimeout()\nfunction validateTimerDuration(msecs) {\n  validateNumber(msecs, 'msecs');\n  if (msecs < 0 || !isFinite(msecs)) {\n    throw new ERR_OUT_OF_RANGE('msecs', 'a non-negative finite number', msecs);\n  }\n\n  // Ensure that msecs fits into signed int32\n  if (msecs > TIMEOUT_MAX) {\n    process.emitWarning(`${msecs} does not fit into a 32-bit signed integer.` +\n                        `\\nTimer duration was truncated to ${TIMEOUT_MAX}.`,\n                        'TimeoutOverflowWarning');\n    return TIMEOUT_MAX;\n  }\n\n  return msecs;\n}\n\n});"},{"scriptId":"12","url":"internal/async_hooks.js","source":"(function (exports, require, module, process, internalBinding) {'use strict';\n\nconst {\n  ERR_ASYNC_TYPE,\n  ERR_INVALID_ASYNC_ID\n} = require('internal/errors').codes;\nconst async_wrap = internalBinding('async_wrap');\n/* async_hook_fields is a Uint32Array wrapping the uint32_t array of\n * Environment::AsyncHooks::fields_[]. Each index tracks the number of active\n * hooks for each type.\n *\n * async_id_fields is a Float64Array wrapping the double array of\n * Environment::AsyncHooks::async_id_fields_[]. Each index contains the ids for\n * the various asynchronous states of the application. These are:\n *  kExecutionAsyncId: The async_id assigned to the resource responsible for the\n *    current execution stack.\n *  kTriggerAsyncId: The async_id of the resource that caused (or 'triggered')\n *    the resource corresponding to the current execution stack.\n *  kAsyncIdCounter: Incremental counter tracking the next assigned async_id.\n *  kDefaultTriggerAsyncId: Written immediately before a resource's constructor\n *    that sets the value of the init()'s triggerAsyncId. The precedence order\n *    of retrieving the triggerAsyncId value is:\n *    1. the value passed directly to the constructor\n *    2. value set in kDefaultTriggerAsyncId\n *    3. executionAsyncId of the current resource.\n *\n * async_ids_stack is a Float64Array that contains part of the async ID\n * stack. Each pushAsyncIds() call adds two doubles to it, and each\n * popAsyncIds() call removes two doubles from it.\n * It has a fixed size, so if that is exceeded, calls to the native\n * side are used instead in pushAsyncIds() and popAsyncIds().\n */\nconst { async_hook_fields, async_id_fields, owner_symbol } = async_wrap;\n// Store the pair executionAsyncId and triggerAsyncId in a std::stack on\n// Environment::AsyncHooks::async_ids_stack_ tracks the resource responsible for\n// the current execution stack. This is unwound as each resource exits. In the\n// case of a fatal exception this stack is emptied after calling each hook's\n// after() callback.\nconst { pushAsyncIds: pushAsyncIds_, popAsyncIds: popAsyncIds_ } = async_wrap;\n// For performance reasons, only track Promises when a hook is enabled.\nconst { enablePromiseHook, disablePromiseHook } = async_wrap;\n// Properties in active_hooks are used to keep track of the set of hooks being\n// executed in case another hook is enabled/disabled. The new set of hooks is\n// then restored once the active set of hooks is finished executing.\nconst active_hooks = {\n  // Array of all AsyncHooks that will be iterated whenever an async event\n  // fires. Using var instead of (preferably const) in order to assign\n  // active_hooks.tmp_array if a hook is enabled/disabled during hook\n  // execution.\n  array: [],\n  // Use a counter to track nested calls of async hook callbacks and make sure\n  // the active_hooks.array isn't altered mid execution.\n  call_depth: 0,\n  // Use to temporarily store and updated active_hooks.array if the user\n  // enables or disables a hook while hooks are being processed. If a hook is\n  // enabled() or disabled() during hook execution then the current set of\n  // active hooks is duplicated and set equal to active_hooks.tmp_array. Any\n  // subsequent changes are on the duplicated array. When all hooks have\n  // completed executing active_hooks.tmp_array is assigned to\n  // active_hooks.array.\n  tmp_array: null,\n  // Keep track of the field counts held in active_hooks.tmp_array. Because the\n  // async_hook_fields can't be reassigned, store each uint32 in an array that\n  // is written back to async_hook_fields when active_hooks.array is restored.\n  tmp_fields: null\n};\n\nconst { registerDestroyHook } = async_wrap;\n\n// Each constant tracks how many callbacks there are for any given step of\n// async execution. These are tracked so if the user didn't include callbacks\n// for a given step, that step can bail out early.\nconst { kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve,\n        kCheck, kExecutionAsyncId, kAsyncIdCounter, kTriggerAsyncId,\n        kDefaultTriggerAsyncId, kStackLength } = async_wrap.constants;\n\n// Used in AsyncHook and AsyncResource.\nconst async_id_symbol = Symbol('asyncId');\nconst trigger_async_id_symbol = Symbol('triggerAsyncId');\nconst init_symbol = Symbol('init');\nconst before_symbol = Symbol('before');\nconst after_symbol = Symbol('after');\nconst destroy_symbol = Symbol('destroy');\nconst promise_resolve_symbol = Symbol('promiseResolve');\nconst emitBeforeNative = emitHookFactory(before_symbol, 'emitBeforeNative');\nconst emitAfterNative = emitHookFactory(after_symbol, 'emitAfterNative');\nconst emitDestroyNative = emitHookFactory(destroy_symbol, 'emitDestroyNative');\nconst emitPromiseResolveNative =\n    emitHookFactory(promise_resolve_symbol, 'emitPromiseResolveNative');\n\n// Setup the callbacks that node::AsyncWrap will call when there are hooks to\n// process. They use the same functions as the JS embedder API. These callbacks\n// are setup immediately to prevent async_wrap.setupHooks() from being hijacked\n// and the cost of doing so is negligible.\nasync_wrap.setupHooks({ init: emitInitNative,\n                        before: emitBeforeNative,\n                        after: emitAfterNative,\n                        destroy: emitDestroyNative,\n                        promise_resolve: emitPromiseResolveNative });\n\n// Used to fatally abort the process if a callback throws.\nfunction fatalError(e) {\n  if (typeof e.stack === 'string') {\n    process._rawDebug(e.stack);\n  } else {\n    const o = { message: e };\n    Error.captureStackTrace(o, fatalError);\n    process._rawDebug(o.stack);\n  }\n  if (process.binding('config').shouldAbortOnUncaughtException) {\n    process.abort();\n  }\n  process.exit(1);\n}\n\n\nfunction validateAsyncId(asyncId, type) {\n  // Skip validation when async_hooks is disabled\n  if (async_hook_fields[kCheck] <= 0) return;\n\n  if (!Number.isSafeInteger(asyncId) || asyncId < -1) {\n    fatalError(new ERR_INVALID_ASYNC_ID(type, asyncId));\n  }\n}\n\n// Emit From Native //\n\n// Used by C++ to call all init() callbacks. Because some state can be setup\n// from C++ there's no need to perform all the same operations as in\n// emitInitScript.\nfunction emitInitNative(asyncId, type, triggerAsyncId, resource) {\n  active_hooks.call_depth += 1;\n  // Use a single try/catch for all hooks to avoid setting up one per iteration.\n  try {\n    for (var i = 0; i < active_hooks.array.length; i++) {\n      if (typeof active_hooks.array[i][init_symbol] === 'function') {\n        active_hooks.array[i][init_symbol](\n          asyncId, type, triggerAsyncId,\n          resource\n        );\n      }\n    }\n  } catch (e) {\n    fatalError(e);\n  } finally {\n    active_hooks.call_depth -= 1;\n  }\n\n  // Hooks can only be restored if there have been no recursive hook calls.\n  // Also the active hooks do not need to be restored if enable()/disable()\n  // weren't called during hook execution, in which case active_hooks.tmp_array\n  // will be null.\n  if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\n    restoreActiveHooks();\n  }\n}\n\n\nfunction emitHookFactory(symbol, name) {\n  // Called from native. The asyncId stack handling is taken care of there\n  // before this is called.\n  // eslint-disable-next-line func-style\n  const fn = function(asyncId) {\n    active_hooks.call_depth += 1;\n    // Use a single try/catch for all hook to avoid setting up one per\n    // iteration.\n    try {\n      for (var i = 0; i < active_hooks.array.length; i++) {\n        if (typeof active_hooks.array[i][symbol] === 'function') {\n          active_hooks.array[i][symbol](asyncId);\n        }\n      }\n    } catch (e) {\n      fatalError(e);\n    } finally {\n      active_hooks.call_depth -= 1;\n    }\n\n    // Hooks can only be restored if there have been no recursive hook calls.\n    // Also the active hooks do not need to be restored if enable()/disable()\n    // weren't called during hook execution, in which case\n    // active_hooks.tmp_array will be null.\n    if (active_hooks.call_depth === 0 && active_hooks.tmp_array !== null) {\n      restoreActiveHooks();\n    }\n  };\n\n  // Set the name property of the anonymous function as it looks good in the\n  // stack trace.\n  Object.defineProperty(fn, 'name', {\n    value: name\n  });\n  return fn;\n}\n\n// Manage Active Hooks //\n\nfunction getHookArrays() {\n  if (active_hooks.call_depth === 0)\n    return [active_hooks.array, async_hook_fields];\n  // If this hook is being enabled while in the middle of processing the array\n  // of currently active hooks then duplicate the current set of active hooks\n  // and store this there. This shouldn't fire until the next time hooks are\n  // processed.\n  if (active_hooks.tmp_array === null)\n    storeActiveHooks();\n  return [active_hooks.tmp_array, active_hooks.tmp_fields];\n}\n\n\nfunction storeActiveHooks() {\n  active_hooks.tmp_array = active_hooks.array.slice();\n  // Don't want to make the assumption that kInit to kDestroy are indexes 0 to\n  // 4. So do this the long way.\n  active_hooks.tmp_fields = [];\n  copyHooks(active_hooks.tmp_fields, async_hook_fields);\n}\n\nfunction copyHooks(destination, source) {\n  destination[kInit] = source[kInit];\n  destination[kBefore] = source[kBefore];\n  destination[kAfter] = source[kAfter];\n  destination[kDestroy] = source[kDestroy];\n  destination[kPromiseResolve] = source[kPromiseResolve];\n}\n\n\n// Then restore the correct hooks array in case any hooks were added/removed\n// during hook callback execution.\nfunction restoreActiveHooks() {\n  active_hooks.array = active_hooks.tmp_array;\n  copyHooks(async_hook_fields, active_hooks.tmp_fields);\n\n  active_hooks.tmp_array = null;\n  active_hooks.tmp_fields = null;\n}\n\n\nfunction enableHooks() {\n  enablePromiseHook();\n  async_hook_fields[kCheck] += 1;\n}\n\nfunction disableHooks() {\n  disablePromiseHook();\n  async_hook_fields[kCheck] -= 1;\n}\n\n// Internal Embedder API //\n\n// Increment the internal id counter and return the value. Important that the\n// counter increment first. Since it's done the same way in\n// Environment::new_async_uid()\nfunction newAsyncId() {\n  return ++async_id_fields[kAsyncIdCounter];\n}\n\nfunction getOrSetAsyncId(object) {\n  if (object.hasOwnProperty(async_id_symbol)) {\n    return object[async_id_symbol];\n  }\n\n  return object[async_id_symbol] = newAsyncId();\n}\n\n\n// Return the triggerAsyncId meant for the constructor calling it. It's up to\n// the user to safeguard this call and make sure it's zero'd out when the\n// constructor is complete.\nfunction getDefaultTriggerAsyncId() {\n  let defaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\n  // If defaultTriggerAsyncId isn't set, use the executionAsyncId\n  if (defaultTriggerAsyncId < 0)\n    defaultTriggerAsyncId = async_id_fields[kExecutionAsyncId];\n  return defaultTriggerAsyncId;\n}\n\n\nfunction clearDefaultTriggerAsyncId() {\n  async_id_fields[kDefaultTriggerAsyncId] = -1;\n}\n\n\nfunction defaultTriggerAsyncIdScope(triggerAsyncId, block, ...args) {\n  if (triggerAsyncId === undefined)\n    return Reflect.apply(block, null, args);\n  // do { if (!(Number.isSafeInteger(triggerAsyncId))) (process._rawDebug(\"CHECK: Number.isSafeInteger(triggerAsyncId) == true\"), process.abort()) } while (0)\n  // do { if (!(triggerAsyncId > 0)) (process._rawDebug(\"CHECK: triggerAsyncId > 0 == true\"), process.abort()) } while (0)\n  const oldDefaultTriggerAsyncId = async_id_fields[kDefaultTriggerAsyncId];\n  async_id_fields[kDefaultTriggerAsyncId] = triggerAsyncId;\n\n  let ret;\n  try {\n    ret = Reflect.apply(block, null, args);\n  } finally {\n    async_id_fields[kDefaultTriggerAsyncId] = oldDefaultTriggerAsyncId;\n  }\n\n  return ret;\n}\n\n\nfunction initHooksExist() {\n  return async_hook_fields[kInit] > 0;\n}\n\nfunction afterHooksExist() {\n  return async_hook_fields[kAfter] > 0;\n}\n\nfunction destroyHooksExist() {\n  return async_hook_fields[kDestroy] > 0;\n}\n\n\nfunction emitInitScript(asyncId, type, triggerAsyncId, resource) {\n  validateAsyncId(asyncId, 'asyncId');\n  if (triggerAsyncId !== null)\n    validateAsyncId(triggerAsyncId, 'triggerAsyncId');\n  if (async_hook_fields[kCheck] > 0 &&\n      (typeof type !== 'string' || type.length <= 0)) {\n    throw new ERR_ASYNC_TYPE(type);\n  }\n\n  // Short circuit all checks for the common case. Which is that no hooks have\n  // been set. Do this to remove performance impact for embedders (and core).\n  if (async_hook_fields[kInit] === 0)\n    return;\n\n  // This can run after the early return check b/c running this function\n  // manually means that the embedder must have used getDefaultTriggerAsyncId().\n  if (triggerAsyncId === null) {\n    triggerAsyncId = getDefaultTriggerAsyncId();\n  }\n\n  emitInitNative(asyncId, type, triggerAsyncId, resource);\n}\n\n\nfunction emitBeforeScript(asyncId, triggerAsyncId) {\n  // Validate the ids. An id of -1 means it was never set and is visible on the\n  // call graph. An id < -1 should never happen in any circumstance. Throw\n  // on user calls because async state should still be recoverable.\n  validateAsyncId(asyncId, 'asyncId');\n  validateAsyncId(triggerAsyncId, 'triggerAsyncId');\n\n  pushAsyncIds(asyncId, triggerAsyncId);\n\n  if (async_hook_fields[kBefore] > 0)\n    emitBeforeNative(asyncId);\n}\n\n\nfunction emitAfterScript(asyncId) {\n  validateAsyncId(asyncId, 'asyncId');\n\n  if (async_hook_fields[kAfter] > 0)\n    emitAfterNative(asyncId);\n\n  popAsyncIds(asyncId);\n}\n\n\nfunction emitDestroyScript(asyncId) {\n  validateAsyncId(asyncId, 'asyncId');\n\n  // Return early if there are no destroy callbacks, or invalid asyncId.\n  if (async_hook_fields[kDestroy] === 0 || asyncId <= 0)\n    return;\n  async_wrap.queueDestroyAsyncId(asyncId);\n}\n\n\n// Keep in sync with Environment::AsyncHooks::clear_async_id_stack\n// in src/env-inl.h.\nfunction clearAsyncIdStack() {\n  async_id_fields[kExecutionAsyncId] = 0;\n  async_id_fields[kTriggerAsyncId] = 0;\n  async_hook_fields[kStackLength] = 0;\n}\n\n\nfunction hasAsyncIdStack() {\n  return async_hook_fields[kStackLength] > 0;\n}\n\n\n// This is the equivalent of the native push_async_ids() call.\nfunction pushAsyncIds(asyncId, triggerAsyncId) {\n  const offset = async_hook_fields[kStackLength];\n  if (offset * 2 >= async_wrap.async_ids_stack.length)\n    return pushAsyncIds_(asyncId, triggerAsyncId);\n  async_wrap.async_ids_stack[offset * 2] = async_id_fields[kExecutionAsyncId];\n  async_wrap.async_ids_stack[offset * 2 + 1] = async_id_fields[kTriggerAsyncId];\n  async_hook_fields[kStackLength]++;\n  async_id_fields[kExecutionAsyncId] = asyncId;\n  async_id_fields[kTriggerAsyncId] = triggerAsyncId;\n}\n\n\n// This is the equivalent of the native pop_async_ids() call.\nfunction popAsyncIds(asyncId) {\n  if (async_hook_fields[kStackLength] === 0) return false;\n  const stackLength = async_hook_fields[kStackLength];\n\n  if (async_hook_fields[kCheck] > 0 &&\n      async_id_fields[kExecutionAsyncId] !== asyncId) {\n    // Do the same thing as the native code (i.e. crash hard).\n    return popAsyncIds_(asyncId);\n  }\n\n  const offset = stackLength - 1;\n  async_id_fields[kExecutionAsyncId] = async_wrap.async_ids_stack[2 * offset];\n  async_id_fields[kTriggerAsyncId] = async_wrap.async_ids_stack[2 * offset + 1];\n  async_hook_fields[kStackLength] = offset;\n  return offset > 0;\n}\n\n\nfunction executionAsyncId() {\n  return async_id_fields[kExecutionAsyncId];\n}\n\nfunction triggerAsyncId() {\n  return async_id_fields[kTriggerAsyncId];\n}\n\n\nmodule.exports = {\n  executionAsyncId,\n  triggerAsyncId,\n  // Private API\n  getHookArrays,\n  symbols: {\n    async_id_symbol, trigger_async_id_symbol,\n    init_symbol, before_symbol, after_symbol, destroy_symbol,\n    promise_resolve_symbol, owner_symbol\n  },\n  constants: {\n    kInit, kBefore, kAfter, kDestroy, kTotals, kPromiseResolve\n  },\n  enableHooks,\n  disableHooks,\n  clearDefaultTriggerAsyncId,\n  clearAsyncIdStack,\n  hasAsyncIdStack,\n  // Internal Embedder API\n  newAsyncId,\n  getOrSetAsyncId,\n  getDefaultTriggerAsyncId,\n  defaultTriggerAsyncIdScope,\n  initHooksExist,\n  afterHooksExist,\n  destroyHooksExist,\n  emitInit: emitInitScript,\n  emitBefore: emitBeforeScript,\n  emitAfter: emitAfterScript,\n  emitDestroy: emitDestroyScript,\n  registerDestroyHook,\n};\n\n});"},{"scriptId":"53","url":"internal/linkedlist.js","source":"(function (exports, require, module, process, internalBinding) {'use strict';\n\nfunction init(list) {\n  list._idleNext = list;\n  list._idlePrev = list;\n}\n\n// Show the most idle item.\nfunction peek(list) {\n  if (list._idlePrev === list) return null;\n  return list._idlePrev;\n}\n\n// Remove an item from its list.\nfunction remove(item) {\n  if (item._idleNext) {\n    item._idleNext._idlePrev = item._idlePrev;\n  }\n\n  if (item._idlePrev) {\n    item._idlePrev._idleNext = item._idleNext;\n  }\n\n  item._idleNext = null;\n  item._idlePrev = null;\n}\n\n// Remove an item from its list and place at the end.\nfunction append(list, item) {\n  if (item._idleNext || item._idlePrev) {\n    remove(item);\n  }\n\n  // Items are linked  with _idleNext -> (older) and _idlePrev -> (newer).\n  // Note: This linkage (next being older) may seem counter-intuitive at first.\n  item._idleNext = list._idleNext;\n  item._idlePrev = list;\n\n  // The list _idleNext points to tail (newest) and _idlePrev to head (oldest).\n  list._idleNext._idlePrev = item;\n  list._idleNext = item;\n}\n\nfunction isEmpty(list) {\n  return list._idleNext === list;\n}\n\nmodule.exports = {\n  init,\n  peek,\n  remove,\n  append,\n  isEmpty\n};\n\n});"},{"scriptId":"49","url":"internal/fixed_queue.js","source":"(function (exports, require, module, process, internalBinding) {'use strict';\n\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\nconst kSize = 2048;\nconst kMask = kSize - 1;\n\n// The FixedQueue is implemented as a singly-linked list of fixed-size\n// circular buffers. It looks something like this:\n//\n//  head                                                       tail\n//    |                                                          |\n//    v                                                          v\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\n// +-----------+               +-----------+                  +-----------+\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |       bottom --> |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |    ...    |               |    ...    |                  |    ...    |\n// |   item    |               |   item    |                  |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |  [empty]  | <-- top       |   item    |                  |   item    |\n// |  [empty]  |               |   item    |                  |   item    |\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\n// +-----------+               +-----------+                  +-----------+\n//\n// Or, if there is only one circular buffer, it looks something\n// like either of these:\n//\n//  head   tail                                 head   tail\n//    |     |                                     |     |\n//    v     v                                     v     v\n// +-----------+                               +-----------+\n// |  [null]   |                               |  [null]   |\n// +-----------+                               +-----------+\n// |  [empty]  |                               |   item    |\n// |  [empty]  |                               |   item    |\n// |   item    | <-- bottom            top --> |  [empty]  |\n// |   item    |                               |  [empty]  |\n// |  [empty]  | <-- top            bottom --> |   item    |\n// |  [empty]  |                               |   item    |\n// +-----------+                               +-----------+\n//\n// Adding a value means moving `top` forward by one, removing means\n// moving `bottom` forward by one. After reaching the end, the queue\n// wraps around.\n//\n// When `top === bottom` the current queue is empty and when\n// `top + 1 === bottom` it's full. This wastes a single space of storage\n// but allows much quicker checks.\n\nconst FixedCircularBuffer = class FixedCircularBuffer {\n  constructor() {\n    this.bottom = 0;\n    this.top = 0;\n    this.list = new Array(kSize);\n    this.next = null;\n  }\n\n  isEmpty() {\n    return this.top === this.bottom;\n  }\n\n  isFull() {\n    return ((this.top + 1) & kMask) === this.bottom;\n  }\n\n  push(data) {\n    this.list[this.top] = data;\n    this.top = (this.top + 1) & kMask;\n  }\n\n  shift() {\n    const nextItem = this.list[this.bottom];\n    if (nextItem === undefined)\n      return null;\n    this.list[this.bottom] = undefined;\n    this.bottom = (this.bottom + 1) & kMask;\n    return nextItem;\n  }\n};\n\nmodule.exports = class FixedQueue {\n  constructor() {\n    this.head = this.tail = new FixedCircularBuffer();\n  }\n\n  isEmpty() {\n    return this.head.isEmpty();\n  }\n\n  push(data) {\n    if (this.head.isFull()) {\n      // Head is full: Creates a new queue, sets the old queue's `.next` to it,\n      // and sets it as the new main queue.\n      this.head = this.head.next = new FixedCircularBuffer();\n    }\n    this.head.push(data);\n  }\n\n  shift() {\n    const { tail } = this;\n    const next = tail.shift();\n    if (tail.isEmpty() && tail.next !== null) {\n      // If there is another queue, it forms the new tail.\n      this.tail = tail.next;\n    }\n    return next;\n  }\n};\n\n});"},{"scriptId":"25","url":"assert.js","source":"(function (exports, require, module, process, internalBinding) {// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nconst { Buffer } = require('buffer');\nconst { codes: {\n  ERR_AMBIGUOUS_ARGUMENT,\n  ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_RETURN_VALUE\n} } = require('internal/errors');\nconst { AssertionError } = require('internal/assert');\nconst { openSync, closeSync, readSync } = require('fs');\nconst { inspect, types: { isPromise, isRegExp } } = require('util');\nconst { EOL } = require('internal/constants');\nconst { NativeModule } = require('internal/bootstrap/loaders');\n\nconst errorCache = new Map();\n\nlet isDeepEqual;\nlet isDeepStrictEqual;\nlet parseExpressionAt;\nlet findNodeAround;\nlet columnOffset = 0;\nlet decoder;\n\nfunction lazyLoadComparison() {\n  const comparison = require('internal/util/comparisons');\n  isDeepEqual = comparison.isDeepEqual;\n  isDeepStrictEqual = comparison.isDeepStrictEqual;\n}\n\n// Escape control characters but not \\n and \\t to keep the line breaks and\n// indentation intact.\n// eslint-disable-next-line no-control-regex\nconst escapeSequencesRegExp = /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f]/g;\nconst meta = [\n  '\\\\u0000', '\\\\u0001', '\\\\u0002', '\\\\u0003', '\\\\u0004',\n  '\\\\u0005', '\\\\u0006', '\\\\u0007', '\\\\b', '',\n  '', '\\\\u000b', '\\\\f', '', '\\\\u000e',\n  '\\\\u000f', '\\\\u0010', '\\\\u0011', '\\\\u0012', '\\\\u0013',\n  '\\\\u0014', '\\\\u0015', '\\\\u0016', '\\\\u0017', '\\\\u0018',\n  '\\\\u0019', '\\\\u001a', '\\\\u001b', '\\\\u001c', '\\\\u001d',\n  '\\\\u001e', '\\\\u001f'\n];\n\nconst escapeFn = (str) => meta[str.charCodeAt(0)];\n\nlet warned = false;\n\n// The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nconst assert = module.exports = ok;\n\nconst NO_EXCEPTION_SENTINEL = {};\n\n// All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided. All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction innerFail(obj) {\n  if (obj.message instanceof Error) throw obj.message;\n\n  throw new AssertionError(obj);\n}\n\nfunction fail(actual, expected, message, operator, stackStartFn) {\n  const argsLen = arguments.length;\n\n  let internalMessage;\n  if (argsLen === 0) {\n    internalMessage = 'Failed';\n  } else if (argsLen === 1) {\n    message = actual;\n    actual = undefined;\n  } else {\n    if (warned === false) {\n      warned = true;\n      process.emitWarning(\n        'assert.fail() with more than one argument is deprecated. ' +\n          'Please use assert.strictEqual() instead or only pass a message.',\n        'DeprecationWarning',\n        'DEP0094'\n      );\n    }\n    if (argsLen === 2)\n      operator = '!=';\n  }\n\n  if (message instanceof Error) throw message;\n\n  const errArgs = {\n    actual,\n    expected,\n    operator: operator === undefined ? 'fail' : operator,\n    stackStartFn: stackStartFn || fail\n  };\n  if (message !== undefined) {\n    errArgs.message = message;\n  }\n  const err = new AssertionError(errArgs);\n  if (internalMessage) {\n    err.message = internalMessage;\n    err.generatedMessage = true;\n  }\n  throw err;\n}\n\nassert.fail = fail;\n\n// The AssertionError is defined in internal/error.\nassert.AssertionError = AssertionError;\n\nfunction findColumn(fd, column, code) {\n  if (code.length > column + 100) {\n    try {\n      return parseCode(code, column);\n    } catch {\n      // End recursion in case no code could be parsed. The expression should\n      // have been found after 2500 characters, so stop trying.\n      if (code.length - column > 2500) {\n        // eslint-disable-next-line no-throw-literal\n        throw null;\n      }\n    }\n  }\n  // Read up to 2500 bytes more than necessary in columns. That way we address\n  // multi byte characters and read enough data to parse the code.\n  const bytesToRead = column - code.length + 2500;\n  const buffer = Buffer.allocUnsafe(bytesToRead);\n  const bytesRead = readSync(fd, buffer, 0, bytesToRead);\n  code += decoder.write(buffer.slice(0, bytesRead));\n  // EOF: fast path.\n  if (bytesRead < bytesToRead) {\n    return parseCode(code, column);\n  }\n  // Read potentially missing code.\n  return findColumn(fd, column, code);\n}\n\nfunction getCode(fd, line, column) {\n  let bytesRead = 0;\n  if (line === 0) {\n    // Special handle line number one. This is more efficient and simplifies the\n    // rest of the algorithm. Read more than the regular column number in bytes\n    // to prevent multiple reads in case multi byte characters are used.\n    return findColumn(fd, column, '');\n  }\n  let lines = 0;\n  // Prevent blocking the event loop by limiting the maximum amount of\n  // data that may be read.\n  let maxReads = 64; // bytesPerRead * maxReads = 512 kb\n  const bytesPerRead = 8192;\n  // Use a single buffer up front that is reused until the call site is found.\n  let buffer = Buffer.allocUnsafe(bytesPerRead);\n  while (maxReads-- !== 0) {\n    // Only allocate a new buffer in case the needed line is found. All data\n    // before that can be discarded.\n    buffer = lines < line ? buffer : Buffer.allocUnsafe(bytesPerRead);\n    bytesRead = readSync(fd, buffer, 0, bytesPerRead);\n    // Read the buffer until the required code line is found.\n    for (var i = 0; i < bytesRead; i++) {\n      if (buffer[i] === 10 && ++lines === line) {\n        // If the end of file is reached, directly parse the code and return.\n        if (bytesRead < bytesPerRead) {\n          return parseCode(buffer.toString('utf8', i + 1, bytesRead), column);\n        }\n        // Check if the read code is sufficient or read more until the whole\n        // expression is read. Make sure multi byte characters are preserved\n        // properly by using the decoder.\n        const code = decoder.write(buffer.slice(i + 1, bytesRead));\n        return findColumn(fd, column, code);\n      }\n    }\n  }\n}\n\nfunction parseCode(code, offset) {\n  // Lazy load acorn.\n  if (parseExpressionAt === undefined) {\n    ({ parseExpressionAt } = require('internal/deps/acorn/dist/acorn'));\n    ({ findNodeAround } = require('internal/deps/acorn/dist/walk'));\n  }\n  let node;\n  let start = 0;\n  // Parse the read code until the correct expression is found.\n  do {\n    try {\n      node = parseExpressionAt(code, start);\n      start = node.end + 1 || start;\n      // Find the CallExpression in the tree.\n      node = findNodeAround(node, offset, 'CallExpression');\n    } catch (err) {\n      // Unexpected token error and the like.\n      start += err.raisedAt || 1;\n      if (start > offset) {\n        // No matching expression found. This could happen if the assert\n        // expression is bigger than the provided buffer.\n        // eslint-disable-next-line no-throw-literal\n        throw null;\n      }\n    }\n  } while (node === undefined || node.node.end < offset);\n\n  return [\n    node.node.start,\n    code.slice(node.node.start, node.node.end)\n        .replace(escapeSequencesRegExp, escapeFn)\n  ];\n}\n\nfunction getErrMessage(message, fn) {\n  const tmpLimit = Error.stackTraceLimit;\n  // Make sure the limit is set to 1. Otherwise it could fail (<= 0) or it\n  // does to much work.\n  Error.stackTraceLimit = 1;\n  // We only need the stack trace. To minimize the overhead use an object\n  // instead of an error.\n  const err = {};\n  Error.captureStackTrace(err, fn);\n  Error.stackTraceLimit = tmpLimit;\n\n  const tmpPrepare = Error.prepareStackTrace;\n  Error.prepareStackTrace = (_, stack) => stack;\n  const call = err.stack[0];\n  Error.prepareStackTrace = tmpPrepare;\n\n  const filename = call.getFileName();\n\n  if (!filename) {\n    return message;\n  }\n\n  const line = call.getLineNumber() - 1;\n  let column = call.getColumnNumber() - 1;\n\n  // Line number one reports the wrong column due to being wrapped in a\n  // function. Remove that offset to get the actual call.\n  if (line === 0) {\n    if (columnOffset === 0) {\n      const { wrapper } = require('internal/modules/cjs/loader');\n      columnOffset = wrapper[0].length;\n    }\n    column -= columnOffset;\n  }\n\n  const identifier = `${filename}${line}${column}`;\n\n  if (errorCache.has(identifier)) {\n    return errorCache.get(identifier);\n  }\n\n  // Skip Node.js modules!\n  if (filename.endsWith('.js') && NativeModule.exists(filename.slice(0, -3))) {\n    errorCache.set(identifier, undefined);\n    return;\n  }\n\n  let fd;\n  try {\n    // Set the stack trace limit to zero. This makes sure unexpected token\n    // errors are handled faster.\n    Error.stackTraceLimit = 0;\n\n    if (decoder === undefined) {\n      const { StringDecoder } = require('string_decoder');\n      decoder = new StringDecoder('utf8');\n    }\n\n    fd = openSync(filename, 'r', 0o666);\n    // Reset column and message.\n    [column, message] = getCode(fd, line, column);\n    // Flush unfinished multi byte characters.\n    decoder.end();\n    // Always normalize indentation, otherwise the message could look weird.\n    if (message.indexOf('\\n') !== -1) {\n      if (EOL === '\\r\\n') {\n        message = message.replace(/\\r\\n/g, '\\n');\n      }\n      const frames = message.split('\\n');\n      message = frames.shift();\n      for (const frame of frames) {\n        let pos = 0;\n        while (pos < column && (frame[pos] === ' ' || frame[pos] === '\\t')) {\n          pos++;\n        }\n        message += `\\n  ${frame.slice(pos)}`;\n      }\n    }\n    message = `The expression evaluated to a falsy value:\\n\\n  ${message}\\n`;\n    // Make sure to always set the cache! No matter if the message is\n    // undefined or not\n    errorCache.set(identifier, message);\n\n    return message;\n  } catch {\n    // Invalidate cache to prevent trying to read this part again.\n    errorCache.set(identifier, undefined);\n  } finally {\n    // Reset limit.\n    Error.stackTraceLimit = tmpLimit;\n    if (fd !== undefined)\n      closeSync(fd);\n  }\n}\n\nfunction innerOk(fn, argLen, value, message) {\n  if (!value) {\n    let generatedMessage = false;\n\n    if (argLen === 0) {\n      generatedMessage = true;\n      message = 'No value argument passed to `assert.ok()`';\n    } else if (message == null) {\n      generatedMessage = true;\n      message = getErrMessage(message, fn);\n    } else if (message instanceof Error) {\n      throw message;\n    }\n\n    const err = new AssertionError({\n      actual: value,\n      expected: true,\n      message,\n      operator: '==',\n      stackStartFn: fn\n    });\n    err.generatedMessage = generatedMessage;\n    throw err;\n  }\n}\n\n// Pure assertion tests whether a value is truthy, as determined\n// by !!value.\nfunction ok(...args) {\n  innerOk(ok, args.length, ...args);\n}\nassert.ok = ok;\n\n// The equality assertion tests shallow, coercive equality with ==.\n/* eslint-disable no-restricted-properties */\nassert.equal = function equal(actual, expected, message) {\n  // eslint-disable-next-line eqeqeq\n  if (actual != expected) {\n    innerFail({\n      actual,\n      expected,\n      message,\n      operator: '==',\n      stackStartFn: equal\n    });\n  }\n};\n\n// The non-equality assertion tests for whether two objects are not\n// equal with !=.\nassert.notEqual = function notEqual(actual, expected, message) {\n  // eslint-disable-next-line eqeqeq\n  if (actual == expected) {\n    innerFail({\n      actual,\n      expected,\n      message,\n      operator: '!=',\n      stackStartFn: notEqual\n    });\n  }\n};\n\n// The equivalence assertion tests a deep equality relation.\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (!isDeepEqual(actual, expected)) {\n    innerFail({\n      actual,\n      expected,\n      message,\n      operator: 'deepEqual',\n      stackStartFn: deepEqual\n    });\n  }\n};\n\n// The non-equivalence assertion tests for any deep inequality.\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (isDeepEqual(actual, expected)) {\n    innerFail({\n      actual,\n      expected,\n      message,\n      operator: 'notDeepEqual',\n      stackStartFn: notDeepEqual\n    });\n  }\n};\n/* eslint-enable */\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (!isDeepStrictEqual(actual, expected)) {\n    innerFail({\n      actual,\n      expected,\n      message,\n      operator: 'deepStrictEqual',\n      stackStartFn: deepStrictEqual\n    });\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (isDeepEqual === undefined) lazyLoadComparison();\n  if (isDeepStrictEqual(actual, expected)) {\n    innerFail({\n      actual,\n      expected,\n      message,\n      operator: 'notDeepStrictEqual',\n      stackStartFn: notDeepStrictEqual\n    });\n  }\n}\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (!Object.is(actual, expected)) {\n    innerFail({\n      actual,\n      expected,\n      message,\n      operator: 'strictEqual',\n      stackStartFn: strictEqual\n    });\n  }\n};\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (Object.is(actual, expected)) {\n    innerFail({\n      actual,\n      expected,\n      message,\n      operator: 'notStrictEqual',\n      stackStartFn: notStrictEqual\n    });\n  }\n};\n\nclass Comparison {\n  constructor(obj, keys, actual) {\n    for (const key of keys) {\n      if (key in obj) {\n        if (actual !== undefined &&\n            typeof actual[key] === 'string' &&\n            isRegExp(obj[key]) &&\n            obj[key].test(actual[key])) {\n          this[key] = actual[key];\n        } else {\n          this[key] = obj[key];\n        }\n      }\n    }\n  }\n}\n\nfunction compareExceptionKey(actual, expected, key, message, keys) {\n  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {\n    if (!message) {\n      // Create placeholder objects to create a nice output.\n      const a = new Comparison(actual, keys);\n      const b = new Comparison(expected, keys, actual);\n\n      const err = new AssertionError({\n        actual: a,\n        expected: b,\n        operator: 'deepStrictEqual',\n        stackStartFn: assert.throws\n      });\n      err.actual = actual;\n      err.expected = expected;\n      err.operator = 'throws';\n      throw err;\n    }\n    innerFail({\n      actual,\n      expected,\n      message,\n      operator: 'throws',\n      stackStartFn: assert.throws\n    });\n  }\n}\n\nfunction expectedException(actual, expected, msg) {\n  if (typeof expected !== 'function') {\n    if (isRegExp(expected))\n      return expected.test(actual);\n    // assert.doesNotThrow does not accept objects.\n    if (arguments.length === 2) {\n      throw new ERR_INVALID_ARG_TYPE(\n        'expected', ['Function', 'RegExp'], expected\n      );\n    }\n\n    // TODO: Disallow primitives as error argument.\n    // This is here to prevent a breaking change.\n    if (typeof expected !== 'object') {\n      return true;\n    }\n\n    // Handle primitives properly.\n    if (typeof actual !== 'object' || actual === null) {\n      const err = new AssertionError({\n        actual,\n        expected,\n        message: msg,\n        operator: 'deepStrictEqual',\n        stackStartFn: assert.throws\n      });\n      err.operator = 'throws';\n      throw err;\n    }\n\n    const keys = Object.keys(expected);\n    // Special handle errors to make sure the name and the message are compared\n    // as well.\n    if (expected instanceof Error) {\n      keys.push('name', 'message');\n    }\n    if (isDeepEqual === undefined) lazyLoadComparison();\n    for (const key of keys) {\n      if (typeof actual[key] === 'string' &&\n          isRegExp(expected[key]) &&\n          expected[key].test(actual[key])) {\n        continue;\n      }\n      compareExceptionKey(actual, expected, key, msg, keys);\n    }\n    return true;\n  }\n  // Guard instanceof against arrow functions as they don't have a prototype.\n  if (expected.prototype !== undefined && actual instanceof expected) {\n    return true;\n  }\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n  return expected.call({}, actual) === true;\n}\n\nfunction getActual(fn) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);\n  }\n  try {\n    fn();\n  } catch (e) {\n    return e;\n  }\n  return NO_EXCEPTION_SENTINEL;\n}\n\nfunction checkIsPromise(obj) {\n  // Accept native ES6 promises and promises that are implemented in a similar\n  // way. Do not accept thenables that use a function as `obj` and that have no\n  // `catch` handler.\n  return isPromise(obj) ||\n    obj !== null && typeof obj === 'object' &&\n    typeof obj.then === 'function' &&\n    typeof obj.catch === 'function';\n}\n\nasync function waitForActual(promiseFn) {\n  let resultPromise;\n  if (typeof promiseFn === 'function') {\n    // Return a rejected promise if `promiseFn` throws synchronously.\n    resultPromise = promiseFn();\n    // Fail in case no promise is returned.\n    if (!checkIsPromise(resultPromise)) {\n      throw new ERR_INVALID_RETURN_VALUE('instance of Promise',\n                                         'promiseFn', resultPromise);\n    }\n  } else if (checkIsPromise(promiseFn)) {\n    resultPromise = promiseFn;\n  } else {\n    throw new ERR_INVALID_ARG_TYPE(\n      'promiseFn', ['Function', 'Promise'], promiseFn);\n  }\n\n  try {\n    await resultPromise;\n  } catch (e) {\n    return e;\n  }\n  return NO_EXCEPTION_SENTINEL;\n}\n\nfunction expectsError(stackStartFn, actual, error, message) {\n  if (typeof error === 'string') {\n    if (arguments.length === 4) {\n      throw new ERR_INVALID_ARG_TYPE('error',\n                                     ['Object', 'Error', 'Function', 'RegExp'],\n                                     error);\n    }\n    if (typeof actual === 'object' && actual !== null) {\n      if (actual.message === error) {\n        throw new ERR_AMBIGUOUS_ARGUMENT(\n          'error/message',\n          `The error message \"${actual.message}\" is identical to the message.`\n        );\n      }\n    } else if (actual === error) {\n      throw new ERR_AMBIGUOUS_ARGUMENT(\n        'error/message',\n        `The error \"${actual}\" is identical to the message.`\n      );\n    }\n    message = error;\n    error = undefined;\n  }\n\n  if (actual === NO_EXCEPTION_SENTINEL) {\n    let details = '';\n    if (error && error.name) {\n      details += ` (${error.name})`;\n    }\n    details += message ? `: ${message}` : '.';\n    const fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';\n    innerFail({\n      actual: undefined,\n      expected: error,\n      operator: stackStartFn.name,\n      message: `Missing expected ${fnType}${details}`,\n      stackStartFn\n    });\n  }\n  if (error && expectedException(actual, error, message) === false) {\n    throw actual;\n  }\n}\n\nfunction expectsNoError(stackStartFn, actual, error, message) {\n  if (actual === NO_EXCEPTION_SENTINEL)\n    return;\n\n  if (typeof error === 'string') {\n    message = error;\n    error = undefined;\n  }\n\n  if (!error || expectedException(actual, error)) {\n    const details = message ? `: ${message}` : '.';\n    const fnType = stackStartFn.name === 'doesNotReject' ?\n      'rejection' : 'exception';\n    innerFail({\n      actual,\n      expected: error,\n      operator: stackStartFn.name,\n      message: `Got unwanted ${fnType}${details}\\n` +\n               `Actual message: \"${actual && actual.message}\"`,\n      stackStartFn\n    });\n  }\n  throw actual;\n}\n\nassert.throws = function throws(promiseFn, ...args) {\n  expectsError(throws, getActual(promiseFn), ...args);\n};\n\nassert.rejects = async function rejects(promiseFn, ...args) {\n  expectsError(rejects, await waitForActual(promiseFn), ...args);\n};\n\nassert.doesNotThrow = function doesNotThrow(fn, ...args) {\n  expectsNoError(doesNotThrow, getActual(fn), ...args);\n};\n\nassert.doesNotReject = async function doesNotReject(fn, ...args) {\n  expectsNoError(doesNotReject, await waitForActual(fn), ...args);\n};\n\nassert.ifError = function ifError(err) {\n  if (err !== null && err !== undefined) {\n    let message = 'ifError got unwanted exception: ';\n    if (typeof err === 'object' && typeof err.message === 'string') {\n      if (err.message.length === 0 && err.constructor) {\n        message += err.constructor.name;\n      } else {\n        message += err.message;\n      }\n    } else {\n      message += inspect(err);\n    }\n\n    const newErr = new AssertionError({\n      actual: err,\n      expected: null,\n      operator: 'ifError',\n      message,\n      stackStartFn: ifError\n    });\n\n    // Make sure we actually have a stack trace!\n    const origStack = err.stack;\n\n    if (typeof origStack === 'string') {\n      // This will remove any duplicated frames from the error frames taken\n      // from within `ifError` and add the original error frames to the newly\n      // created ones.\n      const tmp2 = origStack.split('\\n');\n      tmp2.shift();\n      // Filter all frames existing in err.stack.\n      let tmp1 = newErr.stack.split('\\n');\n      for (var i = 0; i < tmp2.length; i++) {\n        // Find the first occurrence of the frame.\n        const pos = tmp1.indexOf(tmp2[i]);\n        if (pos !== -1) {\n          // Only keep new frames.\n          tmp1 = tmp1.slice(0, pos);\n          break;\n        }\n      }\n      newErr.stack = `${tmp1.join('\\n')}\\n${tmp2.join('\\n')}`;\n    }\n\n    throw newErr;\n  }\n};\n\n// Expose a strict only variant of assert\nfunction strict(...args) {\n  innerOk(strict, args.length, ...args);\n}\nassert.strict = Object.assign(strict, assert, {\n  equal: assert.strictEqual,\n  deepEqual: assert.deepStrictEqual,\n  notEqual: assert.notStrictEqual,\n  notDeepEqual: assert.notDeepStrictEqual\n});\nassert.strict.strict = assert.strict;\n\n});"}]}